var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
import {
    loadScript,
    loadStyle
} from '@forbes/fbs-assets-loader';
import {
    PlayerData
} from '../utils/player-data';
export var thumbnailDimensions = [
    384,
    768,
    1024,
    1280,
    1600,
    1920,
];
/**
 * This is a service which controlls video players on Forbes pages.
 */
var FbsVideoService = /** @class */ (function() {
    function FbsVideoService() {
        this.ima3Config = {
            serverUrl: '',
            requestMode: 'onplay',
            adTechOrder: ['html5', 'flash'],
            vpaidMode: 'ENABLED',
            timeout: 8000,
            showVpaidControls: true
        };
        this.bc = window['bc'];
        this.videojs = window['videojs'];
        this.srVideoInit = window['srVideoInit'];
        // playerData keeps track of state of any on page (in DOM) player instance
        this.playerData = new Map();
        this.idCount = 0;
        this.playerCount = 0; // Number of players on the page.
        this.PID = '50e4a8434240cf5c4b000009'; // SimpleReach PID
        this.amazonBids = {};
        this.hiddenPauseEnabled = true;
    }
    FbsVideoService.prototype.generateId = function() {
        return 'brightcove_perform_' + this.idCount++;
    };
    /**
     * Initialize Brightcove Perform video player
     */
    FbsVideoService.prototype.init = function(options) {
        return __awaiter(this, void 0, void 0, function() {
            var playerData;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        this.fbsAdsService = window['fbsads'];
                        playerData = this.playerData.get(options.videoElementId);
                        playerData = playerData ? Object.assign(playerData, options) : new PlayerData(options);
                        this.playerData.set(options.videoElementId, playerData);
                        playerData.amazonId = 'videoSlot' + ++this.playerCount;
                        return [4 /*yield*/ , this.waitforGdpr()];
                    case 1:
                        _a.sent();
                        // mnet load script
                        return [4 /*yield*/ , this.loadMnet()];
                    case 2:
                        // mnet load script
                        _a.sent();
                        // Load player specific videojs
                        return [4 /*yield*/ , this.loadVideojs(playerData)];
                    case 3:
                        // Load player specific videojs
                        _a.sent();
                        return [4 /*yield*/ , this.loadIma3()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/ , this.initPlayer(playerData)];
                    case 5:
                        _a.sent();
                        this.callSimpleReach(playerData);
                        this.setSimpleReachEvents(playerData);
                        return [2 /*return*/ , playerData];
                }
            });
        });
    };
    FbsVideoService.prototype.waitforGdpr = function() {
        return __awaiter(this, void 0, void 0, function() {
            var trackingService, promise;
            return __generator(this, function(_a) {
                trackingService = window['trackingService'] || {};
                promise = new Promise(function(resolve) {
                    var submitPreferencesHandler = function(message) {
                        try {
                            var result = JSON.parse(message.data);
                            if (result && result.source === 'preference_manager' && result.message === 'submit_preferences') {
                                resolve();
                                message.currentTarget.removeEventListener(message.type, submitPreferencesHandler);
                            }
                        } catch (e) {}
                    };
                    if (trackingService.isEurope && document.cookie.indexOf('notice_gdpr_prefs=') === -1) {
                        window.addEventListener('message', submitPreferencesHandler);
                    } else {
                        resolve();
                    }
                });
                return [2 /*return*/ , promise];
            });
        });
    };
    FbsVideoService.prototype.requestMnetBids = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                if (!this.fbsAdsService) {
                    return [2 /*return*/ , ''];
                }
                return [2 /*return*/ , Promise.race([
                    this.fbsAdsService.fetchMediaNetVideoBids(),
                    new Promise(function(resolve) {
                        setTimeout(resolve, 2000);
                    }).then(function() {
                        return '';
                    })
                ])];
            });
        });
    };
    FbsVideoService.prototype.loadMnet = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                if (this.fbsAdsService.initMediaNetVideoBidding()) {
                    return [2 /*return*/ , this.fbsAdsService.initMediaNetVideoBidding()];
                }
                return [2 /*return*/ ];
            });
        });
    };
    /**
     * Notify the service of a video beginning to play
     */
    FbsVideoService.prototype.notifyPlaying = function(videoElementId) {
        var videoPlayEvent = new CustomEvent('fbs-video-playing', {
            detail: {
                videoElementId: videoElementId
            },
        });
        document.dispatchEvent(videoPlayEvent);
    };
    /**
     * Set up init function for Simple Reach for the page.
     */
    FbsVideoService.prototype.simpleReachCall = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                window['srVideoInit'] = function(_v, _p) {
                    if (window['SimplereachVideo']) {
                        window[_v] = window['SimplereachVideo'].video(_p);
                    }
                    return window[_v];
                };
                return [2 /*return*/ ];
            });
        });
    };
    /**
     * Load player specific videojs
     * @return {Observable} that emits when videojs is ready
     */
    FbsVideoService.prototype.loadVideojs = function(playerData) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.loadScript("//players.brightcove.net/2097119709001/" + playerData.playerId + "_default/index.min.js")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/ , this.loadScript("//d8rk54i4mohrb.cloudfront.net/js/video.js")];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/ , this.simpleReachCall()];
                    case 3:
                        _a.sent();
                        // Set variables on first load
                        this.videojs = window['videojs'];
                        this.srVideoInit = window['srVideoInit'];
                        this.bc = window['bc'];
                        return [2 /*return*/ ];
                }
            });
        });
    };
    /**
     * Initialize Simple Reach data for a player.
     */
    FbsVideoService.prototype.callSimpleReach = function(playerData, event) {
        if (event === void 0) {
            event = 'init';
        }
        var info = playerData['player']['mediainfo'];
        this.srVideoInit(playerData.id, {
            pid: this.PID,
            video_id: info.id,
            title: info['name'],
            description: info['description'],
            article_id: '',
            length: Math.trunc(info['duration']),
            thumbnail_url: info['thumbnail'],
            tags: info['tags'],
            date: info['createdAt'],
            ignore_errors: false,
            event_name: event,
        });
    };
    /**
     * Fire Simple Reach events.
     *
     * Set up listeners on a player for events from Brightcove, and use them to fire Simple Reach's events.
     */
    FbsVideoService.prototype.setSimpleReachEvents = function(playerData) {
        var player = this.videojs.getPlayer(playerData.id);
        var elapsedThresholdsToTrack = [3, 15, 30, 45];
        var currentTime;
        var quartile = 0;
        var elapsed = 0;
        player.on('timeupdate', function(e) {
            if (parseInt(currentTime) !== Math.floor(player.currentTime())) {
                if (typeof currentTime === 'undefined') {
                    window[playerData.id].start(playerData.autoplay ? 'auto' : 'click');
                }
                currentTime = Math.floor(player.currentTime());
                var loadPercentage = Math.floor((player.currentTime() / player.duration()) * 100);
                // loadPercentage sometimes skips over a percent or two, so check if we're at least another quarter through the video.
                // Handle 100% quartile with ended event.
                if (loadPercentage >= quartile + 25 && loadPercentage < 100) {
                    quartile += 25;
                    window[playerData.id].quartile(quartile);
                }
                // Fire elapsed every 15 seconds. Check if at least 15 seconds have passed since the exact amount may be skipped over.
                if (currentTime >= elapsed + 15) {
                    elapsed += 15;
                    window[playerData.id].elapsed(15);
                }
                if (currentTime >= elapsedThresholdsToTrack[0]) {
                    window[playerData.id].elapsedThreshold(elapsedThresholdsToTrack.shift());
                }
            }
        });
        player.on('ended', function(e) {
            window[playerData.id].quartile(quartile);
            window[playerData.id].complete();
        });
    };
    FbsVideoService.prototype.loadScript = function(src) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [2 /*return*/ , new Promise(function(resolve) {
                    loadScript(src, resolve);
                })];
            });
        });
    };
    FbsVideoService.prototype.loadStyle = function(src) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [2 /*return*/ , new Promise(function(resolve) {
                    loadStyle(src, resolve);
                })];
            });
        });
    };
    /**
     * Load IMA3 advertising module
     */
    FbsVideoService.prototype.loadIma3 = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , Promise.all([
                            this.loadStyle('//players.brightcove.net/videojs-ima3/2/videojs.ima3.min.css'),
                            this.loadScript('//players.brightcove.net/videojs-ima3/2/videojs.ima3.min.js')
                        ])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    /**
     * Initialize IMA3 advertising module with custom key value pairs
     */
    FbsVideoService.prototype.setAdTargeting = function(playerData) {
        return __awaiter(this, void 0, void 0, function() {
            var serverUrl, requestMode;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!playerData.player.ima3) {
                            return [2 /*return*/ ];
                        }
                        return [4 /*yield*/ , this.getAdServerUrl(playerData)];
                    case 1:
                        serverUrl = _a.sent();
                        requestMode = playerData.autoplay ? 'onload' : 'onplay';
                        // Override in case initIma3 is called on a page that already has preconfigured ads
                        if (playerData.player.ima3 instanceof Function) {
                            this.ima3Config.serverUrl = serverUrl;
                            this.ima3Config.requestMode = requestMode;
                            playerData.player.ima3(this.ima3Config);
                        } else {
                            playerData.player.ima3.settings.requestMode = requestMode;
                            playerData.player.ima3.settings.serverUrl = serverUrl;
                        }
                        return [2 /*return*/ ];
                }
            });
        });
    };
    /**
     * Get Ad Server URL for ads given a player data
     */
    FbsVideoService.prototype.getAdServerUrl = function(playerData) {
        return __awaiter(this, void 0, void 0, function() {
            var pageTargeting, videoTargeting, keyValuesPairs, keyValues, rect, targeting, qsParams, customParams, key, videoUrl, nonPersonalizedAds;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.getPageTargeting()];
                    case 1:
                        pageTargeting = _a.sent();
                        videoTargeting = this.getVideoAdTargeting(playerData);
                        keyValuesPairs = (playerData.keyValueString || '').split('&');
                        keyValues = (keyValuesPairs || []).reduce(function(acc, current) {
                            var _a = current.split('='),
                                key = _a[0],
                                value = _a[1];
                            // values will sometimes contain '&' character, so are encoded since we are splitting on '&'
                            // will throw error for malformed uri sequences
                            try {
                                acc[key] = decodeURIComponent(value || '');
                            } catch (err) {
                                console.error(err);
                                acc[key] = '';
                            }
                            return acc;
                        }, {});
                        rect = playerData.player.el_.getBoundingClientRect();
                        // check if height is 300 and has a 4:3 aspect ratio or higher
                        if (rect.height === 300 && rect.width / rect.height >= 1.33) {
                            keyValues['vh'] = '300plus';
                        }
                        targeting = __assign({}, pageTargeting, videoTargeting, keyValues);
                        qsParams = ((this.amazonBids[playerData.amazonId] || {})['helpers'] || {})['qsParams'] || '';
                        if (typeof qsParams === 'function') {
                            // Amazon's documentation says this should be a string but it's actually a function.
                            qsParams = qsParams();
                        }
                        customParams = '';
                        if (qsParams.length > 1) {
                            customParams += (customParams ? qsParams : qsParams.substring(1));
                            delete this.amazonBids[playerData.amazonId];
                        }
                        for (key in targeting) {
                            if (targeting.hasOwnProperty(key)) {
                                customParams += (customParams ? '&' : '') + key + '=' + targeting[key];
                            }
                        }
                        if (this.mnetBids) {
                            customParams += (customParams ? '&' : '') + this.mnetBids;
                            this.mnetBids = '';
                        }
                        customParams = encodeURIComponent(customParams);
                        videoUrl = encodeURIComponent("https://www.forbes.com/video/" + playerData.videoId + "/");
                        if (document.cookie.match(/notice_gdpr_prefs=0(?:,1)?:/)) {
                            nonPersonalizedAds = '&npa=1';
                        }
                        /* tslint:disable-next-line: max-line-length */
                        return [2 /*return*/ , "https://pubads.g.doubleclick.net/gampad/ads?sz=620x350|480x320&ciu_sz=s&impl=s&gdfp_req=1&env=vp&output=xml_vast2&unviewed_position_start=1" + nonPersonalizedAds + "&iu=" + playerData.adUnitPath + "&cust_params=" + customParams + "&url=[referrer_url]&correlator=[timestamp]&description_url=" + videoUrl];
                }
            });
        });
    };
    /**
     * Get Page Level Ad Targeting
     */
    FbsVideoService.prototype.getPageTargeting = function() {
        return __awaiter(this, void 0, void 0, function() {
            var targeting, pageTargeting_1;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        targeting = {};
                        if (!this.fbsAdsService) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , this.fbsAdsService.getPageTargeting()];
                    case 1:
                        pageTargeting_1 = _a.sent();
                        Object.keys(pageTargeting_1)
                            .filter(function(key) {
                                // Don't pull in page-level header bidding
                                return !(key.startsWith('mnet') || key.startsWith('fb_') || key.startsWith('amzn'));
                            }).forEach(function(key) {
                                targeting[key] = pageTargeting_1[key].join();
                            });
                        return [2 /*return*/ , targeting];
                    case 2:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    /**
     * Get Ad Targeting Specific to Video Information
     * @param playerData Player data to get targeting for
     * NOTE:
     * 'channelsection' === channel
     * 'channelsection2' === section
     * these values are defined in brightcove and, while confusing, can't be changed
     */
    FbsVideoService.prototype.getVideoAdTargeting = function(playerData) {
        var _a = this.getMediaInformation(playerData),
            duration = _a.duration,
            _b = _a.customFields,
            customFields = _b === void 0 ? {} : _b;
        var videoId = playerData.videoId,
            secretAutoplay = playerData.secretAutoplay,
            autoplay = playerData.autoplay;
        return {
            'vid': videoId,
            'vl': duration ? (duration <= 60 ? '1min' : 'not1min') : 'unknown',
            'vss': customFields.videospecialslot || '',
            'autoplay': !secretAutoplay && autoplay ? 'yes' : 'no',
            'vchan': this.parseChannelSection(customFields.channelsection) || '',
            'vsec': this.parseChannelSection(customFields.channelsection2) || ''
        };
    };
    /**
     * Parse Channel/Section strings from Brightcove
     * it comes to us in the format "Leadership :channel_6"
     * @param channelSection Channel/section name
     */
    FbsVideoService.prototype.parseChannelSection = function(channelSection) {
        if (channelSection === void 0) {
            channelSection = '';
        }
        return channelSection.split(':')[0].trim().replace(/\s/g, '');
    };
    /**
     * Initialize player
     * @return Observable that emits when player is ready
     */
    FbsVideoService.prototype.initPlayer = function(playerData) {
        return __awaiter(this, void 0, void 0, function() {
            var player, _a, _b;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.bc) {
                            return [2 /*return*/ , playerData];
                        }
                        if (!playerData.adsDisabled) {
                            this.getAmazonHeaderBidding(playerData);
                        }
                        try {
                            player = this.bc(playerData.id);
                            if (!playerData.adsDisabled && typeof player.ima3 === 'function') {
                                player.ima3(this.ima3Config);
                            }
                        } catch (e) {
                            console.error(e);
                        }
                        _a = playerData;
                        return [4 /*yield*/ , this.prepareVideo(playerData.id)];
                    case 1:
                        _a.player = _c.sent();
                        if (!!playerData.adsDisabled) return [3 /*break*/ , 3];
                        _b = this;
                        return [4 /*yield*/ , this.requestMnetBids()];
                    case 2:
                        _b.mnetBids = _c.sent();
                        _c.label = 3;
                    case 3:
                        return [4 /*yield*/ , this.handleVideoJsReady(playerData)];
                    case 4:
                        _c.sent();
                        return [2 /*return*/ , playerData];
                }
            });
        });
    };
    FbsVideoService.prototype.getAmazonHeaderBidding = function(playerData) {
        var _this = this;
        // Make the call to Amazon header bidding for the video ad.
        if (this.fbsAdsService) {
            this.fbsAdsService.fetchAmazonBids([{
                slotID: playerData.amazonId,
                mediaType: 'video'
            }]).then(function(bids) {
                _this.amazonBids[playerData.amazonId] = (bids || []).find(function(bid) {
                    return bid.slotID === playerData.amazonId;
                });
            });
        }
    };
    FbsVideoService.prototype.getMediaInformation = function(playerData) {
        if (!playerData.player) {
            return null;
        }
        return playerData.player.mediainfo;
    };
    FbsVideoService.prototype.prepareVideo = function(id) {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
                return [2 /*return*/ , new Promise(function(resolve) {
                    _this.videojs(id).ready(function() {
                        resolve(this);
                    });
                })];
            });
        });
    };
    FbsVideoService.prototype.handleVideoJsReady = function(playerData) {
        return __awaiter(this, void 0, void 0, function() {
            var mediaInfo, rect;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , new Promise(function(resolve, reject) {
                            playerData.player.catalog.getVideo(playerData.videoId, function(error, video) {
                                if (error || typeof video === 'string') {
                                    reject(error);
                                } else {
                                    resolve(video);
                                }
                            });
                        })];
                    case 1:
                        mediaInfo = _a.sent();
                        rect = document.getElementById(playerData.videoElementId).getBoundingClientRect();
                        mediaInfo = this.processVideoThumbnail(mediaInfo, rect);
                        this.handleCatalogVideo(playerData, mediaInfo);
                        if (!!playerData.adsDisabled) return [3 /*break*/ , 3];
                        return [4 /*yield*/ , this.setAdTargeting(playerData)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        return [2 /*return*/ , mediaInfo];
                }
            });
        });
    };
    FbsVideoService.prototype.processVideoThumbnail = function(media, rect) {
        var horizontal = rect.width > rect.height;
        var majorDimension = horizontal ? rect.width : rect.height;
        var dimension = thumbnailDimensions.find(function(dim) {
            return dim >= majorDimension;
        }) || thumbnailDimensions[thumbnailDimensions.length - 1];
        var size = horizontal ? dimension + "x0" : "0x" + dimension;
        // Returning new media object instead of modyfying existing
        return __assign({}, media, {
            poster: "https://thumbor.forbes.com/thumbor/" + size + "/" + media.poster,
            thumbnail: "https://thumbor.forbes.com/thumbor/" + size + "/" + media.thumbnail
        });
    };
    FbsVideoService.prototype.handleCatalogVideo = function(playerData, video) {
        playerData.player.catalog.load(video);
        // select_rendition === 'closest' - use rendition closest to player size
        // select_rendition === 'max' - use rendition closest to screen size
        // select_rendition =~ 'WxH' - use rendition closest to given Width and Height
        // select_rendition is missing - use Brightcove defaults
        if (playerData.renditionSelection) {
            playerData.mediainfo = null;
            switch (playerData.renditionSelection) {
                case 'closest':
                    var playerElement = document.getElementById(playerData.id);
                    playerData.mediainfo = this.selectRendition(playerData, playerElement.offsetWidth, playerElement.offsetHeight);
                    break;
                case 'max':
                    playerData.mediainfo = this.selectRendition(playerData, screen.width, screen.height);
                    break;
                default:
                    var match = playerData.renditionSelection.match(/(\d+)x(\d+)/i);
                    if (match) {
                        playerData.mediainfo = this.selectRendition(playerData, Number(match[1]), Number(match[2]));
                    }
                    break;
            }
        }
        if (playerData.mediainfo) {
            playerData.player.src({
                type: 'video/mp4',
                src: playerData.mediainfo.src
            });
        }
        return playerData;
    };
    /**
     *
     * Rendition selection
     *
     * @method selectRendition
     * @param {string} unique player div id
     * @param {int} target player width
     * @param {int} target player height
     * @return {Object} structure with selected renditions dimensions and source
     *
     */
    FbsVideoService.prototype.selectRendition = function(playerData, width, height) {
        // Pythagorean to turn height and width into a single numeric score
        var diagonal = Math.pow(width, 2) + Math.pow(height, 2);
        var minDistance = Number.MAX_VALUE;
        var candidate;
        this.playerData.get(playerData.id).player.mediainfo.sources.forEach(function(source) {
            if (source.container === 'MP4' && source.width && source.height && source.src) {
                // Pythagorean score difference
                var distance = source.width * source.width + source.height * source.height - diagonal;
                // Downscaling is better than upscaling but we will upscale if we have to
                //  - anything is better than nothing
                //  - positive distance (downscale) is better than any negative distance (upscale)
                //  - do not consider negative distance (upscale) when you've seen positive distance (downscale)
                if (!candidate ||
                    (minDistance < 0 && distance >= 0) ||
                    ((minDistance < 0 || (minDistance >= 0 && distance >= 0)) && (Math.abs(distance) < Math.abs(minDistance)))) {
                    candidate = source;
                    minDistance = distance;
                }
            }
        });
        return candidate;
    };
    /**
     * Dispose of player related data structures
     */
    FbsVideoService.prototype.dispose = function(playerData) {
        if (playerData) {
            this.playerData.delete(playerData.id);
            if (playerData.player && playerData.player.dispose) {
                playerData.player.dispose();
            }
        }
    };
    /**
     * Set the video details in the notification for currently playing video
     */
    FbsVideoService.prototype.setMediaSessionDetails = function(playerData) {
        if ('mediaSession' in navigator) {
            var mediainfo = this.getMediaInformation(playerData);
            navigator.mediaSession.metadata = new MediaMetadata({
                title: mediainfo.name,
                artist: 'Forbes Media',
                album: 'Forbes.com',
                artwork: [{
                    src: mediainfo.thumbnail
                }]
            });
        }
    };
    /**
     * Track the play for a video
     */
    FbsVideoService.prototype.trackPlay = function(playerData) {
        if (playerData.playTracked) {
            return;
        }
        playerData.playTracked = true;
        var trackingService = window['trackingService'];
        if (!(trackingService && trackingService.track)) {
            console.warn('No trackingService provided for video');
            return;
        }
        trackingService.track({
            event: 'fastVideo',
            fastN: 'video',
            fastSu: document.location.protocol + '//www.forbes.com/video/' + playerData.videoId + '/',
            fastPt: 'video',
            fastI: 'video/brightcove/' + playerData.videoId,
            fastRe: document.location.host
        }, false);
    };
    return FbsVideoService;
}());
export {
    FbsVideoService
};
//# sourceMappingURL=fbs-video.service.js.map


//////////////////
// WEBPACK FOOTER
// ./node_modules/@forbes/fbs-video/dist/fbs-video/fbs-video.service.js
// module id = 243
// module chunks = 16