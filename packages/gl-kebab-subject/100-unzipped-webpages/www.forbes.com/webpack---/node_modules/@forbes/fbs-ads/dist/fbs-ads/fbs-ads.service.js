var __extends = (this && this.__extends) || (function() {
    var extendStatics = Object.setPrototypeOf ||
        ({
                __proto__: []
            }
            instanceof Array && function(d, b) {
                d.__proto__ = b;
            }) ||
        function(d, b) {
            for (var p in b)
                if (b.hasOwnProperty(p)) d[p] = b[p];
        };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import {
    loadScript
} from '@forbes/fbs-assets-loader';
import {
    AdsService
} from '../ads.service';
import {
    PerformanceUtilities as Performance
} from '../utils/performance.utilities';
import {
    GoogleTagProxy
} from '../googletag';
import {
    AmazonBiddingService
} from '../amznads/amazon-bidding.service';
import {
    defaultAdConfig
} from './defaults';
import {
    MedianetBiddingService
} from '../medianet/medianet.service';
import {
    MediaNetVideoBiddingService
} from '../medianet/medianet-video.service';
import {
    UrlUtilities
} from '../utils/url.utilities';
import {
    CriteoBiddingService,
    lineItemRanges
} from '../criteo';
import {
    initMoatYield,
    targetYieldSlot
} from '../moat/moat-bidding';
var targetingSourceMap = {
    'google': 'goog-o',
    'news.google': 'goog-news',
    'news.url.google': 'goog-news',
    'bing': 'bing-o',
    'search.yahoo': 'yaho-o',
    'yahoo': 'yaho-ref',
    'facebook': 'fb',
    'm.facebook': 'fb',
    'linkedin': 'li',
    'twitter': 'twtr',
    'mobile.twitter': 'twtr'
};
/**
 * This is a FbsAdsService which controls the ads.
 *
 * [Implementation](https://github.forbes.com/Templates/fbs-ads-2#forbes-ads-2)
 */
var FbsAdsService = (function(_super) {
    __extends(FbsAdsService, _super);

    function FbsAdsService() {
        var _this = _super.call(this) || this;
        _this.googletag = window['googletag'] = window['googletag'] || {
            cmd: []
        };
        _this.googleTagProxy = new GoogleTagProxy(_this.googletag);
        _this._config = defaultAdConfig;
        _this.initialized = false;
        _this.adSlots = new Map();
        _this.adCounts = {};
        _this.bids = [];
        _this.medianetService = new MedianetBiddingService();
        _this.medianetVideoService = new MediaNetVideoBiddingService();
        _this.amazonBiddingService = new AmazonBiddingService();
        _this.criteoBiddingService = new CriteoBiddingService();
        return _this;
    }
    Object.defineProperty(FbsAdsService.prototype, "adUnitPath", {
        get: function() {
            return this._config.ad_unit_path;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Check user consents.
     * @param {string} isEurope
     * @returns {boolean} true if the user chose a consent option or consent isn't required.
     */
    FbsAdsService.prototype.metConsentRequirement = function(isEurope) {
        return (!isEurope || document.cookie.match(/notice_gdpr_prefs=/));
    };
    /**
     * This bootstraps the Service with the given config.
     *
     * It applies page level targeting.
     */
    FbsAdsService.prototype.bootstrap = function(config) {
        var _this = this;
        if (!config) {
            return;
        }
        var submitPreferencesHandler = function(message) {
            try {
                var result = JSON.parse(message.data);
                if (result && result.source === 'preference_manager' && result.message === 'submit_preferences') {
                    setTimeout(function() {
                        _this.bootstrap(config);
                        message.currentTarget.removeEventListener(message.type, submitPreferencesHandler);
                    });
                }
            } catch (e) {}
        };
        if (!this.metConsentRequirement(config.isEurope)) {
            window.addEventListener('message', submitPreferencesHandler);
            return;
        }
        this.apiReady = true;
        if (config) {
            this.medianetService.init(config);
            if (!config.mobile) {
                this.criteoBiddingService.init();
            }
        }
        var shoppingInsightsGroup = config && this.getShoppingInsightsGroup(config.params || {});
        this.amazonBiddingService.init(shoppingInsightsGroup);
        initMoatYield();
        if (config) {
            this.applyConfig(config);
        }
        this.loadGoogletag();
        this.setup();
        Performance.mark('Service Bootstrap');
    };
    /**
     * This sets up ads and gives header bidding 100ms to complete.
     * This should be called after all third party scripts are loaded and configs are set.
     */
    FbsAdsService.prototype.setup = function() {
        this.setEventListeners();
        var event = new CustomEvent('FbsAdsBootstrapped');
        document.dispatchEvent(event);
        this.enableAds();
    };
    /**
     * This applies a config and overwrites the existing config.
     */
    FbsAdsService.prototype.applyConfig = function(config) {
        var _this = this;
        // Copy the current and input so the originals are not altered
        var newConfig = Object.assign({}, config);
        var oldConfig = Object.assign({}, this._config);
        // Apply The new options onto the old config
        oldConfig.positions = Object.assign({}, oldConfig.positions, newConfig.positions);
        oldConfig.ad_unit_path = newConfig.ad_unit_path || this.adUnitPath;
        oldConfig.mobile = newConfig.mobile || oldConfig.mobile;
        newConfig.params = newConfig.params || {};
        newConfig.params.src = this.getTargetingSource(); // Attach src to the targeting
        this._config = Object.assign({}, newConfig, oldConfig); // Finally merge the old config back onto the new config
        this.applyTargeting(newConfig.params); // Apply the new targeting
        var _a = newConfig.params,
            _b = _a.channel,
            channel = _b === void 0 ? [] : _b,
            _c = _a.section,
            section = _c === void 0 ? [] : _c;
        this.medianetService.setChannelSection({
            channel: channel,
            section: section
        });
        this.fetchAmazonBids(config.amazonSlots)
            .then(function(bids) {
                _this.bids = bids;
            });
    };
    /**
     * Initialize MediaNet video bidding
     *
     * Invoked externally from video package because not all pages have video
     */
    FbsAdsService.prototype.initMediaNetVideoBidding = function() {
        return this.medianetVideoService.init();
    };
    /**
     * Fetches MediaNet video bid string
     */
    FbsAdsService.prototype.fetchMediaNetVideoBids = function() {
        return this.medianetVideoService.fetchMediaNetBids();
    };
    /**
     * This fetches Amazon header bids.
     */
    FbsAdsService.prototype.fetchAmazonBids = function(amazonSlots) {
        return this.amazonBiddingService.fetchBids(amazonSlots);
    };
    /**
     * This fetches Criteo header bids.
     */
    FbsAdsService.prototype.fetchCriteoBids = function(adUnits, bidRanges) {
        return this.criteoBiddingService.fetchBids(adUnits, bidRanges);
    };
    /**
     * This sets Criteo DFP Targeting.
     */
    FbsAdsService.prototype.setCriteoTargeting = function() {
        var _this = this;
        this.googleTagProxy.push(function() {
            _this.criteoBiddingService.setTargeting();
        });
    };
    /**
     * This enables the ads. Should only be called after all initializion has been completed.
     */
    FbsAdsService.prototype.enableAds = function() {
        var _this = this;
        setTimeout(function() {
            _this.googleTagProxy.pushFirst(function() {
                // Lazy loading ads configuration
                if (_this._config.single_request) {
                    _this.googletag.pubads().enableSingleRequest();
                    _this.googletag.pubads().disableInitialLoad();
                }
                if (_this._config.safe_frame) {
                    _this.googletag.pubads().setSafeFrameConfig({
                        sandbox: true
                    });
                }
                _this.googletag.pubads().enableAsyncRendering();
                _this.googletag.pubads().collapseEmptyDivs();
                _this.setRequestNonPersonalizedAds();
                Performance.mark("Enable Services");
                _this.googletag.enableServices();
            });
            _this.googleTagProxy.enable();
        }, 100);
    };
    /**
     * This creates a new slot.
     * @param positionName Name of the position to be created
     * @param adId ad-id which overwrites
     */
    FbsAdsService.prototype.createSlot = function(positionName, adId, customTargeting) {
        var _this = this;
        var position = this.getPosition(positionName);
        var incrementalId = (adId || position.slot_id || '').replace(/-\d+$/, '');
        if (position.incremental) {
            this.incrementAd(incrementalId);
        }
        var incrementalCount = this.adCounts[incrementalId];
        adId = this.getDivId(position.slot_id, adId);
        if (this.adSlots.get(adId)) {
            return;
        }
        if (position.criteoZoneId) {
            var criteoParams = {
                placements: [{
                    slotid: adId,
                    zoneid: position.criteoZoneId
                }]
            };
            this.fetchCriteoBids(criteoParams, lineItemRanges)
                .then(function() {
                    return _this.setCriteoTargeting();
                });
        }
        this.googleTagProxy.push(function() {
            Performance.mark("Created " + adId);
            var slot;
            try {
                slot = _this.googletag
                    .defineSlot(position.ad_unit_path || _this.adUnitPath, position.sizes, adId);
            } catch (e) {
                return;
            }
            if (!slot) {
                return;
            }
            _this.adSlots.set(adId, slot
                .setTargeting('pos', position.slot_id)
                .setTargeting('slotId', adId)
                .addService(_this.googletag.pubads()));
            var slots = Array.from(_this.adSlots.keys());
            var slotsEvent = new CustomEvent('fbs-ad-slots', {
                detail: slots
            });
            document.dispatchEvent(slotsEvent);
            _this.amazonBiddingService.setAmazonTargeting(slot, _this.bids);
            targetYieldSlot(slot);
            _this.applyTargeting(position.params, _this.adSlots.get(adId));
            if (position.incremental) {
                _this.adSlots.get(adId).setTargeting(position.slot_id, incrementalCount.toString());
            }
            if (position.slot_id === 'rec') {
                // add recx=0 custom parameter to rec ad calls
                _this.adSlots.get(adId).setTargeting('recx', '0');
            } else if (position.slot_id === 'mobilerec') {
                // add mobilex=0 custom parameter to rec ad calls
                _this.adSlots.get(adId).setTargeting('mobilex', '0');
            }
            if (customTargeting) {
                var kvs = customTargeting.split(',');
                kvs.forEach(function(kv) {
                    var keyValuePair = kv.split(':');
                    _this.adSlots.get(adId).setTargeting(keyValuePair[0] || '', keyValuePair[1] || '');
                });
            }
            if (_this._config.single_request) {
                _this.googletag.pubads().enableSingleRequest();
                _this.googletag.pubads().disableInitialLoad();
            }
            _this.googletag.enableServices();
        });
    };
    /**
     * Displays Performance Timings
     */
    FbsAdsService.prototype.checkPerformance = function() {
        var perf = [];
        performance.getEntriesByType('mark').forEach(function(mark) {
            perf.push([mark.name, mark.startTime]);
        });
        console.table(perf);
        return perf;
    };
    /**
     * This displays the given ad element id
     */
    FbsAdsService.prototype.display = function(adElementId) {
        var _this = this;
        this.googleTagProxy.push(function() {
            setTimeout(function() {
                Performance.mark("Called " + adElementId);
                _this.googletag.display(adElementId);
                if (!_this._config.single_request) {
                    return;
                }
                _this.refresh(adElementId);
            });
        });
    };
    /**
     * Load batch of ads in one request (SRA)
     */
    FbsAdsService.prototype.displayBatch = function(batchPositions) {
        var _this = this;
        var batch = batchPositions.map(function(position) {
            return _this.adSlots.get(position);
        });
        this.googleTagProxy.push(function() {
            setTimeout(function() {
                _this.googletag.pubads().refresh(batch, {
                    changeCorrelator: false
                });
            });
        });
    };
    /**
     * This refreshes the given ad element id.
     */
    FbsAdsService.prototype.refresh = function(adElementId) {
        var _this = this;
        return new Promise(function(resolve) {
            _this.googleTagProxy.push(function() {
                var slot = _this.adSlots.get(adElementId);
                resolve(_this.googletag.pubads().refresh([slot], {
                    changeCorrelator: false
                }));
            });
        });
    };
    /**
     * This destroys the given position.
     */
    FbsAdsService.prototype.destroySlots = function(divId) {
        var _this = this;
        var slot = this.adSlots.get(divId);
        this.adSlots.delete(divId);
        this.googleTagProxy.push(function() {
            return _this.googletag.destroySlots([slot]);
        });
    };
    /**
     * This resets the increments of a dynamic ad position.
     * @param position This should be the adId of the ad if it has one, or the position otherwise.
     */
    FbsAdsService.prototype.resetIncrements = function(position) {
        this.adCounts[position] = 0;
    };
    /**
     * This gets the configuration of the given position.
     */
    FbsAdsService.prototype.getPosition = function(position) {
        if (!this._config.positions[position]) {
            var error = new Error("The position " + position + " was not defined in the config.\r\nPlease use another position or define it.");
            throw error;
        }
        return this._config.positions[position];
    };
    /**
     * This gets the site out of the ad unit path.
     */
    FbsAdsService.prototype.getSite = function() {
        return this.adUnitPath.split('/')[2];
    };
    /**
     * This gets the zone and subzones out of the ad unit path.
     */
    FbsAdsService.prototype.getZone = function() {
        var parts = this.adUnitPath.split('/');
        parts.splice(0, 3);
        return parts.join('/');
    };
    /**
     * This gets the ID of the div of a certain position.
     */
    FbsAdsService.prototype.isIncremental = function(position) {
        var adPosition = this.getPosition(position);
        return adPosition.incremental;
    };
    /**
     * This gets the ID of the div of a certain position.
     */
    FbsAdsService.prototype.getDivId = function(position, adId) {
        var adPosition = this.getPosition(position);
        adId = adId || adPosition.ad_id || adPosition.slot_id;
        if (!this.isIncremental(position) || adId.match(/-\d+$/)) {
            return adId;
        }
        return adId + "-" + this.adCounts[adId];
    };
    /**
     * This gets the Slot ID of a given position.
     *
     * They are usually the same.
     */
    FbsAdsService.prototype.getSlotId = function(position) {
        return this.getPosition(position).slot_id;
    };
    /**
     * This gets the sizes targetted by the given position.
     */
    FbsAdsService.prototype.getSizes = function(position) {
        try {
            return this.getPosition(position).sizes;
        } catch (e) {
            console.error(e.stack);
            return [
                [0, 0]
            ];
        }
    };
    /**
     * This gets the maximum width targetted by the given position.
     */
    FbsAdsService.prototype.getMaxWidth = function(position) {
        var maxWidth = 0;
        this.getSizes(position).forEach(function(size) {
            if (Array.isArray(size)) {
                maxWidth = size[0] > maxWidth ? size[0] : maxWidth;
            }
        });
        return maxWidth;
    };
    /**
     * This gets the maximum height targetted by the given position.
     */
    FbsAdsService.prototype.getMaxHeight = function(position) {
        var maxHeight = 0;
        this.getSizes(position).forEach(function(size) {
            if (Array.isArray(size)) {
                maxHeight = size[1] > maxHeight ? size[1] : maxHeight;
            }
        });
        return maxHeight;
    };
    /**
     * This gets the maximum possible size targetted by the given position.
     */
    FbsAdsService.prototype.getMaxSize = function(position) {
        return [this.getMaxWidth(position), this.getMaxHeight(position)];
    };
    /**
     * Gets the current page level targetted value of the key
     */
    FbsAdsService.prototype.getTargeting = function(key) {
        var _this = this;
        return new Promise(function(resolve) {
            _this.googleTagProxy.push(function() {
                resolve(_this.googletag.pubads().getTargeting(key));
            });
        });
    };
    /**
     * Gets all of the current page level targeting data
     */
    FbsAdsService.prototype.getPageTargeting = function() {
        var _this = this;
        return new Promise(function(resolve) {
            _this.googleTagProxy.push(function() {
                var targetingKeys = _this.googletag.pubads().getTargetingKeys().reduce(function(targeting, key) {
                    targeting[key] = _this.googletag.pubads().getTargeting(key);
                    return targeting;
                }, {});
                resolve(targetingKeys);
            });
        });
    };
    FbsAdsService.prototype.resetAmazonSlots = function() {
        this.amazonBiddingService.resetAmazonSlots();
    };
    /**
     * This increments a dynamic ad.
     */
    FbsAdsService.prototype.incrementAd = function(adId) {
        if (!adId) {
            return;
        }
        this.adCounts[adId] = this.adCounts[adId] || 0;
        this.adCounts[adId]++;
    };
    /**
     * This sets eventl isteners for render and viewable ads
     */
    FbsAdsService.prototype.setEventListeners = function() {
        this.listenToRender();
        this.listenToViewable();
    };
    /**
     * This initiates the slot Render Ended Listener.
     */
    FbsAdsService.prototype.listenToRender = function() {
        var _this = this;
        this.googleTagProxy.push(function() {
            _this.googletag.pubads().addEventListener('slotRenderEnded', function(event) {
                var renderEvent = new CustomEvent('fbs-ad-render', {
                    detail: event
                });
                document.dispatchEvent(renderEvent);
            });
        });
        // Support AAX Slot Render Ended Function.
        window['aax'] = window['aax'] || {};
        window['aax'].cmd = window['aax'].cmd || [];
        window['aax'].cmd.push(function() {
            window['aax'].addEventListener('slotRenderEnded', function(event) {
                event.dfpDetails['aax'] = true;
                var size = event.dfpDetails.size;
                // Acceptable Ad Exchange 'aax'
                // sends the sizes back as a string
                // i.e. '300x250'
                // which breaks everything, so we have to change it
                // to an array of Numbers
                if (!Array.isArray(size)) {
                    var newSize = size.split('x').map(Number);
                    event.dfpDetails.size = newSize;
                }
                var renderEvent = new CustomEvent('fbs-ad-render', {
                    detail: event.dfpDetails
                });
                document.dispatchEvent(renderEvent);
            });
        });
    };
    /**
     * This initiates the slot Viewable Listener.
     */
    FbsAdsService.prototype.listenToViewable = function() {
        var _this = this;
        this.googleTagProxy.push(function() {
            _this.googletag.pubads().addEventListener('impressionViewable', function(event) {
                var viewableEvent = new CustomEvent('fbs-ad-viewable', {
                    detail: event
                });
                document.dispatchEvent(viewableEvent);
            });
        });
    };
    FbsAdsService.prototype.loadGoogletag = function() {
        loadScript('//www.googletagservices.com/tag/js/gpt.js', function() {});
    };
    /**
     * This applies targeting.
     */
    FbsAdsService.prototype.applyTargeting = function(params, target) {
        var _this = this;
        if (!params) {
            return;
        }
        // check for ad_target_override parameter in the url
        params = this.setCustomParams(window, params);
        this.googleTagProxy.push(function() {
            target = target || _this.googletag.pubads();
            Object.keys(params).forEach(function(key) {
                var value = params[key];
                value = !Array.isArray(value) && value !== null && value !== undefined && value.toString ? value.toString() : value;
                if (value) {
                    target.setTargeting(key, value);
                } else {
                    target.clearTargeting(key);
                }
            });
        });
    };
    FbsAdsService.prototype.getTargetingSource = function() {
        if (this.originalSource) {
            return this.originalSource;
        }
        var trackingService = window['trackingService'];
        var url = trackingService ? trackingService.getPreviousUrl() : document.referrer;
        if (!url) {
            return '';
        }
        var domain = UrlUtilities.getDomain(url).replace('www.', '');
        domain = domain.slice(0, domain.lastIndexOf('.'));
        this.originalSource = targetingSourceMap[domain] || '';
        return this.originalSource;
    };
    /**
     * Helper method to get correct channel/section string for Amazon
     */
    FbsAdsService.prototype.getChannelSection = function(data) {
        return Array.isArray(data) ? data[0] : (data || '').toString().split(',')[0];
    };
    /**
     * Amazon can only accept one key value pair
     * Filters config parameters so that value with the
     * highest priority is sent.
     *
     * specialslot > section[] > channel[]
     */
    FbsAdsService.prototype.getShoppingInsightsGroup = function(configParameters) {
        var specialslot = configParameters.specialslot,
            section = configParameters.section,
            channel = configParameters.channel,
            displaychannel = configParameters.displaychannel,
            displaysection = configParameters.displaysection;
        var insightsSection = this.getChannelSection(section) || displaysection;
        var insightsChannel = this.getChannelSection(channel) || displaychannel;
        return specialslot || insightsSection || insightsChannel;
    };
    /**
     * Adds or overrides key value pair to ad targeting params when added to the url as a query parameter
     * example: https://www.forbes.com/sites/some-article/?ad_target_override=test:true
     *
     * Note - the window object is being passed solely for the purpose of unit testing
     */
    FbsAdsService.prototype.setCustomParams = function(window, targetParams) {
        var queryParams = (window.location.search).substring(1).split('&');
        var adTargetOverride;
        for (var i = 0; i < queryParams.length; i++) {
            var paramKey = decodeURIComponent((queryParams[i] || '')).split('=');
            if (paramKey[0].indexOf('ad_target_override') > -1) {
                adTargetOverride = (paramKey[1] || '').split(',');
            }
        }
        if (!adTargetOverride) {
            return targetParams;
        }
        for (var i = 0; i < adTargetOverride.length; i++) {
            var params = adTargetOverride[i].split(':');
            if (params[0]) {
                targetParams[params[0]] = params[1] || '';
            }
        }
        return targetParams;
    };
    /**
     * Serving non-personalized ads for EU users who do not provide GDPR consent
     */
    FbsAdsService.prototype.setRequestNonPersonalizedAds = function() {
        var _this = this;
        if (document.cookie.match(/notice_gdpr_prefs=0(?:,1)?:/)) {
            this.googleTagProxy.push(function() {
                _this.googletag.pubads().setRequestNonPersonalizedAds(1);
            });
        }
    };
    return FbsAdsService;
}(AdsService));
export {
    FbsAdsService
};
//# sourceMappingURL=fbs-ads.service.js.map


//////////////////
// WEBPACK FOOTER
// ./node_modules/@forbes/fbs-ads/dist/fbs-ads/fbs-ads.service.js
// module id = 251
// module chunks = 16