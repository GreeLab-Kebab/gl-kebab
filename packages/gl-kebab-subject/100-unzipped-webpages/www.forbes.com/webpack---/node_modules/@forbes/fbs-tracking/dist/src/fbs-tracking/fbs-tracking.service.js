var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
    }
    return t;
};
import {
    CookiesService
} from './cookies';
import {
    GoogleAnalyticsService
} from './google-analytics';
import {
    TrackingUtil
} from './fbs-tracking.util';
import {
    SharingHashService
} from './sharing-hash/sharing-hash.service';
/**
 * This service is used to fire tracking of any sort.
 *
 * [Implementation](https://github.forbes.com/Templates/fbs-tracking-2/blob/master/readme.md)
 */
var FbsTrackingService = /** @class */ (function() {
    function FbsTrackingService() {
        this.gaPreviousUrl = null;
        this.previousUrl = null;
        this.previousPath = null;
        this.cookiesService = new CookiesService();
        this.googleAnalyticsService = new GoogleAnalyticsService();
        this.sharingHashService = new SharingHashService();
        this.trackingCalls = [];
        this.isEurope = false;
    }
    FbsTrackingService.prototype.metConsentRequirement = function() {
        return !this.isEurope || document.cookie.match(/notice_gdpr_prefs=/);
    };
    /**
     * This tracks the given data.
     */
    FbsTrackingService.prototype.track = function(trackingData, isPageview) {
        var _this = this;
        if (!this.metConsentRequirement()) {
            var submitPreferencesHandler_1 = function(message) {
                try {
                    var result = JSON.parse(message.data);
                    if (result && result.source === 'preference_manager' && result.message === 'submit_preferences') {
                        setTimeout(function() {
                            _this.track(trackingData, isPageview);
                            message.currentTarget.removeEventListener(message.type, submitPreferencesHandler_1);
                        });
                    }
                } catch (e) {}
            };
            window.addEventListener('message', submitPreferencesHandler_1);
            return;
        }
        if (!trackingData) {
            return;
        }
        if (isPageview) {
            this.updatePreviousUrl();
            this.sharingHashService.setHash();
        }
        var parentHash = this.sharingHashService.getParentHash() || 'none';
        var childHash = this.sharingHashService.getChildHash() || 'none';
        trackingData = __assign({}, trackingData, {
            shareParent: parentHash,
            shareChild: childHash,
            referrer: this.gaPreviousUrl,
            fastSu: trackingData.fastSu ? trackingData.fastSu + '#' + this.sharingHashService.getHash() : '',
            fastCi: this.getOrCreateClientId(),
            fastRe: trackingData.fastRe || this.previousUrl,
            isEurope: this.isEurope.toString()
        });
        this.googleAnalyticsService.track(trackingData);
        // Collect calls for e2e testing
        this.trackingCalls.push(trackingData);
    };
    /**
     * Generates or retrieves client_id
     */
    FbsTrackingService.prototype.getOrCreateClientId = function() {
        var clientId = this.cookiesService.get('client_id') || TrackingUtil.generateClientId();
        var expiresDate = new Date();
        expiresDate.setFullYear(expiresDate.getFullYear() + 2);
        this.cookiesService.set('client_id', clientId, {
            'expires': expiresDate
        });
        return clientId;
    };
    /**
     * Set the environment
     *
     * This defaults to dev but it should really be set according to the environment where it is running
     */
    FbsTrackingService.prototype.setEnvironment = function(environmentName) {
        this.googleAnalyticsService.setEnvironment(environmentName);
    };
    /**
     * Get the previous URL of the page which has WA and not have WA.
     */
    FbsTrackingService.prototype.getPreviousUrl = function() {
        return this.previousUrl || this.cookiesService.get('refURL') || document.referrer || '';
    };
    /**
     * Get the previous URL of the page and page scorll only for GA.
     */
    FbsTrackingService.prototype.getGAPreviousUrl = function() {
        return this.gaPreviousUrl || document.referrer || '';
    };
    /**
     * This updates the previous URL of the page.
     *
     * This takes into consideration that the welcome ad is not a real page.
     *
     * It should run exactly once per page view.
     */
    FbsTrackingService.prototype.updatePreviousUrl = function() {
        if (this.previousPath && this.previousPath !== window.location.pathname) {
            this.previousUrl = window.location.protocol + '//' + window.location.host + this.previousPath;
            this.gaPreviousUrl = window.location.protocol + '//' + window.location.host + this.previousPath;
        } else {
            this.gaPreviousUrl = this.getGAPreviousUrl();
            this.previousUrl = this.getPreviousUrl();
            this.cookiesService.remove('refURL', {
                'path': '/',
                'domain': '.forbes.com'
            });
            this.cookiesService.remove('toURL', {
                'path': '/',
                'domain': '.forbes.com'
            });
        }
        this.previousPath = window.location.pathname;
    };
    return FbsTrackingService;
}());
export {
    FbsTrackingService
};
//# sourceMappingURL=fbs-tracking.service.js.map


//////////////////
// WEBPACK FOOTER
// ./node_modules/@forbes/fbs-tracking/dist/src/fbs-tracking/fbs-tracking.service.js
// module id = 263
// module chunks = 16