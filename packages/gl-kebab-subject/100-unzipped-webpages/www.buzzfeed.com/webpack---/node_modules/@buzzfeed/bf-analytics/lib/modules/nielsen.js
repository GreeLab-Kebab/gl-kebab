import bfaDefs from "../common/bfa_defs";
import {
    defaultsDeep,
    bind,
} from "lodash";
/**
 * Original Nielsen client lay at 'https://secure-dcr-cert.imrworldwide.com/novms/js/2/ggcmb500.js'.
 */

"use strict";

function NielsenIntegration(sandbox) {
    var defaultSettings = {
        trackingBehavior: bfaDefs.trackingBehavior.byDefault,
        extTrackerGlobalName: "NOLCMB",
        staticTracker: null,
        videoTracker: null,
        staticConfig: {
            apid: "P7A907367-6D97-4DFD-AF90-B51EDF8D9AC5",
            sfcode: "dcr",
            nsdkv: "511",
            apn: "BuzzFeed Webapp Static",
        },
        videoConfig: {
            apid: "P3816F089-E5B5-4BF1-9D71-A955F54BCDE3",
            sfcode: "dcr",
            nsdkv: "511",
            apn: "buzzfeedVideos",
        },
        configMapsDelegate: null,
        extFilesPaths: [],
        trackers: [],
    };
    this._inited = false;
    this._active = false;
    this.settings = defaultsDeep(sandbox.settings || {}, defaultSettings);
    this.generalSettings = sandbox.getGeneralSettings();
    var _this = this;

    // ======================================================= Activation

    this._canInitializeTracker = function(trackerType) {
        return this.settings.trackers.length === 0 || this.settings.trackers.indexOf(trackerType) !== -1;
    };

    this.activate = function() {
        if (this._active || !this._inited || !sandbox.isApproved(_this.constructor.defaultId)) {
            return;
        }

        if (this.generalSettings.mode === bfaDefs.bfaMode.prod) {
            if (window[this.settings.extTrackerGlobalName]) {
                var nielsen = window[this.settings.extTrackerGlobalName];
                if (!this.staticTracker && this._canInitializeTracker("static")) {
                    this.staticTracker = nielsen.getInstance("static_instance");
                    this.staticTracker.ggInitialize(this.settings.staticConfig);
                }
                if (!this.videoTracker && this._canInitializeTracker("video")) {
                    this.videoTracker = nielsen.getInstance("video_instance");
                    this.videoTracker.ggInitialize(this.settings.videoConfig);
                }
            } else {
                return;
            }
        }

        if (this.page) {
            _this._active = true;
            sandbox.moduleActive.dispatch();
        }
    };

    // ======================================================= Dependencies data handling

    sandbox.onGeneralSettingsChange(function() {
        _this.generalSettings = sandbox.getGeneralSettings();
        if (sandbox.isApproved(_this.constructor.defaultId)) {
            _this.activate();
        }
    }, this);

    sandbox.onPageReady(function() {
        _this.page = sandbox.getPageInfo();
        _this.activate();
    }, this);

    sandbox.onPageChanged(function() {
        _this.page = sandbox.getPageInfo();
    }, this);

    // ======================================================= Utility methods

    this.getEventInfo = function(dataObj, eventType, eventName) {
        var eventInfo = sandbox.tryConvertToEventInfo(dataObj, eventType, eventName);

        if (!sandbox.canTrackEvent(sandbox.moduleId, this.settings.trackingBehavior, eventInfo)) {
            sandbox.log.warn("Event won't be tracked to Nielsen because of `Event type` and `Tracking behavior`." +
                " Type: " + eventInfo.t + "; Name: " + eventInfo.n +
                "; Location: " + eventInfo.l + "; Desc: " + eventInfo.d + ";");
            return null;
        }
        eventInfo.data.page = this.page;
        return eventInfo;
    };

    // ======================================================= Tracking handlers

    this._trackPage = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackPage, this, dataObj), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/page/view")) {
            sandbox.log.warn("Mapping for `track/page/view` doesn't exist");
            return;
        }
        var eventInfo = this.getEventInfo(dataObj, "page", "view");
        if (!eventInfo) return;

        var trackData = sandbox.mapper.map("track/page/view", eventInfo, {});
        if (this.generalSettings.mode === bfaDefs.bfaMode.prod)
            this.staticTracker.ggPM("staticstart", trackData);
        else
            sandbox.debugTracker.trackEvent(eventInfo, trackData);
    };
    sandbox.subOn("track/page/view", this._trackPage, this);


    this._trackVideoplayer = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackVideoplayer, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/videoplayer")) {
            sandbox.log.warn("Mapping for `track/videoplayer` doesn't exist");
            return;
        }
        var eventInfo = this.getEventInfo(dataObj, "video", routeVars.eventName);
        if (!eventInfo) return;
        var trackData = sandbox.mapper.map("track/videoplayer", eventInfo, {});

        /************************************************************************
         * When transcoder path is  used for video,  most of the information is *
         * undefined to avoid issues with neilsen we will not send those events *
         ************************************************************************/
        if (!trackData.assetid || trackData.assetid === "undefined") {
            return;
        }

        switch (routeVars.eventName) {
            case "video_view":
                loadVideoHandler(trackData);
                break;
            case "resume":
                playVideoHandler(trackData);
                break;
            case "pause":
                pauseVideoHandler(trackData);
                break;
            case "flush":
                stopVideoHandler(trackData);
                break;
            case "scrub":
                scrubVideoHandler(trackData);
                break;
        }
    };
    sandbox.subOn("track/videoplayer/{eventName}", this._trackVideoplayer, this);

    this._trackVideo = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackVideo, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/video")) {
            sandbox.log.warn("Mapping for `track/video` doesn't exist");
            return;
        }
        var eventInfo = this.getEventInfo(dataObj, "video", routeVars.eventName);
        if (!eventInfo) return;

        var trackData = sandbox.mapper.map("track/video", eventInfo, {});
        if (this.generalSettings.mode === bfaDefs.bfaMode.prod) {
            switch (routeVars.eventName) {
                case "load":
                    loadVideoHandler(trackData);
                    break;
                case "play":
                    playVideoHandler(trackData);
                    break;
                case "pause":
                    pauseVideoHandler(trackData);
                    break;
                case "finish":
                    stopVideoHandler(trackData);
                    break;
                case "scrub":
                    scrubVideoHandler(trackData);
                    break;
            }
        } else
            sandbox.debugTracker.trackEvent(eventInfo, trackData);
    };

    sandbox.subOn("track/video/{eventName}", this._trackVideo, this);

    // ======================================================= Video handlers

    function loadVideoHandler(data, playheadPosition) {
        // Send stop events when switch a video
        if (_this._playheadCounter) {
            stopVideoHandler({
                playheadPosition: _this._playheadCounter,
            });
        }

        data.playheadPosition = playheadPosition || 0;

        _this._playheadCounter = data.playheadPosition;
        _this._lastPlayed = data.assetid;
        _this._loadedData = true;
        _this._videoPlaying = false;

        _this.videoTracker.ggPM("loadMetadata", data);

        if (!_this._loadedVideos) {
            _this._loadedVideos = {};
        }

        if (!_this._loadedVideos[data.assetid]) {
            _this._loadedVideos[data.assetid] = data;
        }

        playVideoHandler(data);
    }

    function scrubVideoHandler(data) {
        // clear playhead interval counter on video scrub
        if (_this._playheadInterval) {
            clearInterval(_this._playheadInterval);
            _this._playheadInterval = null;
        }

        // set playhead to current video time
        _this._playheadCounter = data.playheadPosition;

        // reset playhead interval
        if (!_this._playheadInterval && _this._videoPlaying) {
            _this.videoTracker.ggPM("play", data.playheadPosition);
            setPlayheadPosition();
            _this._playheadInterval = setInterval(function() {
                setPlayheadPosition();
            }, 1000);
        }
    }

    function playVideoHandler(data) {
        // start play first video or play not current video
        if (_this._lastPlayed !== data.assetid) {
            //we should stop send setPlayheadPosition event
            if (_this._playheadInterval) {
                clearInterval(_this._playheadInterval);
                _this._playheadInterval = null;
            }

            // if video already played before
            if (_this._loadedVideos && _this._loadedVideos[data.assetid]) {
                loadVideoHandler(_this._loadedVideos[data.assetid], data.playheadPosition);
            }
            // return after loadVideoHandler or for videos which data was not loaded yet
            return;
        }

        //reload data from _this._loadedVideos for multi times track video end
        if (!_this._loadedData && _this._loadedVideos && _this._loadedVideos[data.assetid]) {
            loadVideoHandler(_this._loadedVideos[data.assetid]);
            return;
        }

        _this._playheadCounter = data.playheadPosition;

        if (!_this._playheadInterval) {
            _this.videoTracker.ggPM("play", data.playheadPosition);
            setPlayheadPosition();
            _this._videoPlaying = true;
            _this._playheadInterval = setInterval(function() {
                setPlayheadPosition();
            }, 1000);
        }
    }

    function pauseVideoHandler(data) {
        if (_this._playheadInterval) {
            _this._videoPlaying = false;
            clearInterval(_this._playheadInterval);
            _this._playheadInterval = null;
            _this._playheadCounter = data.playheadPosition;
            _this.videoTracker.ggPM("stop", _this._playheadCounter);
        }
    }

    // Finish video play
    function stopVideoHandler(data) {
        if (_this._playheadCounter) {
            _this._videoPlaying = false;
            clearInterval(_this._playheadInterval);
            _this._playheadCounter = data.playheadPosition;
            _this.videoTracker.ggPM("end", _this._playheadCounter);
            _this._playheadInterval = null;
            _this._playheadCounter = null;
            _this._loadedData = false;
        }
    }

    function setPlayheadPosition() {
        // _this._playheadCounter increases each seconds, but it can be changed in `play`, `pause` and  `stop` events
        // from mapper because player always sends real `playheadPosition` after any `Scrub` events which can change
        // current video position
        _this.videoTracker.ggPM("setPlayheadPosition", _this._playheadCounter);
        _this._playheadCounter++;
    }

    this.init = function() {
        _this.settings.configMapsDelegate(sandbox.mapper);
        if (_this.generalSettings.mode === bfaDefs.bfaMode.prod) {
            _this.staticTracker = _this.settings.staticTracker;
            _this.videoTracker = _this.settings.videoTracker;
            if (!_this.staticTracker && !_this.videoTracker && !window[_this.extTrackerGlobalName] &&
                _this.settings.extFilesPaths && _this.settings.extFilesPaths.length > 0) {
                sandbox.domi.onDomReady(function() {
                    _this.settings.extFilesPaths.forEach(function(scriptPath) {
                        sandbox.domi.loadScript({
                            src: scriptPath,
                        }, _this.activate, null, _this);
                    });
                }, _this);
            }
        } else {
            _this.staticTracker = {
                ggPM: () => {},
                ggInitialize: () => {},
            };
            _this.videoTracker = {
                ggPM: () => {},
                ggInitialize: () => {},
            };
        }
        _this._inited = true;
        sandbox.moduleInited.dispatch();
        _this.activate();
    };
}

NielsenIntegration.defaultId = "NielsenIntegration";

NielsenIntegration.require = ["logger", "domi", "pageInfo", "mapper", "trackingUtils", "generalSettings",
    "debugTracker",
];

export default NielsenIntegration;