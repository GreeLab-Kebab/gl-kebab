import BFAttributeParser from "./../bf_attribute_parser.js";
import BFAffiliateParser from "./../bf_affiliate_parser.js";

"use strict";

var urlPattern = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");

/**
 * Parses the string URL and splits it by parts.
 * @param {string} url String URL value.
 * @returns {*} Returns nothing.
 */
function parseUrl(url) {
    if (url === null || url === undefined || !(typeof url === "string" || url instanceof String)) {
        return null;
    }
    var matches = url.match(urlPattern);
    return {
        url: matches[0] ? matches[0] : "",
        scheme: matches[2] ? matches[2] : "",
        host: matches[4] ? matches[4] : "",
        path: matches[5] ? matches[5] : "",
        cleanedPath: matches[5] ? matches[5] : "",
        query: matches[7] ? matches[7] : "",
        fragment: matches[9] ? matches[9] : "",
    };
}

/**
 * Checks is parsed URL object represents internal URL for Buzzfeed.
 * @param {object} urlObj URL value.
 * @returns {boolean} Is URL internal for Buzzfeed.
 */
function checkIsUrlInternal(urlObj) {
    if (urlObj.scheme.length > 0 && urlObj.host.length > 0 &&
        urlObj.host.indexOf("buzzfeed.com") === -1 || urlObj.url.indexOf("javascript" + ":;") === 0) {
        return false;
    }
    return true;
}

/**
 * Checks is parsed URL object represents external URL for Buzzfeed.
 * @param {object} urlObj URL value.
 * @returns {boolean} Is URL external for Buzzfeed.
 */
function checkIsUrlExternal(urlObj) {
    if (!urlObj.host || !urlObj.scheme || urlObj.host.indexOf("buzzfeed.com") > -1 ||
        urlObj.scheme.indexOf("http") === -1) {
        return false;
    }
    return true;
}

/**
 * Gets valid internal URL as string.
 * @param {object} urlObj URL value.
 * @returns {string} Plain string internal URL.
 */
function getValidInternalUrlString(urlObj) {
    return urlObj.path + (urlObj.query ? "?" + urlObj.query : "");
}

/**
 * Gets valid external URL as string.
 * @param {object} urlObj URL value.
 * @returns {string} Plain string external URL.
 */
function getValidExternalUrlString(urlObj) {
    return urlObj.url;
}

/**
 * Gets valid URL as string.
 * @param {string} urlStr Not processed string representation of URL.
 * @returns {*} Returns nothing.
 */
function getValidUrlString(urlStr) {
    var urlObj = parseUrl(urlStr);
    if (urlObj === null) {
        return "";
    }
    if (checkIsUrlExternal(urlObj)) {
        return getValidExternalUrlString(urlObj);
    }
    if (checkIsUrlInternal(urlObj)) {
        return getValidInternalUrlString(urlObj);
    }
    return "";
}

/**
 * Checks the 'options' section of data-bfa attribute if this element should be tracked by BFA.
 * @param {object} options 'options' section of data-bfa attribute.
 * @returns {boolean} Is element should be tracked.
 */
function shouldBeTrackedOptionsCheck(options) {
    if (options &&
        options.ignore instanceof Array &&
        (options.ignore.indexOf("bfaBinder") !== -1 || options.ignore.indexOf("all") !== -1) &&
        (!(options.force instanceof Array) || options.force.indexOf("bfaBinder") === -1)) {
        return false;
    }
    return true;
}

/**
 * Fills addition parameters to tracking data for BFA if element has internal link.
 * @param {HTMLElement} element Element event was triggered at.
 * @param {string} executable Name of the tracking entry point function.
 * @returns {boolean} Is handler applied.
 */
function ATagWithInternalLinkHandler(element, executable) {
    if (element === null || element.nodeName !== "A" || element.hasAttribute("data-bfa")) {
        return false;
    }
    var href = element.getAttribute("href");
    var urlObj = parseUrl(href);
    if (urlObj === null || !checkIsUrlInternal(urlObj)) {
        return false;
    }
    // look for location first.
    var parser = new BFAttributeParser();
    var trackingInfo = ["track/click/Nav-Link", {
        t: "click",
        n: "Nav-Link",
        l: parser.findLocation(element),
        data: {
            url: getValidInternalUrlString(urlObj),
        },
    }, ];
    if (executable && window[executable] instanceof Function) {
        window[executable].apply(this, trackingInfo);
    }
    return true;
}

/**
 * Fills addition parameters to tracking data for BFA if element has external link.
 * @param {HTMLElement} element Element event was triggered at.
 * @param {string} executable Name of the tracking entry point function.
 * @returns {boolean} Is handler applied.
 */
function ATagWithExternalLinkHandler(element, executable) {
    if (element === null || element.nodeName !== "A" || element.hasAttribute("data-bfa")) {
        return false;
    }
    var href = element.getAttribute("href");
    var urlObj = parseUrl(href);
    if (!urlObj || !checkIsUrlExternal(urlObj)) {
        return false;
    }
    // look for location first.
    var parser = new BFAttributeParser();
    var dataObj = {
        t: "click",
        n: "Exit-Link",
        l: parser.findLocation(element),
        data: {
            url: getValidExternalUrlString(urlObj),
            anchorDesc: element.innerHTML,
        },
    };
    // add affiliate link data, note: relies on attribute marking links that have gone through link_editor converter
    if (element.hasAttribute("data-affiliate")) {
        var affParser = new BFAffiliateParser();
        dataObj.data = Object.assign(
            dataObj.data,
            affParser.parse(element, dataObj.data)
        );
    }
    var trackingInfo = ["track/click/Exit-Link", dataObj, ];
    if (executable && window[executable] instanceof Function) {
        window[executable].apply(this, trackingInfo);
    }
    return true;
}

/**
 * Default handler for 'select' HTML element that provides separate way of handling. Allow to modify tracking data
 * in necessary way.
 * @param {HTMLElement} element Element event was triggered at.
 * @param {string} executable Name of the tracking entry point function.
 * @returns {boolean} Is handler applied.
 */
function SelectTagChangedClickHandler(element, executable) {
    if (element === null || element.nodeName !== "SELECT") {
        return false;
    }
    var optionElement = element.options[element.selectedIndex];
    if (!optionElement) {
        return false;
    }
    if (!optionElement.hasAttribute("data-bfa")) {
        return false;
    }

    var parser = new BFAttributeParser();
    var parsed = parser.parse(optionElement);

    if (!shouldBeTrackedOptionsCheck(parsed.options)) {
        return false;
    }

    if (optionElement.hasAttribute("data-href")) {
        parsed.data.url = getValidUrlString(optionElement.getAttribute("data-href"));
    }

    var trackingInfo = ["track/click/" + parsed.action, {
        t: "click",
        n: parsed.action,
        l: parsed.location,
        d: parsed.description,
        data: parsed.data,
        opt: parsed.options,
    }, ];
    if (executable && window[executable] instanceof Function) {
        window[executable].apply(this, trackingInfo);
    }
    return true;
}

/**
 * Default handler for 'a' HTML element that provides separate way of handling. Allow to modify tracking data
 * in necessary way.
 * @param {HTMLElement} element Element event was triggered at.
 * @param {string} executable Name of the tracking entry point function.
 * @param {string} trackingMethod Name of the method that should be invoked by analytics on event triggering.
 * @returns {boolean} Is handler applied.
 */
function ATagDefaultHandler(element, executable, trackingMethod) {
    if (element === null || element.nodeName !== "A" || !element.hasAttribute("data-bfa")) {
        return false;
    }
    var parser = new BFAttributeParser();
    var parsed = parser.parse(element);

    if (!shouldBeTrackedOptionsCheck(parsed.options)) {
        return false;
    }

    parsed.data.url = getValidUrlString(element.getAttribute("href"));
    var trackingInfo = ["track/" + trackingMethod + "/" + parsed.action, {
        t: trackingMethod,
        n: parsed.action,
        l: parsed.location,
        d: parsed.description,
        data: parsed.data,
        opt: parsed.options,
    }, ];
    if (executable && window[executable] instanceof Function) {
        window[executable].apply(this, trackingInfo);
    }
    return true;
}

/**
 * Default handler for all HTML elements that provides a way of handling. Allow to modify tracking data
 * in necessary way.
 * @param {HTMLElement} element Element event was triggered at.
 * @param {string} executable Name of the tracking entry point function.
 * @param {string} trackingMethod Name of the method that should be invoked by analytics on event triggering.
 * @returns {boolean} Is handler applied.
 */
function DefaultHandler(element, executable, trackingMethod) {
    if (element === null || !element.hasAttribute("data-bfa")) {
        return false;
    }
    var parser = new BFAttributeParser();
    var parsed = parser.parse(element);

    if (!shouldBeTrackedOptionsCheck(parsed.options)) {
        return false;
    }
    var trackingInfo = ["track/" + trackingMethod + "/" + parsed.action, {
        t: trackingMethod,
        n: parsed.action,
        l: parsed.location,
        d: parsed.description,
        data: parsed.data,
        opt: parsed.options,
    }, ];
    if (executable && window[executable] instanceof Function) {
        window[executable].apply(this, trackingInfo);
    }
    return true;
}

export default {
    ATagWithInternalLinkHandler: ATagWithInternalLinkHandler,
    ATagWithExternalLinkHandler: ATagWithExternalLinkHandler,
    ATagDefaultHandler: ATagDefaultHandler,
    SelectTagChangedClickHandler: SelectTagChangedClickHandler,
    DefaultHandler: DefaultHandler,
};