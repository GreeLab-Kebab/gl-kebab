import BFDomEventhandlerDelegation from "./dom/bf_dom_eventhandler_delegation.js";
import BFDomEventhandlerDirect from "./dom/bf_dom_eventhandler_direct.js";
import BFPageExitHandler from "./general/bf_page_exit_binder.js";
import FacebookBinder from "./social/bf_facebook_event_binder.js";
import BFScrollBinder from "./scroll/bf_scroll_event_binder.js";
import BFOnscrollInviewBinder from "./scroll/bf_onscroll_inview_binder.js";
import YoutubeVideoBinder from "./embed_video/youtube_iframe_embed_video";
import VimeoVideoBinder from "./embed_video/vimeo_universal_embed_video";
import FacebookVideoBinder from "./embed_video/facebook_video";
import DataBinder from "./data_binder.js";

"use strict";


/**
 * Data-binder builder is responsible for construction and configuration of the binder.
 * @constructor
 */
function DataBinderBuilder() {}

/**
 * Data binder build config that initially filled by default parameters.
 * @type {object}
 */
DataBinderBuilder.prototype.buildConfig = {
    bfaFunctionName: null,
    domBinder: {
        delegatedMapping: null,
        directMapping: null,
    },
    generalBinder: {
        pageExitBinder: false,
    },
    inViewImpressionBinder: {
        enabled: false,
        locators: [],
    },
    scrollBinder: {
        pixelMode: {
            enabled: false,
        },
        elementMode: {
            enabled: false,
            element: "",
            expected: 0,
        },
        checkpoints: [],
        bottomBounds: [],
    },
    socialBinder: {
        facebookMapping: null,
    },
    videoBinder: {
        youtube: false,
        vimeo: false,
        facebook: false,
    },
};

/**
 * Apply the configuration (mapping) to the delegated event-binder module.
 * @param {object} mapping Delegated event-binder configuration.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useDomDelegatedBinder = function(mapping) {
    this.buildConfig.domBinder.delegatedMapping = mapping;
    return this;
};

/**
 * Apply the configuration (mapping) to the direct event-binder module.
 * @param {object} mapping Direct event-binder configuration.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useDomDirectBinder = function(mapping) {
    this.buildConfig.domBinder.directMapping = mapping;
    return this;
};

/**
 * Switch on the Page Exit event-binder module.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.usePageExitBinder = function() {
    this.buildConfig.generalBinder.pageExitBinder = true;
    return this;
};

/**
 * Switch on the elements impression tracking.
 * @param {String} locators Element locator tracking based on.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useInViewImpressionBinder = function(locators) {
    this.buildConfig.inViewImpressionBinder.enabled = true;
    this.buildConfig.inViewImpressionBinder.locators = locators;
    return this;
};

/**
 * Apply the configuration (mapping) to the scroll pixel handler module.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useScrollPixelModeBinder = function() {
    this.buildConfig.scrollBinder.pixelMode.enabled = true;
    return this;
};

/**
 * Apply the configuration to the scroll elements handler module.
 * @param {string} element Name of the element that should be used as a counter.
 * @param {number} expectedAmount Amount of elements 'element' expected at the current page.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useScrollElementsModeBinder = function(element, expectedAmount) {
    this.buildConfig.scrollBinder.elementMode.enabled = true;
    this.buildConfig.scrollBinder.elementMode.element = element;
    this.buildConfig.scrollBinder.elementMode.expected = expectedAmount;
    return this;
};

/**
 * Apply the configuration (mapping) to the social event-binder module.
 * @param {object} mapping Social event-binder configuration.
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.useSocialBinder = function(mapping) {
    this.buildConfig.socialBinder.mapping = mapping;
    return this;
};

/**
 * Sets the list of HTML elements that could be the bottom bound element. Used in the scroll binder.
 * @param {array} elements List of elements that should be detected as a bottom bound at the page.
 * Example: ['data-bfa="@l:Bottom-Share;"', '...', ...]
 * @returns {DataBinderBuilder} Returns builder itself.
 */
DataBinderBuilder.prototype.setBottomBoundElements = function(elements) {
    this.buildConfig.bottomBounds = elements;
    return this;
};

/**
 * Sets the list of checkpoints that should be tracked.
 * @param {array} checkpoints Array of number in range 0-100. Represents checkpoints that should be tracked.
 * Example: [25, 50, 75, 100]
 * @returns {*} Returns nothing.
 */
DataBinderBuilder.prototype.setPercentageCheckpoints = function(checkpoints) {
    this.scrollBinder.checkpoints = checkpoints;
};

/**
 * Sets the entry point for tracking functionality. Basically it should be main BFA function present in page context.
 * @param {string} name Name of the function.
 * @returns {*} Returns nothing.
 */
DataBinderBuilder.prototype.useBfaFunction = function(name) {
    this.bfaFunctionName = name;
};

/**
 * Switch on binding for embed video players from youtube, vimeo and facebook.
 * @returns {*} Returns nothing.
 */
DataBinderBuilder.prototype.useVideoBinder = function() {
    this.buildConfig.videoBinder.youtube = true;
    this.buildConfig.videoBinder.vimeo = true;
    this.buildConfig.videoBinder.facebook = true;
};

/**
 * Function that combine all the data-binder parts described in build config and starts the binder initialization.
 * @returns {*} Returns nothing.
 */
DataBinderBuilder.prototype.build = function() {
    if (!this.buildConfig.bfaFunctionName) {
        return null;
    }

    var binder = new DataBinder();
    if (this.buildConfig.domBinder.delegatedMapping) {
        var delegated = new BFDomEventhandlerDelegation(
            this.buildConfig.domBinder.delegatedMapping,
            this.buildConfig.bfaFunctionName);
        binder.domBinders.push(delegated);
    }
    if (this.buildConfig.domBinder.directMapping) {
        var direct = new BFDomEventhandlerDirect(
            this.buildConfig.domBinder.directMapping,
            this.buildConfig.bfaFunctionName);
        binder.domBinders.push(direct);
    }
    if (this.buildConfig.generalBinder.pageExitBinder) {
        var pageExit = new BFPageExitHandler(
            this.buildConfig.bfaFunctionName);
        binder.generalBinders.push(pageExit);
    }

    if (this.buildConfig.socialBinder.facebookMapping) {
        var facebook = new FacebookBinder(
            this.buildConfig.socialBinder.facebookMapping,
            this.buildConfig.bfaFunctionName);
        binder.socialBinders.push(facebook);
    }

    if (this.buildConfig.videoBinder.youtube) {
        var youtubeBinder = new YoutubeVideoBinder(this.buildConfig.bfaFunctionName);
        binder.videoBinders.push(youtubeBinder);
    }
    if (this.buildConfig.videoBinder.vimeo) {
        var vimeoBinder = new VimeoVideoBinder(this.buildConfig.bfaFunctionName);
        binder.videoBinders.push(vimeoBinder);
    }
    if (this.buildConfig.videoBinder.facebook) {
        var facebookBinder = new FacebookVideoBinder(this.buildConfig.bfaFunctionName);
        binder.videoBinders.push(facebookBinder);
    }

    if (this.buildConfig.scrollBinder.elementMode.enabled || this.buildConfig.scrollBinder.pixelMode.enabled) {
        var scroll = new BFScrollBinder(this.buildConfig.scrollBinder, this.buildConfig.bfaFunctionName);
        binder.scrollBinders.push(scroll);
    }
    if (this.buildConfig.inViewImpressionBinder.enabled) {
        var onscrollInviewBinder = new BFOnscrollInviewBinder({
                locators: this.buildConfig.inViewImpressionBinder.locators,
            },
            this.buildConfig.bfaFunctionName);
        binder.scrollBinders.push(onscrollInviewBinder);
    }

    binder.init();
    return binder;
};

/**
 * @type {DataBinderBuilder}
 */
export default DataBinderBuilder;