import BFAttributeParser from "./../bf_attribute_parser.js";

/**
 * The binder for facebook events.
 * @param {object} mapping Object that contains configuration mapping for social events.
 * @param {string} executable Name of the function that should receive result data for tracking.
 * @constructor
 */
function FacebookBinder(mapping, executable) {
    "use strict";

    this.mapping = mapping;
    this.executable = executable;
    this.parser = new BFAttributeParser();

    /**
     * Starts mapping processing after the Facebook api loaded.
     * @returns {*} Returns nothing.
     */
    this.init = function() {
        var _this = this;
        var counter = 0;

        var interval = setInterval(function() {
            if (counter >= 10) {
                clearInterval(interval);
            }
            // Waiting for external Facebook dependency
            if (window.FB) {
                clearInterval(interval);
                _this.processMappings();
            }
            counter++;
        }, 1000);
    };

    /**
     * Parse mappings and binds event-handlers to the listed events.
     * @returns {*} Returns nothing.
     */
    this.processMappings = function() {
        if (mapping !== undefined) {
            for (var i = 0; i < mapping.length; i++) {
                if (mapping[i] === "like") {
                    this.bindLikes();
                }

                if (mapping[i] === "unlike") {
                    this.bindDislikes();
                }

                if (mapping[i] === "comment") {
                    this.bindComments();
                }
            }
        }
    };

    /**
     * Registers "Like" events for tracking.
     * @returns {Void} Nothing.
     */
    this.bindLikes = function() {
        var _this = this;

        window.FB.Event.subscribe("edge.create", function(url, element) {
            if (element !== null && element.getAttribute) {
                var parsed = _this.parser.parse(element); // Closure binder inside the handler
                var trackingInfo = ["track/click/" + parsed.action, {
                    t: "click",
                    n: parsed.action,
                    d: parsed.description,
                    l: parsed.location,
                    data: parsed.data,
                    opt: parsed.options,
                }, ];
                // Closure executable function for tracking inside the FB handler
                if (_this.executable && window[_this.executable] instanceof Function) {
                    window[_this.executable].apply(this, trackingInfo);
                }
            }
        });
    };

    /**
     * Registers "Unlike" events for tracking.
     * @returns {Void} Nothing.
     */
    this.bindDislikes = function() {
        var _this = this;

        window.FB.Event.subscribe("edge.remove", function(url, element) {
            var parsed = _this.parser.parse(element); // Closure binder inside the handler
            var trackingInfo = ["track/click/" + parsed.action, {
                t: "click",
                n: parsed.action,
                d: parsed.description,
                l: parsed.location,
                data: parsed.data,
                opt: parsed.options,
            }, ];
            // Closure executable function for tracking inside the FB handler
            if (_this.executable && window[_this.executable] instanceof Function) {
                window[_this.executable].apply(this, trackingInfo);
            }
        });
    };

    /**
     * Registers "Comment" events for tracking
     * @returns {Void} Nothing.
     */
    this.bindComments = function() {
        var _this = this;

        window.FB.Event.subscribe("comment.create", function() {
            var trackingInfo = ["track/click/Submit",
                {
                    t: "click",
                    n: "Submit",
                    d: "Facebook",
                    l: "Contributions",
                },
            ];
            // Closure executable function for tracking inside the FB handler
            if (_this.executable && window[_this.executable] instanceof Function) {
                window[_this.executable].apply(this, trackingInfo);
            }
        });
    };
}

/**
 * @type {{FacebookBinder: FacebookBinder}}
 */
export default FacebookBinder;