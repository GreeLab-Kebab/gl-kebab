import Signal from "signals";
import {
    defaultsDeep,
    isPlainObject,
    merge,
    cloneDeep,
} from "lodash";
import {
    getUserId
} from "@buzzfeed/bf-utils/lib/userid";
/**
 * User Info plugin
 * @module  plugins/userInfo
 * @exports userInfo
 */

"use strict";

/**
 * @classdesc
 * Plugin which works with a `user` data and handles routes connected to it (update, set).
 * Supported routes:
 * "general/user/set" (user info object as dataObj),
 * "general/user/update" (user info object as dataObj),
 * "general/user/ready" (user info object as dataObj).
 * Extends Sandbox with:
 * getUserInfo method - returns copy of actual user info,
 * onUserChanged method - subscribes specified callback on user info changed event,
 * onUserReady method - subscribes specified callback on user info ready event.
 * @memberof module:plugins/userInfo
 * @param {BFACore} core - bfa core instance
 * @param {object} settings - settings that will be merged with default user info on init step
 * @returns {{modifySBInstance: modifySBInstance}} - object with modifySBInstance method
 * @constructor
 */
function UserInfoPlugin(core, settings) {
    settings = settings || {};
    this.defaultSettings = {
        readyOnFirstUpdate: true,
        isReady: false,
        userInfo: {
            isLoggedIn: false,
            referrer: document.referrer,
            userAgent: navigator.userAgent,
            inApp: false,
            clientId: null,
        },
    };
    var _this = this;
    this.userReady = new Signal();
    this.userChanged = new Signal();
    this.settings = defaultsDeep(settings, this.defaultSettings);
    core._router.sub("general/user/{action}", function(dataObj, {
        action
    }) {
        if (action !== "update") {
            core.log.warn("user info can only be updated");
            return;
        }
        if (!isPlainObject(dataObj)) {
            core.log.warn("user info must be a plain object");
            return;
        }
        this.settings.userInfo = merge(this.settings.userInfo, dataObj);
        var userInfo = this.settings.userInfo;
        var appReferrer = core.utils.getAppReferrer(userInfo.userAgent, userInfo.referrer);
        if (appReferrer) {
            userInfo.referrer = appReferrer;
            userInfo.inApp = true;
        }

        this.userChanged.dispatch();
        if (!this.settings.isReady && this.settings.readyOnFirstUpdate) {
            getUserId({
                    env: core._generalSettings.env
                })
                .then(id => {
                    this.settings.userInfo.clientId = id;
                    this.settings.isReady = true;
                    this.userReady.dispatch();
                });
        }
    }, this, {
        action: ["ready", "update", "set", ],
    });

    function _onUserReady(cb, context) {
        if (_this.settings.isReady === true) {
            cb.call(context);
        }
        _this.userReady.add(cb, context);
    };

    function _getUserInfo() {
        return cloneDeep(_this.settings.userInfo);
    };
    core._onUserReady = function(cb, context) {
        _onUserReady(cb, context);
    };
    core._getUserInfo = function() {
        return _getUserInfo();
    };
    return {
        modifySBInstance: function(sandboxInstance) {
            sandboxInstance.getUserInfo = function() {
                return _getUserInfo();
            };
            sandboxInstance.onUserReady = function(cb, context) {
                _onUserReady(cb, context);
            };
            sandboxInstance.onUserChanged = function(cb, context, once) {
                _this.userChanged[once ? "addOnce" : "add"](cb, context);
            };
        },
    };
}
UserInfoPlugin.defaultId = "userInfo";
export default UserInfoPlugin;