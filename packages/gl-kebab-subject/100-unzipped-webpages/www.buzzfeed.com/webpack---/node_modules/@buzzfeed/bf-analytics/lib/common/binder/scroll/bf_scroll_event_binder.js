import {
    throttle
} from "lodash";
import PixelsScrollBinder from "./bf_pixels_scroll_event_binder.js";
import ElementsScrollBinder from "./bf_elements_scroll_event_binder.js";

"use strict";

/**
 * Implements general scroll binder. Uses two implementations (two modes) of scroll handlers under the hood.
 * Possible modes are pixel mode and elements mode.
 * @param {object} options Object with all the configuration parameters such as mode, bounds, etc.
 * @param {string} executable Function that should be invoked with position calculation results
 * if scroll event triggered. Results of calculation represented by BFEventInfo class.
 * @constructor
 */
function BFScrollBinder(options, executable) {
    this.options = options || {};
    this.executable = executable;
    this.scrollHandler = null;
    this.keyPressHandler = null;

    /**
     * Initialize mouse and key scroll handlers. Adds handlers to event listeners.
     * @returns {*} Returns nothing.
     */
    this.init = function() {
        if (!window || !options || !executable) {
            return;
        }

        this.scrollHandler = this.getScrollHandler();
        this.keyPressHandler = this.getKeyPressScrollHandler();

        if (this.scrollHandler) {
            window.addEventListener("scroll", throttle(this.scrollHandler, 200));
        }
        if (this.keyPressHandler) {
            document.addEventListener("keydown", throttle(this.keyPressHandler, 200));
        }
    };

    /**
     * Scroll handler function that used in event listeners. This functions decides which strategy of
     * percentage calculation to use if both modes are enabled. This function also initialize all the
     * handlers enabled by configuration.
     * @returns {Function} Returns scroll handler.
     */
    this.getScrollHandler = function() {
        var pixelModeBinder = null;
        var elementModeBinder = null;

        if (this.options.pixelMode.enabled) {
            pixelModeBinder = new PixelsScrollBinder(this.options, this.executable);
            pixelModeBinder.init();
        }
        if (this.options.elementMode.enabled) {
            elementModeBinder = new ElementsScrollBinder(this.options, this.executable);
            elementModeBinder.init();
        }

        return function() {
            if (options.elementMode.enabled) {
                var elemtnsOnPage = document.querySelectorAll(options.elementMode.element);
                if (elemtnsOnPage.length !== options.elementMode.expected) {
                    elementModeBinder.track();
                } else {
                    if (options.pixelMode.enabled) {
                        pixelModeBinder.track();
                    }
                }
            } else
            if (options.pixelMode.enabled) {
                pixelModeBinder.track();
            }
        };
    };

    /**
     * Creates 'keydown' event handler that represented as a wrapper above the scroll handler creted
     * by 'getScrollHandler' function. Wrapper filters pressed keys by conditions that use key's codes.
     * @returns {Function} Returns key press handler.
     */
    this.getKeyPressScrollHandler = function() {
        var _this = this;
        return function(e) {
            if (e.which === 32 //spacebar
                ||
                e.which === 33 //page up
                ||
                e.which === 34 //page down
                ||
                e.which === 38 //up
                ||
                e.which === 40 //down
                ||
                e.ctrlKey && e.which === 35 //ctrl + home
                ||
                e.ctrlKey && e.which === 36 && _this.scrollHandler) { //ctrl + end
                _this.scrollHandler();
            } else {
                return null;
            }
        };
    };
}

/**
 * @type {BFScrollBinder}
 */
export default BFScrollBinder;