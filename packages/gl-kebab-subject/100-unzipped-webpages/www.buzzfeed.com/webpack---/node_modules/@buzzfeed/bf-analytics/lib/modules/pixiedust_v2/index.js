/* eslint-disable camelcase */
import {
    defaultsDeep,
} from "lodash";
import bfaDefs from "../../common/bfa_defs";
import Pixiedust from "@buzzfeed/pixiedust-frontend";
import {
    BeaconDispatch,
    PixelDispatch
} from "@buzzfeed/pixiedust-frontend/lib/dispatch";
import utils from "../../common/bfa_utils";
import ROUTES from "./routes";

const defaultSettings = {
    sessionId: Date.now().toString(32) + ((Math.random() * 100000000) | 0).toString(32),
    e2e: utils.queryStringToObject(document.location.search).e2e_test
};

class PixiedustV2Integration {

    constructor(sandbox) {
        this.sandbox = sandbox;
        this.pixiedust = new Pixiedust({
            dispatch: navigator.sendBeacon ? new BeaconDispatch() : new PixelDispatch()
        });
        this.generalSettings = sandbox.getGeneralSettings();
        this.settings = defaultsDeep(sandbox.settings || {}, defaultSettings);
        this.configureSandbox();

        // Init needs to be a top level property to satisfy BFA registration
        this.init = () => {
            this.settings.mapping(this.sandbox.mapper);
            this.inited = true;
            this.sandbox.moduleInited.dispatch();
            this.activate();
        }
    }

    activate() {
        if (this.active || !this.inited || !this.user || !this.user.clientId) {
            return;
        }
        this.pixiedust.setSessionVars({
            session_id: this.settings.sessionId,
            client_id: this.user.clientId
        });
        this.pixiedust.start({
            env: this.generalSettings.env,
            sampling_rate: 1,
            required_fields: [], // TODO: figure out which fields we want to verify on each event, if any
        });
        this.active = true;
        this.sandbox.moduleActive.dispatch();
    }

    track(params) {
        if (!this.active) {
            this.sandbox.moduleActive.addOnce(this.track.bind(this, params), this);
            return;
        }

        const {
            dataObj,
            eventType,
            route,
            routeVars: {
                eventName
            },
            flush = false
        } = params;
        /**
         * This property allows individual events to supply their own mapping functions.
         * Such function should accept a single parameter (eventInfo), which is the same parameter
         * passed to BFA mapper's `mapFrom()` callback.
         * It should return a structure, which will be sent to the pixiedust API as JSON.
         */
        const {
            mappingOverride
        } = dataObj;

        let eventInfo = this.sandbox.tryConvertToEventInfo(dataObj, eventType, eventName);
        if (!eventInfo) {
            return;
        }

        eventInfo.data.page = this.page;
        eventInfo.data.user = this.user;
        let trackingData = mappingOverride ? mappingOverride(eventInfo) : this.sandbox.mapper.map(route, eventInfo, {});

        if (!Object.keys(trackingData).length) {
            return;
        }
        if (this.settings.e2e) {
            trackingData.e2e_test = this.settings.e2e;
        }
        this.pixiedust.push(trackingData);
        if (flush) {
            this.pixiedust.flush();
        }
        if (this.generalSettings.mode !== bfaDefs.bfaMode.prod) {
            this.sandbox.debugTracker.trackEvent(eventInfo, trackingData);
        }
    }

    configureSandbox() {
        this.sandbox.subOn(ROUTES.pageview, dataObj => {
            this.track({
                route: ROUTES.pageview,
                eventType: "page",
                dataObj,
                routeVars: {
                    eventName: "view"
                }
            });
        }, this);

        this.sandbox.subOn(`${ROUTES.click}/{eventName}`, (dataObj, routeVars) => {
            this.track({
                route: ROUTES.click,
                eventType: "click",
                flush: true,
                dataObj,
                routeVars
            });
        }, this);

        this.sandbox.subOn(`${ROUTES.rightClick}/{eventName}`, (dataObj, routeVars) => {
            this.track({
                route: ROUTES.rightClick,
                eventType: "right-click",
                flush: true,
                dataObj,
                routeVars
            });
        });

        this.sandbox.subOn(ROUTES.impression, (dataObj, routeVars) => {
            this.track({
                route: ROUTES.impression,
                eventType: "impression",
                dataObj,
                routeVars
            });
        }, this);

        this.sandbox.subOn(ROUTES.scroll, dataObj => {
            this.track({
                route: ROUTES.scroll,
                eventType: "scroll",
                flush: true,
                dataObj,
                routeVars: {
                    eventName: "depth"
                }
            });
        });

        this.sandbox.subOn("track/raw/pixiedust", (dataObj) => {
            this.track({
                route: "track/raw/pixiedust",
                eventType: "raw",
                routeVars: {
                    eventName: "pixiedust"
                },
                dataObj
            });
        }, this);

        this.sandbox.onPageReady(() => {
            this.page = this.sandbox.getPageInfo();
            this.activate();
        });

        this.sandbox.onUserReady(() => {
            this.user = this.sandbox.getUserInfo();
            this.activate();
        });

        this.sandbox.onUserChanged(() => {
            this.user = this.sandbox.getUserInfo();
        });

        this.sandbox.onPageChanged(() => {
            this.page = this.sandbox.getPageInfo();
        });
    }
}

PixiedustV2Integration.defaultId = "PixiedustV2Integration";
PixiedustV2Integration.require = ["logger", "pageInfo", "userInfo", "debugTracker", "mapper", "trackingUtils", "generalSettings", ]; // eslint-disable-line max-len

export default PixiedustV2Integration;