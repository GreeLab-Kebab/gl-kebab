import {
    bind,
    forOwn,
    fromPairs,
} from "lodash";

export default {
    forOwn: function(object, iteratee, thisArg) {
        // Compatibility issue
        forOwn.apply(this, [object, bind(iteratee, thisArg), ]);
    },

    queryStringToObject: function(query) {
        if (!query) {
            return {};
        }

        if (query.indexOf("?") !== -1) {
            query = query.split("?")[1];
        }

        return fromPairs(query.split("&").map(function(val) {
            return val.split("=").map(decodeURIComponent);
        }));
    },

    readCookie: function(name) {
        var cookies = document.cookie.split(";");
        var result = [];
        var matchResult;

        for (var i = 0; i < cookies.length; i++) {
            cookies[i] = cookies[i].trim();
            if (typeof(name) === "object" && name.exec) {
                var regex = new RegExp(name);
                if (regex.test(cookies[i])) {
                    var extractor1 = /(.*)=(.*)$/g;
                    matchResult = extractor1.exec(cookies[i]);
                    matchResult && result.push({
                        name: matchResult[1],
                        value: matchResult[2],
                    });
                }
            }
            if (typeof(name) === "string") {
                var extractor2 = RegExp("^\\s*" + name + "=\\s*(.*?)\\s*$");
                matchResult = cookies[i].match(extractor2);
                matchResult && result.push({
                    name: name,
                    value: matchResult[1],
                });
            }
        }
        return result;
    },

    setCookie: function(cookieName, cookieValue, expiresDays) {
        let d = new Date();
        d.setTime(d.getTime() + (expiresDays * 1000 * 60 * 60 * 24));
        let cookieVal = `${cookieName}=${encodeURIComponent(cookieValue)};expires=${d.toUTCString()};path=/`;
        document.cookie = cookieVal;
    },

    checkType: function(type, val, name, notempty) {
        if (typeof val !== type) {
            return "" + name + " has to be a " + type;
        }
        if (notempty === true && isEmpty(val)) {
            return "" + name + " has to be not empty";
        }
    },

    getAppReferrer: function(userAgent, referrer) {
        var inApp = userAgent && userAgent.match(/fban(\/messenger)?|twitter|pinterest/i);

        if (inApp) {
            switch (inApp[0].toLowerCase()) {
                case "fban/messenger":
                    return "http://msgr.facebook.com";
                case "fban":
                    if (referrer && referrer.indexOf("m.facebook") === -1) {
                        return "http://app.facebook.com";
                    }
                    break;
                default:
                    return "http://app." + inApp[0].toLowerCase() + ".com";
            }
        }

        return "";
    },

    onDocumentVisible: function(trackAgain) {
        document.addEventListener("visibilitychange", function visibilityState() {
            if (document.visibilityState === "visible") {
                trackAgain();
                document.removeEventListener("visibilitychange", visibilityState);
            }
        });
    },

    rejectOnTimeout: function(timeout) {
        return new Promise((_, reject) => {
            setTimeout(() => reject({
                type: "timeout",
                msg: `${timeout}ms timeout exceeded`,
            }), timeout);
        });
    },
}