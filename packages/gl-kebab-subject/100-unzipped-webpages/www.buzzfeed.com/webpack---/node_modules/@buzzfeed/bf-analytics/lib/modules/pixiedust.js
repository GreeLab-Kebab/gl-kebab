import {
    bind,
    defaultsDeep,
    get,
} from "lodash";

import Pixiedust from "@buzzfeed/pixiedust-frontend";
import bfaDefs from "../common/bfa_defs";
import utils from "../common/bfa_utils";

function PixiedustIntegration(sandbox) {
    "use strict";

    var qsValues = utils.queryStringToObject(document.location.search);

    var defaultSettings = {
        sessionId: Date.now().toString(32) + ((Math.random() * 100000000) | 0).toString(32),
        /**
         * This option will add `e2e_test=${e2e_id}` property to all outgoing events.
         * @see https://github.com/buzzfeed/mono/tree/master/qr_pixiedust_smoke_tests
         * **/
        e2e: qsValues.e2e_test,
        impressionsSamplingRate: 1,
        scrollDepthSamplingRate: 1,
        instrumentationSamplingRate: 1,
        performanceSamplingRate: 1,
    };

    this._inited = false;
    this._active = false;
    this.generalSettings = sandbox.getGeneralSettings();
    this.settings = defaultsDeep(sandbox.settings || {}, defaultSettings);
    var _this = this;

    this.activate = function() {
        if (_this._active || !_this._inited) {
            return;
        }

        if (this.page && this.user && this.user.clientId) {
            _this.pixiedust = new Pixiedust();
            /* eslint-disable camelcase */
            _this.pixiedust.setSessionVars({
                session_id: _this.settings.sessionId,
                client_id: _this.user.clientId,
                source: _this.settings.source || "buzz_web",
            });

            _this.pixiedust.start({
                env: _this.generalSettings.env,
                sampling_rate: _this.settings.samplingRate || 0,
            });
            /* eslint-enable camelcase */

            _this._active = true;
            sandbox.moduleActive.dispatch();
        }
    };

    sandbox.onGeneralSettingsChange(function() {
        _this.generalSettings = sandbox.getGeneralSettings();
    }, this);

    sandbox.onPageReady(function() {
        _this.page = sandbox.getPageInfo();
        _this.activate();
    }, this);

    sandbox.onPageChanged(function() {
        _this.page = sandbox.getPageInfo();
    }, this);

    sandbox.onUserReady(function() {
        _this.user = sandbox.getUserInfo();
        _this.activate();
    }, this);

    sandbox.onUserChanged(function() {
        _this.user = sandbox.getUserInfo();
    }, this);

    // ======================================================= Tracking methods

    this.getEventInfo = function(dataObj, eventType, eventName) {
        var eventInfo = sandbox.tryConvertToEventInfo(dataObj, eventType, eventName);
        if (!sandbox.canTrackEvent(sandbox.moduleId, this.settings.trackingBehavior, eventInfo)) {
            sandbox.log.warn(sandbox.moduleId + " cannot track current event. Type: " +
                eventType + "; Name: " + eventName + ";");
            return null;
        }

        eventInfo.data.page = this.page;
        eventInfo.data.user = this.user;
        eventInfo.data.seedSocialFlags = {};
        return eventInfo;
    };

    this._shouldTrack = (rate) => {
        if (this.generalSettings.env === "dev" || this.generalSettings.debug) {
            return true;
        }

        return this.user.clientId && this.user.clientId % 100 < rate * 100;
    };

    this._shouldSample = (sampleRate) => {
        if (this.generalSettings.env === "dev" || this.generalSettings.debug) {
            return true;
        }

        return Math.random() < sampleRate;
    };

    this._isDocumentVisible = () => !document.visibilityState || document.visibilityState === "visible";

    this._trackPage = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackPage, this, dataObj), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/page/view")) {
            sandbox.log.warn("Mapping for `pixiedust: track/page/view` doesn't exist");
            return;
        }

        if (!this._isDocumentVisible()) {
            utils.onDocumentVisible(bind(this._trackPage, this, dataObj));
            return;
        }

        var eventInfo = _this.getEventInfo(dataObj, "page", "view");
        this._trackDefault(eventInfo, "track/page/view");
    };
    sandbox.subOn("track/page/view", this._trackPage, this);

    this._trackPageExit = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackPageExit, this, dataObj), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/page/exit")) {
            sandbox.log.warn("Mapping for `pixiedust: track/page/exit` doesn't exist");
            return;
        }

        var eventInfo = _this.getEventInfo(dataObj, "page", "exit");
        this._trackDefault(eventInfo, "track/page/exit", true);
    };
    sandbox.subOn("track/page/exit", this._trackPageExit, this);

    this._trackClick = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackClick, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/click")) {
            sandbox.log.warn("Mapping for `track/click` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "click", routeVars.eventName);
        this._trackDefault(eventInfo, "track/click", true);
    };
    sandbox.subOn("track/click/{eventName}", this._trackClick, this);

    this._trackVideo = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackVideo, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/video")) {
            sandbox.log.warn("Mapping for `track/video` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "video", routeVars.eventName);
        this._trackDefault(eventInfo, "track/video");
    };
    sandbox.subOn("track/video/{eventName}", this._trackVideo, this);

    this._trackVideoPlayer = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackVideoPlayer, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/videoplayer")) {
            sandbox.log.warn("Mapping for `track/videoplayer` doesn't exist");
            return;
        }
        var eventInfo = this.getEventInfo(dataObj, "videoplayer", routeVars.eventName);
        // use "flush" event name as a shortcut to pixiedust.flush()
        if (eventInfo && eventInfo.n === "flush") {
            return this.pixiedust.flush();
        }
        this._trackDefault(eventInfo, "track/videoplayer");
    };
    sandbox.subOn("track/videoplayer/{eventName}", this._trackVideoPlayer, this);

    this._trackImpression = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackImpression, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/scroll/impression")) {
            sandbox.log.warn("Mapping for `track/scroll/impression` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "impression", routeVars.eventName);
        if (!this._shouldTrack(get(eventInfo, "opt.samplingRate", 0) || this.settings.impressionsSamplingRate)) {
            sandbox.log.warn("`track/scroll/impression` will not be tracked: events from current user are not being sampled");
            return;
        }
        this._trackDefault(eventInfo, "track/scroll/impression");
    };
    sandbox.subOn("track/scroll/impression", this._trackImpression, this);

    this._trackScrollPost = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackScrollPost, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/scroll/post")) {
            sandbox.log.warn("Mapping for `track/scroll/post` doesn't exist");
            return;
        }
        if (!this._shouldTrack(this.settings.scrollDepthSamplingRate)) {
            sandbox.log.warn("`track/scroll/post` will not be tracked: events from current user are not being sampled");
            return;
        }
        var eventInfo = this.getEventInfo(dataObj, "post", routeVars.eventName);
        this._trackDefault(eventInfo, "track/scroll/post");
    };
    sandbox.subOn("track/scroll/post", this._trackScrollPost, this);

    this._trackPerformance = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackPerformance, this, dataObj), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/website/performance")) {
            sandbox.log.warn("Mapping for `pixiedust: track/website/performance` doesn't exist");
            return;
        }

        if (!this._shouldSample(this.settings.performanceSamplingRate)) {
            sandbox.log.warn("`track/website/custom_timers` event will not be tracked, because it was not sampled.");
            return;
        }

        var eventInfo = _this.getEventInfo(dataObj, "website", "performance");
        this._trackDefault(eventInfo, "track/website/performance", true);
    };
    sandbox.subOn("track/website/performance", this._trackPerformance, this);

    this._trackCustomPerformance = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackCustomPerformance, this, dataObj), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/website/custom_timers")) {
            sandbox.log.warn("Mapping for `pixiedust: track/website/custom_timers` doesn't exist");
            return;
        }

        if (!this._shouldSample(this.settings.performanceSamplingRate)) {
            sandbox.log.warn("`track/website/custom_timers` event will not be tracked, because it was not sampled.");
            return;
        }

        var eventInfo = _this.getEventInfo(dataObj, "website", "custom_timers");
        this._trackDefault(eventInfo, "track/website/custom_timers", true);
    };
    sandbox.subOn("track/website/custom_timers", this._trackCustomPerformance, this);

    this._trackAbVariation = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackAbVariation, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/abtest")) {
            sandbox.log.warn("Mapping for `track/abtest` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "abtest", routeVars.abTestName);
        this._trackDefault(eventInfo, "track/abtest");
    };
    sandbox.subOn("track/abtest/{abTestName}", this._trackAbVariation, this);

    this._trackAbeagleRequest = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackAbeagleRequest, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/abeagle/request")) {
            sandbox.log.warn("Mapping for `track/abeagle/request` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "abeagle", "request");
        this._trackDefault(eventInfo, "track/abeagle/request");
    };
    sandbox.subOn("track/abeagle/request", this._trackAbeagleRequest, this);

    this._trackQuiz = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackQuiz, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/quiz")) {
            sandbox.log.warn("Mapping for `track/quiz` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "quiz", routeVars.eventName);
        this._trackDefault(eventInfo, "track/quiz");
    };
    sandbox.subOn("track/quiz/{eventName}", this._trackQuiz, this);

    this._trackBfp = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackBfp, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/bfp")) {
            sandbox.log.warn("Mapping for `track/bfp` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "bfp", routeVars.eventName);
        this._trackDefault(eventInfo, "track/bfp");
    };
    sandbox.subOn("track/bfp/{eventName}", this._trackBfp, this);

    this._trackInstrumentation = dataObj => {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackInstrumentation, this, dataObj), this);
            return;
        }

        if (!sandbox.mapper.isExists("track/website/instrumentation")) {
            sandbox.log.warn("Mapping for `track/website/instrumentation` doesn't exist");
            return;
        }

        var samplingRate = get(dataObj, "opts.samplingRate", this.settings.instrumentationSamplingRate);

        if (!this._shouldSample(samplingRate)) {
            sandbox.log.warn("`track/website/instrumentation` event will not be tracked, because it was not sampled.");
            return;
        }

        var eventInfo = _this.getEventInfo(dataObj, "website", "instrumentation");
        this._trackDefault(eventInfo, "track/website/instrumentation");
    };
    sandbox.subOn("track/website/instrumentation", this._trackInstrumentation, this);

    // General tracking method
    this._trackDefault = function(eventInfo, route, forceFlush) {
        if (!eventInfo) return;

        eventInfo.data.env = this.generalSettings.mode === bfaDefs.bfaMode.prod ? "prod" : "dev";
        eventInfo.data.debug = this.generalSettings.debug;
        var trackingData = sandbox.mapper.map(route, eventInfo, {});

        /*
         Here we check if result contains data to track. If "trackingData" object is
         empty after passing through mapper then event should not be tracked.
         */
        if (Object.keys(trackingData).length > 0) {
            if (this.settings.e2e) {
                /* eslint-disable camelcase */
                trackingData.e2e_test = this.settings.e2e;
                /* eslint-enable camelcase */
            }
            this.pixiedust.push(trackingData);
            if (forceFlush) {
                this.pixiedust.flush();
            }
            if (this.generalSettings.mode !== bfaDefs.bfaMode.prod) {
                eventInfo.printType = true;
                eventInfo.prettyPrintData = true;
                sandbox.debugTracker.trackEvent(eventInfo, trackingData);
            }
        }
    };

    this.init = function() {
        _this.settings.configMapsDelegate(sandbox.mapper);

        _this._inited = true;
        sandbox.moduleInited.dispatch();

        _this.activate();
    };
}

PixiedustIntegration.defaultId = "PixiedustIntegration";
PixiedustIntegration.require = ["logger", "pageInfo", "userInfo", "debugTracker",
    "mapper", "trackingUtils", "generalSettings",
];
export default PixiedustIntegration;