import bfaDefs from "../common/bfa_defs";
import {
    keys,
    bind,
    defaultsDeep,
    includes,
    get,
} from "lodash";

"use strict";

function FacebookIntegration(sandbox) {
    var defaultSettings = {
        trackingBehavior: bfaDefs.trackingBehavior.byDefault,
        extTrackerGlobalName: "fbq",
        tracker: null,
        configMapsDelegate: null,
        extFilesPaths: [],
        facebookId: "260954170738952",
        affiliateTrackingFeatureFlag: Promise.resolve(true),
    };
    this._inited = false;
    this._active = false;
    this.settings = defaultsDeep(sandbox.settings || {}, defaultSettings);
    this.generalSettings = sandbox.getGeneralSettings();
    var _this = this;
    //@see https://developers.facebook.com/docs/ads-for-websites/pixel-events/v2.9#events
    const standardEvents = ["ViewContent", "Search", "Lead",
        "AddToCart", "AddToWishlist", "InitiateCheckout",
        "AddPaymentInfo", "Purchase", "CompleteRegistration",
    ];

    this.activate = function() {
        if (_this._active || !_this._inited) {
            return;
        }

        if (!this.tracker && this.generalSettings.mode === bfaDefs.bfaMode.prod) {
            if (window[this.settings.extTrackerGlobalName]) {
                this.tracker = window[this.settings.extTrackerGlobalName];
                this.tracker("init", this.settings.facebookId); // It's very important to init FB tracker
            } else {
                return;
            }
        }

        if (this.page && _this.user) {
            this._active = true;
            sandbox.moduleActive.dispatch();
        }
    };

    sandbox.onGeneralSettingsChange(function() {
        _this.generalSettings = sandbox.getGeneralSettings();
    }, this);

    sandbox.onPageReady(function() {
        _this.page = sandbox.getPageInfo();
        _this.activate();
    }, this);

    sandbox.onPageChanged(function() {
        _this.page = sandbox.getPageInfo();
    }, this);

    sandbox.onUserReady(function() {
        _this.user = sandbox.getUserInfo();
        _this.activate();
    }, this);

    sandbox.onUserChanged(function() {
        _this.user = sandbox.getUserInfo();
    }, this);

    this.getEventInfo = function(dataObj, eventType, eventName) {
        var eventInfo = sandbox.tryConvertToEventInfo(dataObj, eventType, eventName);
        if (!sandbox.canTrackEvent(sandbox.moduleId, this.settings.trackingBehavior, eventInfo)) {
            sandbox.log.warn(sandbox.moduleId + " cannot track current event. Type: " +
                eventType + "; Name: " + eventName + ";");
            return null;
        }
        eventInfo.data.page = this.page;
        eventInfo.data.user = this.user;
        return eventInfo;
    };

    this._trackDefault = function(eventInfo, dataObj) {
        if (!eventInfo) return;
        if (dataObj !== null && keys(dataObj).length > 0) {
            var fbEventName = "";
            if ("fbEventName" in dataObj) {
                fbEventName = dataObj.fbEventName;
                delete dataObj.fbEventName;
            }

            switch (this.generalSettings.mode) {
                case bfaDefs.bfaMode.prod:
                    includes(standardEvents, fbEventName) ?
                        this.tracker("track", fbEventName, dataObj) :
                        this.tracker("trackCustom", fbEventName, dataObj);
                    break;
                default:
                    sandbox.debugTracker.trackEvent(eventInfo, dataObj);
                    break;
            }
        }
    };

    // =========================================================== Page View

    this._trackPage = function(dataObj) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(
                this._trackPage, this, dataObj), this);
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "page", "view");
        if (!sandbox.mapper.isExists("track/page/view")) {
            sandbox.log.warn("Mapping for `track/page/view` doesn't exist");
            return;
        }
        var trackingData = sandbox.mapper.map("track/page/view", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
    };
    sandbox.subOn("track/page/view", this._trackPage, this);

    // =========================================================== Click

    this._trackClick = async function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(
                this._trackClick, this, dataObj, routeVars), this);
            return;
        }
        var leadInfo;
        var leadData;
        var eventInfo = this.getEventInfo(dataObj, "click", routeVars.eventName);
        if (!eventInfo) {
            return;
        }
        if (!sandbox.mapper.isExists("track/click")) {
            sandbox.log.warn("Mapping for `track/click` doesn't exist");
            return;
        }
        const isEnabled = eventInfo.n !== "Exit-Link" || await this.settings.affiliateTrackingFeatureFlag;
        if (!isEnabled) {
            return;
        }
        var trackingData = sandbox.mapper.map("track/click", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
        // for ad posts additional Lead event should be fired for each share click #SITE-4045
        if (get(this.page, "post.flags.ad", false) && eventInfo.n === "Share") {
            leadInfo = defaultsDeep({
                n: "Lead",
            }, eventInfo);
            leadData = sandbox.mapper.map("track/click", leadInfo, {});
            this._trackDefault(leadInfo, leadData);
        }
    };
    sandbox.subOn("track/click/{eventName}", this._trackClick, this);

    // =========================================================== Quiz

    this._trackQuiz = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(
                this._trackQuiz, this, dataObj, routeVars), this);
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "quiz", routeVars.eventName);
        if (!sandbox.mapper.isExists("track/quiz")) {
            sandbox.log.warn("Mapping for `track/quiz` doesn't exist");
            return;
        }
        var trackingData = sandbox.mapper.map("track/quiz", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
    };
    sandbox.subOn("track/quiz/{eventName}", this._trackQuiz, this);

    this._trackVideo = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(
                this._trackVideo, this, dataObj, routeVars), this);
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "video", routeVars.eventName);
        if (!sandbox.mapper.isExists("track/video")) {
            sandbox.log.warn("Mapping for `track/video` doesn't exist");
            return;
        }
        var trackingData = sandbox.mapper.map("track/video", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
    };
    sandbox.subOn("track/video/{eventName}", this._trackVideo, this);

    this._trackAbVariation = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(
                this._trackAbVariation, this, dataObj, routeVars), this);
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "abtest", routeVars.eventName);
        if (!sandbox.mapper.isExists("track/abtest")) {
            sandbox.log.warn("Mapping for `track/abtest` doesn't exist");
            return;
        }
        var trackingData = sandbox.mapper.map("track/abtest", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
    };
    sandbox.subOn("track/abtest/{abTestName}", this._trackAbVariation, this);

    this._trackImpression = function(dataObj, routeVars) {
        if (!this._active) {
            sandbox.moduleActive.addOnce(bind(this._trackImpression, this, dataObj, routeVars), this);
            return;
        }
        if (!sandbox.mapper.isExists("track/scroll/impression")) {
            sandbox.log.warn("Mapping for `track/scroll/impression` doesn't exist");
            return;
        }

        var eventInfo = this.getEventInfo(dataObj, "impression", routeVars.eventName);
        var trackingData = sandbox.mapper.map("track/scroll/impression", eventInfo, {});
        this._trackDefault(eventInfo, trackingData);
    };
    sandbox.subOn("track/scroll/impression", this._trackImpression, this);

    /**
     * Declaration of Facebook global object
     * @returns {void}
     * @private
     */
    this._declare = function() {
        var f = window;
        var n;
        if (f.fbq) {
            return;
        }
        n = f.fbq = function() {
            n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments);
        };
        if (!f._fbq) {
            f._fbq = n;
        }
        n.push = n;
        n.loaded = !0;
        n.version = "2.0";
        n.queue = [];
    };

    this.init = function() {
        // Pushing mapper instance to the mappings config
        _this.settings.configMapsDelegate(sandbox.mapper);

        if (_this.generalSettings.mode === bfaDefs.bfaMode.prod) {
            _this.tracker = _this.settings.tracker;
            // Loading external js files if needed
            if (!_this.tracker && !window[_this.extTrackerGlobalName] &&
                _this.settings.extFilesPaths && _this.settings.extFilesPaths.length > 0) {
                _this._declare();
                sandbox.domi.onDomReady(function() {
                    _this.settings.extFilesPaths.forEach(function(scriptPath) {
                        sandbox.domi.loadScript({
                            src: scriptPath,
                        }, _this.activate, null, _this);
                    });
                }, _this);
            }
        } else {
            _this.tracker = {};
        }

        _this._inited = true;
        sandbox.moduleInited.dispatch();

        _this.activate();
    };
}

FacebookIntegration.defaultId = "FacebookIntegration";

FacebookIntegration.require = ["logger", "domi", "pageInfo", "userInfo",
    "mapper", "trackingUtils", "generalSettings", "debugTracker",
];

export default FacebookIntegration;