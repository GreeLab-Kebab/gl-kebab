import Signal from "signals";
import utils from "../common/bfa_utils";
import {
    isUndefined,
    isFunction,
} from "lodash";

/**
 * Domi plugin
 * @module  plugins/domi
 * @exports domi
 */

"use strict";
/**
 * Plugin which adds additional methods to BFA Core and Sandbox that work with dom
 * onDomReady method - fires specified callback when page is ready
 * loadScript method - loads specified scripts and fires specified callbacks
 * @constructor
 * @memberof module:plugins/domi
 * @param {BFACore} core - bfa core instance
 * @returns {{modifySBInstance: modifySBInstance}} - object with modifySBInstance method
 */
function DomiPlugin(core) {
    this._core = core;
    this._isDomReady = false;
    this._domReady = new Signal();
    this._domReady.addOnce(function() {
        this._isDomReady = true;
    }, this, Number.MAX_VALUE);
    var _this = this;

    this._installDomi = function(target) {
        target.domi = {
            onDomReady: function(cb, context) {
                if (!_this._isDomReady) {
                    _this._domReady.addOnce(cb, context);
                } else {
                    cb.call(context);
                }
            },
            loadScript: function(scriptObj, onload, onerror, context) {
                function stdOnLoad() {
                    this.onerror = null;
                    this.onload = null;
                    onload.apply(context);
                }

                function stdOnError() {
                    this.onerror = null;
                    this.onload = null;
                    onerror.apply(context);
                }

                var script = document.createElement("script");
                script.type = scriptObj.type || "text/javascript";
                script.charset = scriptObj.charset || "utf8";
                script.src = scriptObj.src;
                if (scriptObj.async !== false) {
                    script.async = true;
                }
                if (!isUndefined(scriptObj.attrs)) {
                    utils.forOwn(scriptObj.attrs, function(value, key) {
                        script.setAttribute(key, value);
                    });
                }
                if (isFunction(onload)) {
                    script.onload = stdOnLoad;
                }
                if (isFunction(onerror)) {
                    script.onerror = stdOnError;
                }
                var body = document.body || document.getElementsByTagName("body")[0];
                if (body) {
                    body.appendChild(script);
                }
            },
        };
    };
    this._installDomi(core);
    (function() {
        // Mozilla, Opera and Webkit
        if (document.readyState === "complete" ||
            document.readyState === "loaded" ||
            document.readyState === "interactive") {
            _this._domReady.dispatch();
            return;
        }

        if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", _this._domReady.dispatch, false);
            // If IE event model is used
        } else if (document.attachEvent) {
            document.attachEvent("onreadystatechange", function() {
                if (document.readyState === "complete") {
                    _this._domReady.dispatch();
                }
            });
        } else {
            // A fallback to window.onload, that will always work
            var oldOnload = window.onload;
            window.onload = function() {
                if (oldOnload) {
                    oldOnload();
                }
                _this._domReady.dispatch();
            };
        }
        return;
    })();
    return {
        modifySBInstance: function(sandboxInstance) {
            _this._installDomi(sandboxInstance);
        },
    };
}
DomiPlugin.defaultId = "domi";
export default DomiPlugin;