import {
    combineEvents
} from './core';

const impressionTargets = new Map();

const onObserve = (items, observer) => {
    items.forEach(({
        isIntersecting,
        target
    }) => {
        if (isIntersecting && impressionTargets.has(target)) {
            impressionTargets.get(target).call(null);
            observer.unobserve(target);
        }
    });
};

const observerInstance = new IntersectionObserver(onObserve, {
    threshold: .5
});
const addImpressionListener = (element, listener) => {
    if (impressionTargets.has(element)) {
        return;
    }

    impressionTargets.set(element, listener);
    observerInstance.observe(element);
};

export const createImpressionHandler = ([sendImpression, addLayers]) => {
    return [
        element => addImpressionListener(element, sendImpression),
        addLayers
    ];
};

export const createClickHandler = ([sendClick, addLayers]) => {
    return [
        element => element.addEventListener('click', () => {
            sendClick();
        }),
        addLayers
    ];
};

export const createRightClickHandler = ([sendClick, addLayers]) => {
    return [
        element => element.addEventListener('contextmenu', () => {
            sendClick();
        }),
        addLayers
    ];
};

export const createUnitTrackingHandlers = (
    impressionEvent,
    clickEvent,
    rightClickEvent
) => combineEvents(
    createImpressionHandler(impressionEvent),
    createClickHandler(clickEvent),
    createRightClickHandler(rightClickEvent)
);