import {
    idGenerator
} from '@buzzfeed/buzzblocks/js/services/util/standalone';


const wids = {};


/**
 * Keeps track of wids on the page,
 * generates a unique suffix for each wid requested
 */
export default {
    /**
     * @param {String|Number} wid
     * @returns {String} the wid with a unique number appended
     *
     * Examples:
     *   widRegistry.getUnique(57);    // returns 1
     *   widRegistry.getUnique(57);    // returns 2
     *   widRegistry.getUnique(57);    // returns 3
     *   widRegistry.getUnique(65, {startFrom: 0});    // returns 0
     *   widRegistry.getUnique(65, {startFrom: 0});    // returns 1
     */
    getUnique(wid, {
        startFrom = 1
    } = {}) {
        if (wid === null || wid === undefined || String(wid) === '' || /\[object Object\]/.test(String(wid))) {
            throw new TypeError('The argument should be a primitive non-empty value');
        }

        if (!(wid in wids)) {
            wids[wid] = idGenerator(startFrom);
        }
        const generateNext = wids[wid];
        return generateNext();
    },

    /**
     * Remove wid from registry
     * @param {String|Number} wid
     * @returns {Void}
     */
    purge(wid) {
        delete wids[wid];
    }
};