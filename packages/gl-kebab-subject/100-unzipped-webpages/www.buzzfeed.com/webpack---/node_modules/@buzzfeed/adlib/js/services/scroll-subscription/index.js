import {
    loadScript
} from '@buzzfeed/bf-utils';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import cookies from '@buzzfeed/buzzblocks/js/services/cookies';

// namespace for easier testing
const util = {
    loadScript
};

const FEATURE_FLAG = 'ads_scroll_subscription';
const LIB_SRC = 'https://static.scroll.com/js/scroll.js';

/**
 * @overview
 * This is for scroll.com ad "blocking" service via subscription.
 * Not a scrollbar related service at all.
 */

let isOn = true;

const scroll = {
    addClassName() {
        document.body.classList.add('ad-scroll-sub--enabled');
    },

    // This getter exists to be called by the synchronous init call in base.js
    get isEnabled() {
        return isOn && Boolean(cookies.get('scroll0'));
    },

    async check() {
        isOn = isOn || await abeagle.isOn(FEATURE_FLAG);
        return isOn && this.isEnabled;
    },

    async init() {
        isOn = isOn || await abeagle.isOn(FEATURE_FLAG);
        if (!isOn) {
            return false;
        }
        return util.loadScript(LIB_SRC);
    },

    /**
     * for single-page application/infinite scrolling
     * https://developer.scroll.com/web/javascript-
     * return {void}
     */
    updateVirtualPage() {
        try {
            const _scroll = window.Scroll;
            _scroll.do(_scroll.virtualPage);
        } catch (e) {
            // fail quietly
            window.raven && window.raven.captureMessage('Could not refresh Scroll virtual page');
        }
    },
};

export default scroll;