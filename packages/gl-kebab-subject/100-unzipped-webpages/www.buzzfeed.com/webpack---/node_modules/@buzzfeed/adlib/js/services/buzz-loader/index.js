import componentApi from '@buzzfeed/buzzblocks/js/services/component-api';
import ads from '../../../core/ads';
import bzfd from '../../../js/services/bzfd';


function fetchBuzzData(buzzId) {
    let options = {
        variant: buzzId,
        extraParams: {
            'u': 'buzz-mobile'
        }
    };
    if (bzfd.webRoot) {
        options.origin = bzfd.webRoot;
    }
    const buzzDataPending = componentApi.get(
        'branded-buzz',
        // `u=buzz-mobile` param forces SCA to return JSON response (default is JSONP)
        // @todo SITE-5837 - Remove `u=buzz-mobile` when SCA returns JSON by default
        options,
    );
    return buzzDataPending;
}


function handleError(error) {
    // SCA errors are ~normal~, so let them pass silently
    if (error.message === 'Failed to fetch') {
        return;
    }
    // otherwise throw the error so we can notice and fix it
    throw error;
}


export default {
    /**
     * Loads buzz data if needed.
     *
     * @param {Object} args
     * @param {Object} args.buzzId - id of buzz to fetch
     * @param {Object} [args.buzzIds = []] - ids of multiple buzzes to fetch
     * @param {Object} [args.buzz = null] - buzz data. If passed, no SCA request will be made
     * @param {Object} [args.buzzes = []] - buzz data. If passed, no SCA request will be made
     * @returns {Promise} - resolved when SCA request completes (or immediately if buzz data is already known),
     *   rejected if SCA request fails or no buzz ids are provided
     * @todo SITE-5837 - Remove `buzz` and `buzzes` arguments
     */
    getBuzzData({
        buzzId,
        buzz = null,
        buzzIds = [],
        buzzes = [],
        creativeId
    } = {}) {
        let buzzDataPending;

        // if the data comes from `BZFD.Config.ads.handleBrandedBuzzData` callback
        // (called in SCA JSONP response),
        // buzz data is already provided
        if (buzz) {
            buzzDataPending = Promise.resolve([buzz]);
        } else if (buzzes.length > 0) {
            buzzDataPending = Promise.resolve(buzzes);

            // old creatives may have buzz id not filled
            // (because they expected userwidget to pick a random advertiser post in that case);
            // we don't allow that anymore
        } else if (!buzzId && buzzIds.length === 0) {
            buzzDataPending = Promise.reject(new ads.AdError(`Missing buzz id for creative #${creativeId}`));

            // if the data comes from universal template, there will be only buzz id,
            // so we need to load buzz data from SCA
        } else {
            // promoted buzz ads consist of one branded post at the time, but keep the ability to have many just in case
            if (buzzId) {
                buzzIds = [buzzId];
            }
            // have to make multiple requests as the SCA endpoint only accepts one buzz id at this time
            buzzDataPending = Promise.all(buzzIds.map(fetchBuzzData));
        }

        // @todo DataDog metrics for errors?
        buzzDataPending.catch(handleError);

        return buzzDataPending;
    }
};