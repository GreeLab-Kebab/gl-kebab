import ads from '../ads';
import bzfd from '../../js/services/bzfd';
import prebidAdUnit from '../../js/services/prebid-ad-unit';
import resizeListener from '../../js/services/resize-listener';
import {
    AdFormatProgrammatic
} from '../formats/programmatic';


const programmatic = function(proto) {
    return {
        setup() {
            this.on('ad-programmatic--error', this.stop);
            this.wasResizeHidden = false;

            this._onProgrammaticMessageBound = this.onProgrammaticMessage.bind(this);
            window.addEventListener('message', this._onProgrammaticMessageBound);

            // include `AdFormat` suited for programmatic ads in case the mixin is used in conjunction with `multiTemplate`
            try {
                this.attachFormats(AdFormatProgrammatic.getFormatDefinition());
            } catch (exc) {
                // will throw error if there is no `attachFormats` method (i.e. `multiTemplate` is not applied)
            }

            this.setPrebidUnits();
            proto.setup.call(this);
        },

        destroy() {
            this.stopProgrammaticListening();
            if (this.resizeListenerId) {
                resizeListener.remove(this.resizeListenerId);
            }
            proto.destroy.call(this);
        },

        /**
         * Process postmessages from external ad template.
         * @param {Object} event - message event object.
         * @return {void}
         */
        onProgrammaticMessage(event) {
            if (!event || typeof event !== 'object' || !event.data || typeof event.data !== 'object') {
                return;
            }

            let message = event.data;
            let source = message.source;
            let action = message.action;

            if (source === 'fan' && action === 'error') {
                if (String(message.data.wid) === String(this.config.wid)) {
                    this.fire('ad-programmatic--error');
                }
            }
        },

        stopProgrammaticListening() {
            this.off('ad-programmatic--error', this.stop);
            window.removeEventListener('message', this._onProgrammaticMessageBound);
            delete this._onProgrammaticMessageBound;
        },

        /**
         * Notifies `ad-wireframe` behavior to remove wireframes/fade in the ad container
         * if ad slot is filled with programmatic ad;
         * Detaches listeners to `MessageEvent`s otherwise
         * @param {Object} gptEv - GPT `SlotRenderEndedEvent`, see ads service for details
         */
        handleSlotRenderEnded(gptEv) {
            proto.handleSlotRenderEnded.call(this, ...arguments);
            if (ads.isProgrammaticSlot(gptEv, this.config.size)) {
                this.context.application.broadcast(`ad-content-rendered-${this.config.wid}`);
                this.slotSize = ads.getRenderedAdSize(gptEv, {
                    wid: this.config.wid
                });
                this.listenForResize();
            } else {
                this.stopProgrammaticListening();
            }
        },

        setPrebidUnits() {
            if (!this.config.viewability) {
                return;
            }
            let adUnit = prebidAdUnit.generateUnit(this.config);
            bzfd.prebidUnits.push(adUnit);
        },

        doesAdFit() {
            if (!this.slotSize) {
                return false;
            }
            const wrapperEl = this.parent || this.element;
            const wrapperRect = wrapperEl.getBoundingClientRect();
            const wrapperWidth = wrapperRect.width;
            return this.slotSize.width <= wrapperWidth;
        },

        resizeHandler() {
            let collapseEl = this.element;

            // compensates for new wireframes
            if (this.element.parentElement.classList.contains('ad-wireframe-wrapper')) {
                collapseEl = this.element.parentElement;
            }

            if (this.doesAdFit()) {
                collapseEl.classList.remove('ad--collapse-vertical', 'card');
                if (this.wasResizeHidden) {
                    this.wasResizeHidden = false;
                    ads.forceRefresh(this.config);
                }
            } else {
                collapseEl.classList.add('ad--collapse-vertical');
                this.wasResizeHidden = true;
            }
        },

        listenForResize() {
            // Defer until `refreshLayout` is ready
            // (in the case when ad module itself or enclosing module's ad manager
            // needs to make adjustments to fit the ad)
            const refreshLayout = this.refreshLayout ? this.refreshLayout : Promise.resolve();
            refreshLayout.then(() => {
                this._resizeHandlerBound = this.resizeHandler.bind(this);
                this.resizeListenerId = resizeListener.add({
                    throttleTimeout: 300,
                    callback: this._resizeHandlerBound
                });
            });
        }
    };
};


export {
    programmatic
};