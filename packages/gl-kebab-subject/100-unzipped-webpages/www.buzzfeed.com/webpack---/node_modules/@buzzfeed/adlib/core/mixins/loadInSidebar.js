import {
    closest
} from '@buzzfeed/buzzblocks/js/services/dom';
import {
    Deferred
} from '@buzzfeed/buzzblocks/js/services/util/standalone';


const loadInSidebar = function(proto) {
    return {
        /**
         * Prevent ads from rendering immediately if they are in original sidebar.
         * TODO remove this mixin after ADSGROUP-573 or prefetch experiment is resolved to control
         * @return {void}
         */
        setup() {
            proto.setup.call(this, ...arguments);
            this.renderInSidebar = new Deferred();
            this.sidebarParent = closest(this.element, '.js-original-sidebar');
            if (!this.sidebarParent) {
                this.renderInSidebar.resolve();
            } else {
                this.on('sidebar-loaded', this.handleSidebarLoaded);
            }
        },

        /**
         * Delay render until sidebar has loaded.
         * Must be used with prefetch because ads can render immediately
         * @returns {Promise}
         */
        render() {
            return this.renderInSidebar
                .then(() => proto.render.call(this, ...arguments));
        },

        /**
         * Process 'sidebar-loaded' broadcast
         * @param {Object} message
         * @return {void}
         */
        handleSidebarLoaded(message) {
            if (!message || !message.data) {
                return;
            }
            let {
                type,
                element
            } = message.data;
            if (type === 'original' && element === this.sidebarParent) {
                this.renderInSidebar.resolve();
            }
        }
    };
};


export {
    loadInSidebar
};