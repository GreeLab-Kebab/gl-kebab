import {
    toPairs
} from 'lodash';
import solid from '@buzzfeed/buzzblocks/js/services/solid/standalone';
import webview from '@buzzfeed/buzzblocks/js/services/webview';
import bzfd from '../bzfd';
import gdpr from '../gdpr';
import size from '../size';
import prebidConfig from '../../config/prebid-config';


const rubiconSiteID = {
    'desktop': 169388,
    'mobile': 169390
};

const appNexusVideo = {
    'bfeg': 13790577,
    'news': 13790579,
    'quiz': 13790580,
    'asis': 13790581,
    'tasty': 13790583
};
const platform = _prebidPlatform();
const country = bzfd.localizationCountry;
const gdprExcluded = ['kargo'];

/**
 * Returns the catgeory of the bpage
 * @returns {String} - category - formatted prebid category.
 */
function _prebidCategory() {
    const docLocation = document.location.href;
    let cat;

    // this news if will catch any news posts not on the bfn.com domain
    if (bzfd.isNewsPost || bzfd.getPageName === 'news') {
        cat = 'news';
    } else if (bzfd.isAsIs || bzfd.getPageName === 'asis') {
        cat = 'asis';
    } else if (bzfd.hasQuiz || bzfd.getPageName === 'quizzes') {
        cat = 'quiz';
    } else {
        cat = 'bfeg';
    }

    if (document.location.href.match('tasty.co')) {
        cat = 'tasty';
    }

    // some non-us news posts should be caught by first check
    if (docLocation.match('buzzfeednews.com')) {
        cat = 'news';
    }

    return cat;
}

/**
 * Returns the platform of the page
 * @returns {String} - category - formatted prebid platform.
 */
function _prebidPlatform() {

    let plat;

    if (solid.isAny(['md', 'lg'])) {
        plat = 'desktop';
    } else if (solid.isAny(['xs', 'sm']) && !webview.isMobileApp()) {
        plat = 'mobile';
    }

    return plat;

}

function _checkGdprExclusion(bidder) {
    return (!gdpr.hasConsented() || gdpr.needsConsent) && gdprExcluded.indexOf(bidder) !== -1;
}

/**
 * Returns true is a specifuc bidder needs to be excluded from a specific ad unit
 * @param {String} bidder - the bidder to check
 * @param {String} pos - the ad position to check
 * @returns {Boolean} - adUnit - formatted prebid ad unit.
 */
function _excludeBidderByPos(bidder, pos) {
    //Exclude Teads from ALL non promo-inline units
    if (bidder === 'teads' && !pos.match('promo-inline')) {
        return true;
    }
    return false;
}

export default {


    /**
     * Generates a prebid ad unit for pbjs.addAdUnits
     * @param {Object} placement - object of ad unit config data.
     * @returns {Object} - adUnit - formatted prebid ad unit.
     */
    generateUnit(data) {

        let adUnitLocation;
        if (country === 'en-us') {
            adUnitLocation = 'us';
        } else if (country === 'en-uk' || country === 'en-ca' || country === 'en-au') {
            adUnitLocation = 'en_non_us';
        } else if (country === 'ja-jp') {
            adUnitLocation = 'ja-jp';
        } else {
            adUnitLocation = 'global';
        }
        // `fluid` isn't liked by some bidders, so filter out
        let filteredSizes = size.getProgrammatic(data.size);

        let prebidData = prebidConfig[data.viewability];

        var adUnit = {
            code: 'div-gpt-ad-' + data.wid,
            mediaTypes: {
                banner: {
                    sizes: filteredSizes
                }
            },
            bids: prebidData.map(function(value) {
                if ((value.platform === platform || !value.platform) &&
                    !_checkGdprExclusion(value.bidder) &&
                    !_excludeBidderByPos(value.bidder, data.adPos)) {
                    return {
                        bidder: value.bidder,
                        params: _setPrebidPlacement(value)
                    };
                } else {
                    return false;
                }
            })
        };

        function _setPrebidPlacement(placement) {
            var newParams = {};
            let category;

            if (placement.bidder === 'teads' && (bzfd.pageSection === 'Goodful' || bzfd.pageSection === 'Nifty')) {
                category = bzfd.pageSection.toLowerCase();
            } else {
                category = _prebidCategory();
            }

            if (placement.bidder === 'rubicon') {
                placement['siteId'] = rubiconSiteID[platform];
            }

            if (placement.bidder === 'ix' && filteredSizes[0]) {
                newParams['size'] = filteredSizes[0];
            }

            if (placement.bidder === 'appnexus' && data.adPos === 'promo-inline1' && solid.isAny(['xs', 'sm'])) {
                placement.placementId = appNexusVideo[category];

                newParams['video'] = {
                    'skippable': true,
                    'playback_method': ['autoplay_sound_off']
                };
            }

            toPairs(placement).forEach(([key, value]) => {
                // we expect this to be an object of placement data OR a string, we can ignore the string values
                if (typeof value === 'object' && value[category]) {
                    if (!value[category][platform]) {
                        return;
                        //Should almost always be value[category][platform]
                        //In some cases (JP) there will be edition specific values
                    } else if (value[category][platform] && !value[category][platform][adUnitLocation] && !value[category][platform]['default']) {
                        value = value[category][platform];
                    } else if (!value[category][platform][adUnitLocation] && value[category][platform]['default']) {
                        value = value[category][platform]['default'];
                    } else if (value[category][platform][adUnitLocation]) {
                        value = value[category][platform][adUnitLocation];
                    }
                }
                // exclude adding the bidder to the params object
                if (key !== 'bidder') {
                    newParams[key] = value;
                }

                if (key === 'platform') {
                    delete newParams[key];
                }

            });

            return newParams;

        }

        // Remove possible undefined bid data from the above checks
        const bids = adUnit.bids.filter(function(item) {
            if (item) {
                return item;
            }
            return false;
        });

        adUnit.bids = bids;

        if (adUnit.code === 'div-gpt-ad-47-1' && solid.isAny(['xs', 'sm'])) {
            adUnit.mediaTypes['video'] = {
                context: 'outstream',
                playerSize: [320, 250]
            };
            adUnit['renderer'] = {
                url: 'https://cdn.adnxs.com/renderer/video/ANOutstreamVideo.js',
                render: function(bid) {
                    window.ANOutstreamVideo.renderAd({
                        targetId: bid.adUnitCode,
                        adResponse: bid.adResponse,
                    });
                }
            };
        }

        return adUnit;
    }
};