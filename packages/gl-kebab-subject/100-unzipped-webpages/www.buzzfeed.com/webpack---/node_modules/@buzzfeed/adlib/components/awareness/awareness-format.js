import {
    Application
} from 't3js';
import {
    AdFormat
} from '../../core';
import formatTemplateDefault from '../../core/partials/format-simple.html';
import awarenessTpl from './awareness-template.html';


export function mixinAwarenessFormat(Format) {
    return class extends Format {
        static moduleTemplate = formatTemplateDefault

        get template() {
            return awarenessTpl;
        }

        get formatContainer() {
            return this.rootElement.querySelector('.js-awareness-inner');
        }

        buildFormat() {
            // @todo ADS-744 - Remove when the template is updated
            this.ad.aspectRatio = (this.ad.aspectRatio || '').replace(/(\d+)x(\d+)/, '$1:$2');

            const parent = this.rootElement;
            const mediaType = this.ad.hasVideo ? 'video' : 'img';
            parent.classList.add('ad--loaded');
            parent.classList.add(`ad-flexible--${this.ad.creativeId}`);
            parent.classList.add(`ad-flexible--aspect-${this.ad.aspectRatio || 'fluid'}`);
            parent.classList.add(`ad-flexible--media-${mediaType}`);
            // if it's a video, no need to do anything since it's in in the iframe already
            if (!this.ad.hasVideo) {
                const media = new Image();
                media.src = this.ad.mainImage;
                media.alt = 'Advertisement image';
                media.classList.add('js-ad-thumbnail');
                parent.querySelector('.js-awareness-media').appendChild(media);
            }
            // replace human-readable values like 50% with CSS-compatible 0.5
            this.ad.fillColorOpacity = (
                this.ad.backgroundImage ? parseInt(this.ad.fillColorOpacity || '70%', 10) / 100 : 1
            );
            super.buildFormat();

            parent.querySelector('.js-awareness-inner').addEventListener('click', this._handleFullBarClick);
        }

        getTemplateData() {
            return this.ad;
        }

        _handleFullBarClick = (ev) => {
            if (ev.target.tagName.toLowerCase() === 'a') {
                return;
            }
            const button = this.rootElement.querySelector('.js-ad-clickout');
            try {
                // clone and dispatch the event to keep event properties like pressed Ctrl button
                button.dispatchEvent(new MouseEvent('click', ev));
            } catch (err) {
                // IE doesn't support creating a `MouseEvent` via constructor,
                // but `document.createEvent` equivalent would be quite verbose, so don't bother
                button.click();
            }
        }

        destroy() {
            const ad = this.rootElement.querySelector('.js-awareness-inner');
            if (ad) {
                ad.removeEventListener('click', this._handleFullBarClick);
            }
            super.destroy();
        }
    };
}

export default class AwarenessFormat extends AdFormat.withNewStyleMixins(mixinAwarenessFormat) {
    static formatType = 'awareness_card'
}


Application.addModule(`ad-format-${AwarenessFormat.formatType}`, AwarenessFormat.generateModule());