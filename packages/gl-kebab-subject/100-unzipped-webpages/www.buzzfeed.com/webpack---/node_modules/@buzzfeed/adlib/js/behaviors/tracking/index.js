import {
    Application
} from 't3js';
import {
    loadScript
} from '@buzzfeed/bf-utils';
import {
    closest,
    getViewPosition
} from '@buzzfeed/buzzblocks/js/services/dom';
import {
    Deferred
} from '@buzzfeed/buzzblocks/js/services/util/standalone';
import ads from '../../../core/ads';
import bzfd from '../../services/bzfd';
import * as datadog from '../../services/datadog';


// namespace for easier testing
const dom = {
    getViewPosition
};
const util = {
    loadScript
};


/**
 * Behavior for ad tracking.
 */
class AdTracking {
    constructor(context) {
        this.context = context;
        this.element = context.getElement();
        /** @type {AdConfig} */
        this.config = context.getConfig();
        this.gptEv = null; // will be set later in `handleSlotRender`
        this.ad = null; // will be set later in `trackingReady` handler

        this.trackingReady = new Deferred();

        const {
            wid
        } = this.config;
        this.onmessage = {
            // the event is broadcast by `notifyContentReady` mixin
            [`ad-content-ready-${wid}`]: this.trackingReady.resolve,
            [`ad-impression-${wid}`]: this.trackImpression,
            [`ad-click-${wid}`]: this.trackClick,
            [`advertise-click-${wid}`]: this.trackAdvertiseClick,
        };
    }

    /**
     * Sets up tracking when ad module is initialized.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    init() {
        if (this._slotRenderHandlerBound) {
            return;
        }
        this._slotRenderHandlerBound = this.handleSlotRender.bind(this);
        // track events only for rendered units, not wireframes
        ads.addSlotRenderEndedHandler(this.config.wid, this._slotRenderHandlerBound);
    }

    /**
     * @param {Object} gptEv - data provided by GPT with `SlotRenderEndedEvent`
     * @see https://developers.google.com/doubleclick-gpt/reference#googletageventsslotrenderendedevent
     */
    handleSlotRender(gptEv) {
        if (gptEv.isEmpty) {
            this.notifyDataDog('slot.empty');
            return;
        }
        this.gptEv = gptEv; // attaching this here for reference later down the line.

        this.notifyDataDog(ads.isBackfillSlot(gptEv) ? 'slot.backfill' : 'slot.advertiser');

        this.trackingReady.then((ad) => {
            this.ad = ad;
            this.normalize3rdPartyTrackers();
            this.setUpImpressionTracking();
            this.setUpClickTracking();
        });
    }

    /**
     * Adds click event listener.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    setUpClickTracking() {
        this._trackClicksBound = (clickEv) => {
            const link = closest(clickEv.target, 'a', true);
            if (!link || ('adsNoTrack' in link.dataset)) {
                return;
            }
            this.context.application.broadcast(`ad-click-${this.config.wid}`, {
                link
            });
        };
        this.element.addEventListener('click', this._trackClicksBound);
        this.setUpProgrammaticTracking();
    }

    /**
     * Track clicks on programmatic ad iframes.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    setUpProgrammaticTracking() {
        const isProgrammatic = (this.ad.type === 'programmatic');
        if (isProgrammatic) {
            const adIframe = this.element.querySelector('iframe');
            this._detectProgrammaticClick = () => {
                window.setTimeout(() => {
                    if (document.activeElement === adIframe) {
                        this.context.application.broadcast(`ad-click-${this.config.wid}`);
                    }
                }, 0);
            };
            window.addEventListener('blur', this._detectProgrammaticClick);
        }
    }

    /**
     * Adds viewport monitor to watch scroll events.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    setUpImpressionTracking() {
        this.context.application.broadcast(`ad-impression-${this.config.wid}`);
    }

    /**
     * Notifies DataDog / BFA in case of click event.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    trackClick({
        link
    } = {}) {
        this.notifyDataDog('click');
        // if there's a `data-bfa` attribute, the click will be tracked by BFA automatically
        if (!link || !link.dataset.bfa) {
            this.notifyBFA('click');
        }
        this.notify3rdparty('click');
    }

    /**
     * Notifies DataDog / BFA in case of "Advertise with BuzzFeed" click event.
     * @memberOf behavior:ad-tracking
     * @param {Object} data (optional) - BFA data
     * @return {void}
     */
    trackAdvertiseClick(data) {
        this.notifyDataDog('advertise.click');
        ads.notifyBFA('click', {
            t: 'click:advertise',
            n: 'Advertise',
            l: this.config.adPos,
            d: 'edition',
            data: {
                'url': data.url,
            },
            opt: {
                'dimension2': bzfd.localizationCountry,
                'dimension7': this.config.adPos,
            },
        });
    }

    /**
     * Notifies DataDog / BFA in case of impression event.
     * @memberOf behavior:ad-tracking
     * @return {void}
     */
    trackImpression() {
        this.notify3rdparty('impression');
        this.notifyBFA('scroll');
        this.notifyDataDog('impression');
        if (dom.getViewPosition(this.element).isPartiallyInViewport()) {
            this.notifyDataDog('in_viewport');
        }
    }

    /**
     * Prepares data and initiates ad service call to notify DataDog.
     * @memberOf behavior:ad-tracking
     * @param {String} eventName - e.g. click or impression
     * @return {void}
     */
    notifyDataDog(eventName) {
        datadog.notifyDataDog(eventName, this.config);
    }

    /**
     * Prepares data and initiates ad service call to notify BFA.
     * @memberOf behavior:ad-tracking
     * @param {String} eventName - e.g. click or scroll
     * @return {void}
     */
    notifyBFA(eventName) {
        if (!eventName || !this.config || !this.config.adPos) {
            return;
        }
        const adPos = this.config.adPos;
        const isProgrammatic = (this.ad.type === 'programmatic');
        let creativeId = this.gptEv.creativeId;
        if (!creativeId && isProgrammatic) {
            creativeId = 'adxbackfill';
        }
        const bfaData = {
            t: eventName,
            n: `${adPos}-dfp`,
            l: adPos,
            d: isProgrammatic ? 'programmatic' : 'creative',
            data: {
                obj_id: 0,
                type: this.ad.type,
                creativeId
            },
            opt: {
                dimension13: creativeId
            }
        };
        ads.notifyBFA(eventName, bfaData);
    }

    /**
     * @param {String} eventName - 'click' or 'impression'
     */
    notify3rdparty(eventName) {
        const pixels = this.ad[`${eventName}Trackers`] || [];
        pixels.forEach((url) => this.create3rdPartyPixel(url, eventName));
    }

    normalize3rdPartyTrackers() {
        const ad = this.ad;
        if (ad.type === 'programmatic') {
            return;
        }
        const removeEmpty = (urls = []) => urls.filter((url) => !!url);

        if (!ad.clickTrackers) {
            // temporary solution until we migrate DFP templates to use native templates for buzzes
            ad.clickTrackers = [(window.BF_DFP_CLICKS || {})[this.config.wid]];
        }
        ad.clickTrackers = removeEmpty(ad.clickTrackers);
        ad.impressionTrackers = removeEmpty(ad.impressionTrackers);
        // `customTrackers` is a text field containing script URLs separated with spaces and/or newlines
        ad.customTrackers = typeof ad.customTrackers === 'string' ? removeEmpty(ad.customTrackers.split(/\s+/)) : [];
        this.init3rdPartyScripts();
    }

    /**
     * creates a 3rd party tracker pixel
     * @param {String} trackerUrl - url 3rd party tracker
     */
    create3rdPartyPixel(trackerUrl, eventName = '') {
        let img = new Image();
        img.src = trackerUrl;

        // for E2E testing
        if (bzfd.isE2ETest) {
            img.classList.add('ad-slot-invisible');
            img.classList.add(`ad-e2e--pixel-${eventName}`);
            this.element.appendChild(img);
        }
    }

    init3rdPartyScripts() {
        this.ad.customTrackers.forEach((url) => util.loadScript(url, this.element));
    }

    /**
     * Cleanup
     * @ignore
     * @return {void}
     */
    destroy() {
        ads.removeSlotRenderEndedHandler(this.config.wid, this._slotRenderHandlerBound);
        delete this._slotRenderHandlerBound;
        this.element.removeEventListener('click', this._trackClicksBound);
        delete this._trackClicksBound;
        if (this._detectProgrammaticClick) {
            window.removeEventListener('blur', this._detectProgrammaticClick);
            delete this._detectProgrammaticClick;
        }
    }
}


export const name = 'ad-tracking';
export default AdTracking;

Application.addBehavior(name, (context) => new AdTracking(context));