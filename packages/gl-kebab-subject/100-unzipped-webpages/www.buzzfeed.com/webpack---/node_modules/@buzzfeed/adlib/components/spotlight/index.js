import {
    Application
} from 't3js';
import prepareTemplate from '@buzzfeed/buzzblocks/js/services/nunjucks-env';
import {
    AdFormat,
    mixinNativeVideoFormat
} from '../../core';
import {
    mixinAwarenessFormat
} from '../awareness/awareness-format';
import slotWrapperTmpl from './slot-wrapper.html';
import creativeStyles from './spotlight-style.html';


export class SpotlightFormat extends AdFormat
    .withNewStyleMixins(mixinNativeVideoFormat, mixinAwarenessFormat) {

        static formatType = 'spotlight'

        static headlineMaxLength = 110

        get formatContainer() {
            return this.rootElement.querySelector('.js-awareness-inner');
        }

        buildAdPartial() {
            super.buildAdPartial();
            this.element.insertAdjacentHTML('beforeend', prepareTemplate(creativeStyles).render(this.ad));
        }

        getTemplateData() {
            const data = super.getTemplateData();
            data.headlineMaxLength = SpotlightFormat.headlineMaxLength;
            return data;
        }
    }

Application.addModule(`ad-format-${SpotlightFormat.formatType}`, SpotlightFormat.generateModule());


export default function spotlightMixin(Unit) {
    return class extends Unit {
        constructor() {
            super(...arguments);

            this.attachFormats(
                SpotlightFormat.getFormatDefinition()
            );

            // we need more complex markup for iframe container
            const slotMarkup = prepareTemplate(slotWrapperTmpl).render(this.config);
            // safer than `ads.getSlotContainer` because of possible duplicate ids
            const slot = this.element.querySelector('[id^="div-gpt-ad"]');
            if (slot) {
                slot.insertAdjacentHTML('beforebegin', slotMarkup);
                slot.parentElement.removeChild(slot);
            } else {
                this.element.insertAdjacentHTML('beforeend', slotMarkup);
            }
            this.addCssClasses();
        }
    };
}