/*global BZFD*/
import {
    set
} from 'lodash';
import bzfd from '@buzzfeed/buzzblocks/js/services/bzfd';


const missingConfigError = (
    '`BZFD.Config.ads` does not exist or is misconfigured, which may cause ads to work incorrectly; ' +
    'use `bf_ads.get_ads_config` to make the config'
);


const bzfdAds = {
    /**
     * @returns {Boolean} - `true` if the current bpage includes "important safety information", `false` otherwise
     */
    get isPharmaceutical() {
        return bzfd.author === 'emdserono';
    },

    /**
     * @returns {Object} - named ad sizes
     * @throws {Error} if `BZFD.Config.ads.sizes` is not defined
     */
    get adSizes() {
        try {
            // should fail if `BZFD.Config.ads` is defined, but doesn't contain `sizes`
            BZFD.Config.ads.sizes.NATIVE; // eslint-disable-line no-unused-expressions
        } catch (e) {
            throw new Error(missingConfigError);
        }
        return BZFD.Config.ads.sizes;
    },

    /**
     * @returns {Array} - array of possible sizes for programmatic ads
     * @throws {Error} if `BZFD.Config.ads.programmaticSizes` is not defined
     */
    get programmaticSizes() {
        try {
            // should fail if `BZFD.Config.ads` is defined, but doesn't contain `programmaticSizes`
            BZFD.Config.ads.programmaticSizes[0]; // eslint-disable-line no-unused-expressions
        } catch (e) {
            throw new Error(missingConfigError);
        }
        return BZFD.Config.ads.programmaticSizes;
    },

    /**
     * @returns {Array} - prebid ad units, or empty array by default
     */
    get prebidUnits() {
        try {
            BZFD.Config.ads.prebidUnits.length; // eslint-disable-line no-unused-expressions
        } catch (e) {
            set(window, 'BZFD.Config.ads.prebidUnits', []);
        }
        return BZFD.Config.ads.prebidUnits;
    },

    /**
     * @returns {String} - the country code
     */
    get localizationCountry() {
        try {
            BZFD.Context.page.localization.country; // eslint-disable-line no-unused-expressions
        } catch (e) {
            set(window, 'BZFD.Context.page.localization.country', 'en-us');
        }
        return BZFD.Context.page.localization.country;
    },

    /**
     * @returns {String} - primary section of the current page, or null by default
     */
    get pageSection() {
        try {
            // feedpage BZFD || bpage BZFD
            if (bzfd.isFeedPage) {
                return BZFD.Context.page.section;
            }
            return BZFD.Context.page.classification.section;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {Array} - cms tags, excluding special metadata tags
     * (e.g. `--trending`, `--primary-keyword-<keyword>`, `--updated-<timestamp>`)
     */
    get cmsTags() {
        try {
            let allTags = BZFD.Context.buzz.tags;
            let tagsWithoutMeta = allTags.filter((tag) => !/^--/.test(tag));
            return tagsWithoutMeta;
        } catch (e) {
            return [];
        }
    },

    get pageTitle() {
        try {
            return BZFD.Context.page.title;
        } catch (e) {
            return '';
        }
    },

    get pageDescription() {
        try {
            return BZFD.Context.page.description;
        } catch (e) {
            return '';
        }
    },

    get destination() {
        if (bzfd.isAsIs) {
            return 'asis';
        }
        if (location.hostname === 'tasty.co') {
            return 'tasty';
        }
        if (/^\/reviews\//.test(location.pathname)) {
            return 'reviews';
        }
        if (bzfd.isBFN) {
            return 'bfnews';
        }
        return 'buzzfeed';
    },

    get isE2ETest() {
        return (/\bade2e\b/.test(window.location.search));
    },

    get env() {
        try {
            return BZFD.Config.env;
        } catch (e) {
            return '';
        }
    }
};

const service = {};
/*
Not using lodash's `merge` because there is a bug in how it merges objects with getters,
see https://jsfiddle.net/Af4wVenf/4ctwoyLh/

Also can't use Object.getOwnPropertyDescriptors in order to support IE11

This way getters from both `bzfd` and `bzfdAds` will be preserved when merging
*/
Object.getOwnPropertyNames(bzfd).forEach(prop => {
    Object.defineProperty(service, prop, Object.getOwnPropertyDescriptor(bzfd, prop));
});
Object.getOwnPropertyNames(bzfdAds).forEach(prop => {
    Object.defineProperty(service, prop, Object.getOwnPropertyDescriptor(bzfdAds, prop));
});

export default service;