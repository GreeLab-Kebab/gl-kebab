import {
    Application
} from 't3js';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import bzfd from '../../services/bzfd';
import client from '@buzzfeed/buzzblocks/js/services/client';
import solid from '@buzzfeed/buzzblocks/js/services/solid/standalone';
import Viewable from '@buzzfeed/buzzblocks/js/behaviors/viewable/standalone';

function _getDefaults() {
    return {
        // default is twice the viewport height
        renderLookahead: client.getViewportHeight() * 2,
        throttleTimeout: 300
    };
}

/**
 * Behavior for view position monitoring.
 */
class AdViewable extends Viewable {

    constructor() {
        super(...arguments);

        this.nonUSLookaheadEnabled = false;

        abeagle.getExperimentVariant('non_us_ad_lookahead_adjustments')
            .then(function(variant) {
                if (variant === 'on') {
                    this.nonUSLookaheadEnabled = true;
                }
            }.bind(this))
            .catch(abeagle.defaultErrorHandler);
    }

    getRenderLookahead(config) {
        if (bzfd.locale !== 'en_US' && this.nonUSLookaheadEnabled) {
            if (solid.isAny(['xs', 'sm'])) {
                return client.getViewportHeight() * 0.5;
            } else {
                return client.getViewportHeight();
            }
        }
        // If the html config.renderLookahead includes a number prefixed by x, multiply viewport value
        if (config && config.renderLookahead && config.renderLookahead.toString().match(/^x/)) {
            var multiply = parseFloat(config.renderLookahead.slice(1));
            return client.getViewportHeight() * multiply;
        } else if (config && config.renderLookahead) {
            return config.renderLookahead;
        }

        return _getDefaults().renderLookahead;
    }

    /**
     * Override watch()
     */
    watch() {
        if (this.watching) {
            return;
        }
        /**
         * Deferring start of viewport detection.
         * Prevents a case where modules are already located in the viewport, but have not been initalized yet.
         * As T3 Application init process is always synchronous, this will fire viewport-active events when the initialization is finished.
         */
        this.watching = window.setTimeout(() => {
            this.monitor.add({
                target: this.element,
                renderLookahead: this.getRenderLookahead(this.config),
                callback: this._notifySelf,
                exitCallback: this.config.animated ? this._notifySelfExit : null,
                watchOnce: this.config.animated ?
                    false : typeof this.config.watchOnce !== 'undefined' ? this.config.watchOnce : true,
            });
        }, 0);
    }
}

export const name = 'ad-viewable';

Application.addBehavior(name, ctx => new AdViewable(ctx));

export default AdViewable;