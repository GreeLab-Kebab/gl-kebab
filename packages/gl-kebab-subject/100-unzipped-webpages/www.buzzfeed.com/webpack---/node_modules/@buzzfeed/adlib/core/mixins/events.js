import {
    Application,
    EventTarget
} from 't3js';


const events = function(proto) {
    const eventsMixin = {
        /**
         * Initializes event handling functionality
         */
        initEvents() {
            EventTarget.call(this);
        },

        /**
         * Starts listening to T3 *messages*
         * (techically, to T3 special event called `message`).
         * Handlers added with `addMessageHandler` won't run on `broadcast` until this method is called
         */
        startMessaging() {
            this._handleT3MessageBound = this._handleT3Message.bind(this);
            Application.on('message', this._handleT3MessageBound);
        },

        /**
         * Stops listening to all T3 *messages*
         * (affects only handlers for special T3 event `message`;
         * does not affect other events used via this.on/this.fire)
         */
        stopMessaging() {
            Application.off('message', this._handleT3MessageBound);
            delete this._handleT3MessageBound;
        },

        /**
         * @private
         */
        _handleT3Message({
            data: {
                message,
                messageData
            }
        }) {
            this.fire(message, messageData);
        },

        /**
         * Subscribes to T3 message
         * @param {String} msg - message name
         * @param {Function} handler - callback to execute when the message is broadcast
         */
        addMessageHandler(msg, handler) {
            this.on(msg, handler);
        },

        /**
         * Unsubscribes from T3 message
         * @param {String} msg - message name
         * @param {Function} handler - callback attached previously with `addMessageHandler`
         */
        removeMessageHandler(msg, handler) {
            this.off(msg, handler);
        },

        destroy() {
            proto.destroy.call(this, ...arguments);
            delete this._handlers; // see `EventTarget` code
            this.stopMessaging();
        }
    };

    /**
     * Mixes in T3 `EventTarget` event system; @see http://t3js.org/docs/api/event-target/
     * Any ad component can trigger/handle custom events *within its own scope* (i.e. they are not visible outside)
     */
    Object.assign(eventsMixin, EventTarget.prototype);

    return eventsMixin;
};


export {
    events
};