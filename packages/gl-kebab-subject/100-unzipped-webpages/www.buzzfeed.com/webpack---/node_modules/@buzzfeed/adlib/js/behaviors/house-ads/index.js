import {
    Application
} from 't3js';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import ads from '../../../core/ads';
import localization from '@buzzfeed/buzzblocks/js/services/localization';
import template from './house-ad.html';

const banners = {
    970: {
        90: [
            `970x90-A`,
            `970x90-B`,
        ],
    },
    728: {
        90: [
            `728x90-A`,
            `728x90-B`,
        ],
    },
    300: {
        600: [
            `300x600-A`,
            `300x600-B`,
        ],
        250: [
            `300x250-A`,
            `300x250-B`,
        ],
    },
};

class HouseAds {
    constructor(context) {
        this.context = context;
        this.element = context.getElement();
        this.config = context.getConfig() || {};
        this.wid = this.config.wid;
    }

    get size() {
        return this.config.size || []; // may have been updated/filtered
    }

    get adPos() {
        return this.config.adPos || 'unknown';
    }

    render() {
        abeagle.getExperimentVariant('prime_day_2019')
            .then((variant) => {
                if (variant === 'on') {
                    const banner = this.getBanner();
                    const pos = this.adPos;

                    var newEl = document.createElement('div');
                    newEl.classList.add(
                        'ad--prime-day-2019__wrapper',
                        `ad--prime-day-2019__${pos}`
                    );
                    newEl.innerHTML = template.render({
                        class: `ad--prime-day-2019__${banner}`,
                        bfa_data: {
                            id: this.config.wid,
                            banner_id: banner,
                            ad_position: pos,
                        }
                    });

                    this.element.insertAdjacentElement('afterend', newEl);
                }
            })
            .catch(abeagle.defaultErrorHandler);
    }

    getBanner() {
        let banner = null;

        this.size.some((size) => {
            if (Array.isArray(size)) {
                const bannerOptions = banners[size[0]] || {};
                banner = bannerOptions[size[1]];
                if (!banner) {
                    const willFit = Object.keys(bannerOptions).filter(key => key <= size[1]);
                    if (willFit.length) {
                        banner = bannerOptions[willFit[0]];
                    }
                }
            }
            return banner;
        });
        // return a random banner that fits in ad slot
        return banner ? banner[Math.floor(Math.random() * banner.length)] : null;
    }

    init() {
        if (localization.getEdition() !== 'en-us') {
            return;
        }
        ads.detectAdBlock().then(blocked => {
            if (blocked) {
                this.render();
            }
        }).catch(() => this._onCollapseStart());
    }
}
export default HouseAds;

Application.addBehavior('house-ads', ctx => new HouseAds(ctx));

export const name = 'house-ads';