import {
    Application
} from 't3js';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import solid from '@buzzfeed/buzzblocks/js/services/solid/standalone';
import bzfd from '../../js/services/bzfd';
import {
    AdUnit
} from '../../core/base';
import {
    programmatic,
    lazyRender
} from '../../core/mixins';
import ads from '../../core/ads';


class AdExBase extends AdUnit.withMixins(programmatic) {
    constructor(context) {
        super(context);

        // set feature flag & classes here to avoid style flashing
        this.featureFlag = null;

        const {
            adPos
        } = this.config;
        if (/inline/.test(adPos)) {
            this.placement = 'inline';
        } else if (/wide/.test(adPos)) {
            this.placement = 'wide';
        } else if (/bottom/.test(adPos)) {
            this.placement = 'grid';
        } else {
            this.placement = 'rail';
        }
        this.element.classList.add(`ad-ex--${this.placement}`);

        const isSidebarTopLevel = (
            this.placement === 'rail' &&
            this.element.parentElement.classList.contains('side-bar')
        );
        if (isSidebarTopLevel && !/-bp$/.test(adPos)) {
            this.element.classList.add('ad-ex--sidebar-top');
        }

        // call again b/c `this.placement` needs
        // to be set for this class' setupSizes()
        this.setupSizes();
    }

    setupSizes() {
        super.setupSizes();
        const isDesktop = solid.isAny(['md', 'lg']);
        const isGrid = this.placement === 'grid';
        const isInline = this.placement === 'inline';
        const adIsFilteredByPlacement = isGrid || isInline;

        if (isDesktop && adIsFilteredByPlacement) {
            this.filterProgrammaticSizes({
                min: bzfd.adSizes.PROGRAMMATIC_LEADERBOARD
            });
        }

        if (!isDesktop && isInline) {
            this.filterProgrammaticSizes({
                max: bzfd.adSizes.PROGRAMMATIC_SMARTPHONE_BANNER
            });
        }
    }

    /**
     * binds listeners for special events
     * @return {void}
     */
    setup() {
        super.setup();
        if (!this.featureFlag) {
            this.renderReady = Promise.resolve();
        }

        this.renderReady = this.featureFlag ? this.runFeatureFlags().then(() => true, () => false) : Promise.resolve(true);
        return this.renderReady;
    }

    /**
     * checks the feature flags for the AdEx experiment
     * @return {void}
     */
    runFeatureFlags() {
        return abeagle.getExperimentVariant(this.featureFlag, {
                rejectErrors: false
            })
            .then((variant) => {
                if (variant === 'ad_exchange') {
                    return Promise.resolve(true);
                } else {
                    return Promise.reject(false);
                }
            });
    }

    /**
     * Renders a native ad.
     * If feature flags are already resolved by the time the `viewport-active` event occurs,
     * will call parent `render` immediately,
     * otherwise will wait for feature flags
     * @return {void}
     */
    render() {
        this.renderReady
            .then((shouldRender) => {
                if (shouldRender) {
                    super.render();
                } else {
                    ads.collapse(this.config.wid); // will destroy after collapse animation finishes
                }
            });
    }
}


class AdEx extends AdExBase.withMixins(lazyRender) {}

Application.addModule('ad-ex', AdEx.generateModule());

export {
    AdExBase,
    AdEx
};