import {
    notifyDataDog
} from '../datadog';


/**
 * Service for parsing and tracking data related to Prebid.js header bidding
 * @module
 */

let eventHandlers = {};
let adOptions;
let timeOuts;

/**
 * Set the bidder into the timeOuts array
 * @param {bid} array - bid timeout response array
 */
function _trackBidTimeout(bid) {
    timeOuts = bid ? bid : [];
}

/**
 * Send data for winning bid
 * @param {bid} object - winning bid object
 */
function _trackBidWon(bid) {
    if (bid) {
        notifyDataDog('winningbid', adOptions, {
            'bidder': bid.bidder,
            'cpm': _formatCpm(bid.cpm)
        });
    }
}

/**
 * Send data for each bid
 * @param {bid} object - bid response object
 */
function _trackBidResponse(bid) {
    if (!bid) {
        return;
    }
    const didBidTimeOut = timeOuts && timeOuts.includes(bid.bidder);

    if (didBidTimeOut) {
        const {
            bidder,
            adUnitCode
        } = bid;
        window.raven && window.raven.captureMessage('bidTimeout', {
            bidder,
            adUnitCode
        });
    }

    notifyDataDog('bid', adOptions, {
        'bidder': bid.bidder,
        'cpm': _formatCpm(bid.cpm),
        'bidTimeToRespond': bid.timeToRespond,
        'bidTimeout': didBidTimeOut ? 1 : 0
    });
}

/**
 * Reset the timeOuts array for the next auction
 */

function _resetBidData() {
    if (timeOuts && timeOuts.length) {
        timeOuts = [];
    }
}

/**
 * Format the bid cpm by rounding to the nearest .05
 * @param {cpm} - bid cpm
 */

function _formatCpm(cpm) {
    return Math.ceil(cpm * 20) / 20;
}


const prebidTracking = {
    init() {
        const pbjs = window.pbjs || {};

        eventHandlers = {
            'bidTimeout': _trackBidTimeout,
            'bidResponse': _trackBidResponse,
            'bidWon': _trackBidWon,
            'auctionEnd': _resetBidData
        };

        Object.keys(eventHandlers).forEach(function(handler) {
            pbjs.onEvent(handler, eventHandlers[handler]);
        });

    },
    setData(options) {
        adOptions = options;
    }
};

export default prebidTracking;