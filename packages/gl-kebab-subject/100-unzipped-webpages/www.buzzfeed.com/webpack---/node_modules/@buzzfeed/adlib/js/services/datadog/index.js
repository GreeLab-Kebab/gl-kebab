import {
    pickBy
} from 'lodash';
import {
    instrument
} from '@buzzfeed/buzzblocks/js/services/metrics';
import ads from '../../../core/ads'; // @todo Remove the circular reference
import bzfd from '../bzfd';

/**
 * Sends metric to DataDog
 * @param {String} eventName - name of the metric to increment (example: 'click')
 * @param {AdSlotParameters} [unitOptions={}] - ad slot configuration
 * @param {TagParameters} [tagOptions={}] - object to extend tags
 */
export function notifyDataDog(eventName, unitOptions = {}, tagOptions = {}) {
    let tags = {};
    if ('adPos' in unitOptions) {
        tags.pos = unitOptions.adPos;

        let dfpPlatform = ads.buildAdCall(unitOptions)
            .match(/6556\/([^/]+)/)[1]
            .split('.')
            .filter((part) => {
                /* unify paths for tracking purposes:
                bfd.awareness.desktop --> bfd.desktop,
                bfd.ja.partnerpost --> bfd.partnerpost */
                return ['bfd', 'desktop', 'mobileweb', 'partnerpost'].indexOf(part) > -1;
            });
        tags.dfp_platform = dfpPlatform.join('.'); // eslint-disable-line camelcase
    }
    // strip out '-bp' postfix
    if (tags.pos) {
        tags.pos = tags.pos.replace(/-bp$/, '');
    }

    // merge tagOptions onto tags
    Object.assign(tags, tagOptions);

    let bfaConfig = cleanObj({
        samplingRate: getSamplingRate(eventName),
        platform: getPlatform(),
    });

    instrument('ads', eventName, tags, bfaConfig);
}


export function notifyError(eventName, error) {
    // convert the value to string to make sure it won't be lost when `JSON.stringify`-ing
    notifyDataDog(`error.${eventName}`, {}, {
        error: String(error)
    });
}


function getSamplingRate(eventName) {
    if (/bid/.test(eventName)) {
        return 0.01;
    } else if (/click/.test(eventName)) {
        return 1;
    }
    return undefined;
}

function getPlatform() {
    if (bzfd.isAsIs) {
        return 'asis_pager';
    }
    return undefined;
}

function cleanObj(obj) {
    return pickBy(obj, (value) => value !== undefined);
}