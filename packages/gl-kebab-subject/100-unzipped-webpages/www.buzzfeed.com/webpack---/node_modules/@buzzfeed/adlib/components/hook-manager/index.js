import {
    Application,
    EventTarget
} from 't3js';
import {
    filter
} from 'lodash';
import {
    decorateWithMixins
} from '@buzzfeed/buzzblocks/js/services/util/standalone';
import {
    events
} from '../../core/mixins/events';
const adHookevents = new EventTarget();
const AD_HOOK_GET = 'adlib-hook-get--';
const AD_HOOK_GRABBED = 'adlib-hook-grabbed--';
const AD_HOOK_CONFIG = 'adlib-hook-config--';

/**
 * AdLibHookManager is a module that takes list/array
 * of ad slot configs loaded server-side that makes a note of
 * what parent module/component it needs to loads ads into.
 *
 * The parent module/component only needs to broadcast an event
 * (event name: 'adlib-hook-grab--<parent-module-name>')
 * and have placeholder (hook) elements w/
 * `data-adlib-hook="ad-unit-module-name"`
 * as an attribute on the placeholder element.
 *
 * This class provides a T3 EventTarget listener for the submodule
 * (target module you want to get loaded into parent module/component)
 * to use and immediately listen for events from AdLibHookManager
 * based on it's parent/sub-module names
 *
 * The submodule should handle rendering and starting the units.
 * Manager provides the config and can search the parent module DOM
 * for "hook elements" in order for the submodule to append to.
 *
 * @class
 * @classdesc Module that digests server-rendered ad slots for parent components
 */
class AdLibHookManager {
    constructor(context) {
        this.initEvents();
        this.config = context.getConfig();
    }

    init() {
        let module = this.config.hookModule;
        let parent = this.config.parentModule;
        this.startMessaging();
        this.addMessageHandler(AD_HOOK_GET + parent, this.handleGrabHooks.bind(this));
        adHookevents.fire(AD_HOOK_CONFIG + module, {
            'slots': this.config.slots
        });
    }

    handleGrabHooks({
        data
    }) {
        let parentEl = data.element;
        let {
            parentModule,
            hookModule
        } = this.config;

        if (!parentEl || parentEl.dataset.module !== parentModule) {
            return;
        }

        let hooks = filter(
            parentEl.querySelectorAll(`[data-adlib-hook="${hookModule}"]`),
            (h) => {
                return !h.dataset.adlibHookLoaded;
            }
        );

        adHookevents.fire(AD_HOOK_GRABBED + hookModule, {
            'hooks': hooks,
            'parent': parentEl
        });
    }
}
AdLibHookManager = decorateWithMixins(AdLibHookManager, events);
Application.addModule('adlib-hook', (context) => {
    return new AdLibHookManager(context);
});

const eventPrefix = {
    'CONFIG': AD_HOOK_CONFIG,
    'GET': AD_HOOK_GET,
    'GRABBED': AD_HOOK_GRABBED
};

export {
    adHookevents,
    eventPrefix
};