import {
    Application
} from 't3js';
import prepareTemplate from '@buzzfeed/buzzblocks/js/services/nunjucks-env';
import {
    lazyRender
} from '../../core/mixins/rendering';
import {
    AdExBase
} from '../ex';
import {
    adHookevents,
    eventPrefix as hookPrefix
} from '../hook-manager';
import adxTpl from './ex-scl-tpl.html'; // webpack

const adxTemplate = prepareTemplate(adxTpl);
let _ads = [];
let infWid = 56;

// ad-ex-scl only has lazyLoading since
// site-component-list will let us know the "order"
// of things being loaded
class AdExSCL extends AdExBase.withMixins(lazyRender) {}
Application.addModule('ad-ex-scl', AdExSCL.generateModule());

// Start Listening right away
adHookevents.on(`${hookPrefix.CONFIG}ad-ex-scl`, ({
    data
}) => {
    if (!data.slots) {
        return;
    }
    _ads = data.slots.map((slot) => {
        slot.isAd = true;
        return slot;
    });
});

adHookevents.on(`${hookPrefix.GRABBED}ad-ex-scl`, ({
    data
}) => {
    let {
        hooks,
        parent
    } = data;
    // if no hooks available or
    // we've got no ads (while not going infinite)
    // assumes at least 1 promo-infinite is in config
    if (!parent || !hooks || (_ads.length < 1)) {
        return;
    }

    for (let i = 0; i < hooks.length; i++) {
        let hookEl = hooks[i];
        let currSlot = {};

        if (_ads.length > 0 && _ads[0]['adPos'] !== 'promo-infinite') {
            currSlot = _ads.shift();
        } else {
            // _ads[0]should now be 'promo-infinite'
            infWid++;
            currSlot = _ads[0];
            currSlot.wid = infWid;
            currSlot.targeting.wid = infWid;
        }
        // if for some reason we don't have a proper config
        if (!currSlot.wid) {
            return;
        }
        hookEl.insertAdjacentHTML('beforeend', adxTemplate.render({
            'slot': currSlot
        }));
        hookEl.setAttribute('data-adlib-hook-loaded', true);
    }
    Application.startAll(parent);
});