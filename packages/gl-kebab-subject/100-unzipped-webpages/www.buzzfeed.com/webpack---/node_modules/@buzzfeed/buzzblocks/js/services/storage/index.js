import client from '../client';

function getExpirationEntryKey(key) {
    return key + '|expiration';
}

function isExpired(key) {
    var expires = localStorage.getItem(getExpirationEntryKey(key));
    return expires && expires <= Date.now();
}

export default {
    /**
     * Creates storage entry.
     * @param {Object} options - entry creation parameters.
     * @param {String} options.key - entry key.
     * @param {String} options.value - entry value.
     * @param {Number} [options.expires] - entry lifetime in milliseconds.
     * @return {void}
     */
    set(options) {
        if (!client.supportsLocalStorage || typeof options === 'undefined') {
            return;
        }

        localStorage.setItem(options.key, options.value);
        if (options.expires) {
            localStorage.setItem(getExpirationEntryKey(options.key), Date.now() + options.expires);
        }
    },

    /**
     * Reads storage entry.
     * @param {String} key - entry key.
     * @return {?String} - entry value or null;
     */
    get(key) {
        if (!client.supportsLocalStorage) {
            return null;
        }

        if (!isExpired(key)) {
            return localStorage.getItem(key);
        } else {
            this.remove(key);
        }

        return null;
    },

    /**
     * Creates session storage entry.
     * @param {Object} options - entry creation parameters.
     * @param {String} options.key - entry key.
     * @param {String} options.value - entry value.
     * @return {void}
     */
    sessionSet(options) {
        if (!client.supportsLocalStorage || typeof options === 'undefined') {
            return;
        }

        sessionStorage.setItem(options.key, options.value);
    },

    /**
     * Reads session storage entry.
     * @param {String} key - entry key.
     * @return {?String} - entry value or null;
     */
    sessionGet(key) {
        if (!client.supportsLocalStorage) {
            return null;
        }

        return sessionStorage.getItem(key);
    },

    /**
     * Removes storage entry.
     * @param {String} key - entry key.
     * @return {void}
     */
    remove(key) {
        if (client.supportsLocalStorage) {
            localStorage.removeItem(getExpirationEntryKey(key));
            localStorage.removeItem(key);
        }
    },

    /**
     * Removes all storage entries.
     * @return {void}
     */
    clear() {
        if (client.supportsLocalStorage) {
            localStorage.clear();
        }
    }
};