import ajax from '../ajax';
import localization from '../localization';
import util from '../util/standalone';
import bzfd from '../bzfd';
import {
    flow
} from 'lodash';
import {
    getUserId
} from '@buzzfeed/bf-utils/lib/userid';
import {
    buzzes
} from '@buzzfeed/user-pathing/session';

const PARAMS_NAME_MAP = {
    buzzId: 'buzz_id',
    pageSize: 'page_size',
    clientId: 'client_id',
};

/**
 * Creates a query string from supplied parameters.
 * Uses PARAMS_NAME_MAP to map key names to what recsys expect.
 * @param {Object} params - all parameters for the requests
 */
const toQueryString = params => util.objectToQueryString(
    Object.keys(params)
    .filter(key => !!params[key])
    .reduce((res, key) => {
        res[PARAMS_NAME_MAP[key] || key] = params[key];
        return res;
    }, {})
);

const makeDataSource = ({
        data_source_metadata = {}
    } = {}) =>
    encodeURIComponent(
        JSON.stringify({
            upstream: 'recsys_api',
            ...data_source_metadata
        })
    );

/**
 * Adds recsys_api datasource
 * @param {Object} item - response item.
 * @returns {Object}
 */
const withDataSource = item => ({
    ...item,
    data_source: makeDataSource(item)
});

/**
 * Changes image dimensions of an item based on image crop param
 * @param {String} imageCrop - standard image crop parameter, i.e. "wide"
 * @returns {Function}
 */
const withImageCrop = imageCrop =>
    item => {
        if (imageCrop === 'wide') {
            return {
                ...item,
                image: item.image && item.image.replace('_dblbig', '_dblwide').replace('_big', '_wide')
            };
        }

        return item;
    };

/**
 * Maps canonical URL of an item to its `url` property.
 * `buzz` items have it set correctly, `video` items are patched.
 * @param {Object} item - response item.
 * @returns {Object}
 */
const withCanonicalPath = item => {
    if (item.type === 'video') {
        return {
            ...item,
            url: item.canonical_path,
        };
    }

    return item;
};

const mapResults = ({
        imageCrop
    }) =>
    data => {
        const mapItem = flow(
            withImageCrop(imageCrop),
            withDataSource,
            withCanonicalPath
        );

        return data.results.map(mapItem);
    };

/**
 * Fetches recsys endpoint and applies some transformations on results.
 * Non empty rest params are added as `key=value` to the query string.
 * @export
 * @param {string} [endpoint='web/bpager']
 * @param {*} [{ buzzId = bzfd.buzzId, edition = localization.getEdition(), imageCrop = 'big', pageSize = 5, ...params }={}]
 * @returns {Promise<Array>}
 */
export function fetch(endpoint = 'web/bpager', {
    buzzId = bzfd.buzzId,
    edition = localization.getEdition(),
    imageCrop = 'big',
    pageSize = 5,
    filter = buzzes.all(),
    ...params
} = {}) {
    return Promise.race([
        getUserId({
            env: BZFD.Config.env
        }),
        new Promise(resolve => {
            setTimeout(() => resolve(false), 1500);
        })
    ]).then(userId => {
        if (userId) {
            params['clientId'] = String(userId);
        }

        if (endpoint.includes('?')) {
            throw new Error('Endpoint cannot contain query params.');
        }

        const query = toQueryString({
            edition,
            pageSize,
            buzzId,
            filter,
            ...params
        });
        const url = BZFD.Config.recsys_api_origin + '/' + endpoint + query;

        return ajax.get(url, {
            skipAuth: true
        }).then(mapResults({
            imageCrop
        }));
    });
}

export default {
    get: fetch
};