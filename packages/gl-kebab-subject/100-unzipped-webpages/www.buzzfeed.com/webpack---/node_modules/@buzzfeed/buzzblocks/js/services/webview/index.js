/**
 * A service to discriminate between various types of webviews.
 */
var webview = {};

/**
 * Checks if the browser is a mobile app webview. It uses query params set by CDN (Fastly) to make
 * that determination.
 * @return {Boolean} `true` if a mobile app webview is detected, `false` otherwise
 */
export const isMobileApp = ((url = window.CDN_URL ? window.CDN_URL : window.location.href) =>
    url.search('[?&]?s=mobile_app([&#]|$)') !== -1);
webview.isMobileApp = isMobileApp;

/**
 * Checks if the browser is a news app webview. It uses query params set by CDN (Fastly) to make
 * that determination.
 * @return {Boolean} `true` if a news app webview is detected, `false` otherwise
 */
export const isNewsApp = ((url = window.CDN_URL ? window.CDN_URL : window.location.href) =>
    url.search('[?&]?app=news([&#]|$)') !== -1);
webview.isNewsApp = isNewsApp;

/**
 * Checks if the browser is the news2 app webview. It uses query params set by CDN (Fastly) to make
 * that determination. News 2 is the latest version of news.  It is able to perform more tasks than
 * the original app thus needing the distinction
 * @return {Boolean} `true` if a news2 app webview is detected, `false` otherwise
 */
export const isNews2App = ((url = window.CDN_URL ? window.CDN_URL : window.location.href) =>
    url.search('[?&]?app=buzznews([&#]|$)') !== -1);
webview.isNews2App = isNews2App;

/**
 * Checks if the browser is an IOS app webview. It uses query params set by CDN (Fastly) to make
 * that determination.
 * @return {Boolean} `true` if a IOS app webview is detected, `false` otherwise
 */
export const isIOS = ((url = window.CDN_URL ? window.CDN_URL : window.location.href) =>
    url.search('[?&]?os=ios([&#]|$)') !== -1);
webview.isIOS = isIOS;

/**
 * Checks if the browser is an Android app webview. It uses query params set by CDN (Fastly) to make
 * that determination.
 * @return {Boolean} `true` if a Android app webview is detected, `false` otherwise
 */
export const isAndroid = ((url = window.CDN_URL ? window.CDN_URL : window.location.href) =>
    url.search('[?&]?os=android([&#]|$)') !== -1);
webview.isAndroid = isAndroid;

/**
 * Adds a handler for triggering scroll events from the app's webview
 * @param {Object?} nsp - namespace where the handler is created (typically window)
 * @param {ViewportMonitor} viewportMonitor - instance from the viewport monitor service
 */
export const addNotificationHandler = (nsp, viewportMonitor) => {
    const notifyWebview = ev => {
        if (ev.type === 'scroll') {
            viewportMonitor.triggerAll(ev.data.offset);
        }
    };

    if (!nsp.BF) {
        nsp.BF = {
            notifyWebview
        };
    } else {
        const oldNotify = nsp.BF.notifyWebview;
        nsp.BF.notifyWebview = ev => {
            oldNotify(ev);
            notifyWebview(ev);
        };
    }
};

export default webview;