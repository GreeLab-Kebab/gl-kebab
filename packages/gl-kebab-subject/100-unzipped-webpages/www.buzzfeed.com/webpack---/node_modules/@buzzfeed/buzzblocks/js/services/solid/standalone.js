import {
    some
} from 'lodash';
import {
    EventTarget
} from 't3js';


/** Reference window through an intermediate variable so it can be patched in tests */
const _window = window;


/**
 * Solid breakpoints
 * @type {Object}
 */
const SIZES = {
    xs: '(max-width:39.9rem)',
    sm: '(min-width:40rem) and (max-width:51.9rem)',
    md: '(min-width:52rem) and (max-width:63.9rem)',
    lg: '(min-width:64rem)'
};

/**
 * Media query to see if the current device is retina
 * @type {Object}
 */
const RETINA_MEDIA_QUERY_MATCH_STRING = '(-webkit-min-device-pixel-ratio: 2)';

function _makeSizeMediaQuery(bp) {
    return `screen and ${SIZES[bp]}`;
}


/** @type {Object} Main export */
let solid;


const breakpointObserver = new EventTarget();
breakpointObserver.init = function() {
    Object.keys(SIZES).forEach((bp) => {
        const query = _window.matchMedia(_makeSizeMediaQuery(bp));
        query.addListener((ev) => {
            if (ev.matches) {
                breakpointObserver.fire(bp);
                breakpointObserver.fire('match', {
                    breakpoint: bp
                });
            }
        });
        breakpointObserver[bp] = query;
    });
};
breakpointObserver.init();


/** @type {Object} */
solid = {
    /**
     * Returns the window innerWidth as a number
     * @return {number}
     */
    _getWindowWidth: () => {
        return Number(_window.innerWidth);
    },

    /**
     * Returns true if resolution is at least 300dpi
     * @return {boolean} - True or false
     * @deprecated
     */
    _isRetinaDevice: () => {
        return _window.matchMedia(RETINA_MEDIA_QUERY_MATCH_STRING).matches;
    },

    /**
     * Make a media query that represents a breakpoint
     * @see SIZES
     */
    _makeSizeMediaQuery,

    /**
     * Does the viewport currently match the given breakpoint?
     * @param {String} bp
     * @returns {Boolean}
     */
    _mediaMatches: (bp) => (bp in SIZES) ? breakpointObserver[bp].matches : false,

    isBreakpoint: (bp) => solid._mediaMatches(bp),

    /**
     * Are we currently at the xs Solid breakpoint?
     * @return {boolean}
     */
    isXsmall: () => solid._mediaMatches('xs'),

    /**
     * Are we currently at the small Solid breakpoint?
     * @return {boolean}
     */
    isSmall: () => solid._mediaMatches('sm'),

    /**
     * Are we currently at the md Solid breakpoint?
     * @return {boolean}
     */
    isMedium: () => solid._mediaMatches('md'),

    /**
     * Are we currently at the lg Solid breakpoint?
     * @return {boolean}
     */
    isLarge: () => solid._mediaMatches('lg'),

    /**
     * Returns `true` if current screen size matches any from `sizes`,
     * `false` otherwise
     * @param {Array} sizes - sizes to check: xs, sm, md or lg
     * @return {boolean} - True or false
     */
    isAny: (sizes = []) => some(sizes, solid._mediaMatches),

    isSmallerThan(bp, {
        inclusive = true
    } = {}) {
        if (bp === 'xs') {
            return inclusive ? solid.isXsmall() : false;
        } else if (bp === 'sm') {
            return inclusive ? solid.isAny(['xs', 'sm']) : solid.isXsmall();
        } else if (bp === 'md') {
            return inclusive ? solid.isAny(['xs', 'sm', 'md']) : solid.isAny(['xs', 'sm']);
        } else if (bp === 'lg') {
            return inclusive ? true : solid.isAny(['xs', 'sm', 'md']);
        }
        return false;
    },

    isLargerThan(bp, {
        inclusive = true
    } = {}) {
        if (bp === 'xs') {
            return inclusive ? true : solid.isAny(['sm', 'md', 'lg']);
        } else if (bp === 'sm') {
            return inclusive ? solid.isAny(['sm', 'md', 'lg']) : solid.isAny(['md', 'lg']);
        } else if (bp === 'md') {
            return inclusive ? solid.isAny(['md', 'lg']) : solid.isLarge();
        } else if (bp === 'lg') {
            return inclusive ? solid.isLarge() : false;
        }
        return false;
    },

    /**
     * Returns if window is max width of 40rem | solid-xs
     * @param {string} size - Solid size value
     * @return {boolean} - True or false
     */
    breakPoint: (size) => solid._mediaMatches(size),

    /**
     * @return {String} - breakpoint name to which current screen size matches
     */
    getBreakPoint() {
        var breakpoint;
        for (let size in SIZES) {
            if (solid.breakPoint(size)) {
                breakpoint = size;
                break;
            }
        }
        return breakpoint;
    },

    /**
     * Returns window width adjusted for retina
     * @return {int} - window width or 2x window width on retina
     */
    getWindowWidth: () => solid._isRetinaDevice() ?
        2 * solid._getWindowWidth() :
        solid._getWindowWidth(),

    get cssBreakpoints() {
        return {
            'xs': null,
            'sm': '40rem',
            'md': '52rem',
            'lg': '64rem'
        };
    },

    get breakpointObserver() {
        /* don't expose `fire` to public */
        return {
            on() {
                return breakpointObserver.on(...arguments);
            },
            off() {
                return breakpointObserver.off(...arguments);
            }
        };
    }
};

export default solid;