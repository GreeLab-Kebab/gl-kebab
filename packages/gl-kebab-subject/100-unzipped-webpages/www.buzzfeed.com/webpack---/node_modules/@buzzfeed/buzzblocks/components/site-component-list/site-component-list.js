import {
    Application
} from 't3js';
import apiService from '../../js/services/component-api';
import client from '../../js/services/client';
import dom from '../../js/services/dom';
import prepareTemplate from '../../js/services/nunjucks-env';
import scrollListener from '../../js/services/scroll-listener';
import sidebarModule from '../../js/services/sidebar-module';
import solid from '../../js/services/solid';
import globalEvents from '../../js/services/global-events';
import listTemplate from './site-component-list.html';


const template = prepareTemplate(listTemplate);

export const itemClass = 'js-scl-item';
export const pageLoadedEventPrefix = 'SCL-page-loaded--';


/**
 * Default SiteComponentList, others with different behaviour should ideally
 * extend from this.
 *
 * Example usage:
 *
 * <div data-module="site-component-list">
 *   <script type="text/x-config">
 *     {
 *       "unit": "trending",
 *       "unitUrl": "trending", // this can be any urlpath e.g. web/videos/trending/shuffle
 *       "unitType": "list",
 *       "unitName": "thumbstrip/trending",
 *       "subUnit": "trending_bottom",
 *       "color": "pink",
 *       "imageCrop": "wide",
 *       "loadXsmall": false,
 *       "loadSmall": false,
 *       "loadMedium": true,
 *       "loadLarge": true,
 *       "showNumber": true,
 *       "showImage": true,
 *     }
 *   </script>
 * </div>
 */

class SiteComponentList {
    /**
     * @param {Object} apiService - An object with a get(componentName, config) and returns a Promise
     * @param {Object} solid - A service which can detect the current browser resolution
     * @param {Object} ctx - t3 module context
     */
    constructor(_apiService, _solid, ctx) {
        this.apiService = _apiService;
        this.solid = _solid;

        this.loadedPageNumber = 0;
        this.isPageLoading = false;
        this.scrollListenerId = null;

        if (typeof ctx !== 'undefined') {
            this.element = ctx.getElement();
            this.contentElement = null;
            this.config = this.loadConfig(ctx);
        }
    }

    /**
     * Allows overriding of configuration on an already instantiated module
     */
    setConfig(k, v) {
        this.config[k] = v;
    }


    /**
     * @returns {Object} module - T3 module
     */
    generateModule() {
        return ctx => new SiteComponentList(this.apiService, this.solid, ctx);
    }

    /**
     * Loads the config, some values will have defaults set. You must explicitly
     * set all of the sizes which you want it to load
     *
     * @param {Object} context - T3 module context
     * @returns {Object}
     */
    loadConfig(context) {
        var title = context.getConfig('title') || 'Trending Now';
        return {
            unit: context.getConfig('unit') || 'unit-missing',
            unitUrl: context.getConfig('unitUrl') || context.getConfig('unit') || 'unit-missing',
            unitType: context.getConfig('unitType') || 'unitType-missing',
            unitName: context.getConfig('unitName') || '',
            subUnit: context.getConfig('subUnit') || '',
            loadXsmall: !!context.getConfig('loadXsmall'),
            loadSmall: !!context.getConfig('loadSmall'),
            loadMedium: !!context.getConfig('loadMedium'),
            loadLarge: !!context.getConfig('loadLarge'),
            title: title,
            shouldShowTitle: context.getConfig('shouldShowTitle') !== null ? context.getConfig('shouldShowTitle') : true,
            titleIcon: context.getConfig('titleIcon') || '',
            titleElement: context.getConfig('titleElement') || 'h2',
            showImage: !!context.getConfig('showImage'),
            showNumber: !!context.getConfig('showNumber'),
            color: context.getConfig('color') || 'pink',
            listClass: context.getConfig('listClass') || 'list-unstyled',
            itemClass: `${context.getConfig('itemClass') || 'xs-mt1'} ${itemClass}`,
            imgClass: context.getConfig('imgClass') || 'xs-relative xs-block xs-mb1',
            containerClasses: context.getConfig('containerClasses') || '',
            firstPage: context.getConfig('firstPage') || 1,
            pageSize: context.getConfig('pageSize') || 15,
            imageCrop: context.getConfig('imageCrop') || 'wide',
            variant: context.getConfig('variant') || '',
            baseUrl: window.BZFD.Config.webRoot || '',
            service: document.documentElement.getAttribute('data-app') || '',
            params: context.getConfig('params') || '',
            module: context.getConfig('module') || '',
            infiniteScroll: context.getConfig('infiniteScroll') || false,
            loadAds: context.getConfig('loadAds'),
            requestParams: context.getConfig('requestParams') || {},
            moreTitle: context.getConfig('moreTitle') || '',
            morePath: context.getConfig('morePath') || '',
            containerAttributes: context.getConfig('containerAttributes') || [{
                'key': 'role',
                'value': 'region'
            }, {
                'key': 'aria-label',
                'value': title
            }],
            ariaLabel: context.getConfig('ariaLabel') || 'Article List',
        };
    }

    /**
     * Returns the template contents
     * @returns {string} template
     */
    loadTemplate() {
        return template;
    }

    /**
     * Renders the actual template, called from promise
     * @param {Object} data - Data from an XHR to the site_component_api
     */
    renderTemplate(data) {
        if (!this.contentElement) {
            this.contentElement = dom.findOne(this.element, '.js-sidebar-content');
        }

        let element = this.loadedPageNumber === 1 ? this.element : this.contentElement;
        let templateData = Object.assign({
            page: this.loadedPageNumber,
            buzzes: []
        }, this.config);

        templateData.buzzes = data.map((item, index) => {
            return {
                ...item,
                unit: this.config.unit,
                unitUrl: this.config.unitUrl,
                unitType: this.config.unitType,
                unitName: this.config.unitName,
                subUnit: this.config.subUnit,
                params: this.config.params,
                dataSource: item.data_source,
                position: index,
                number: (this.loadedPageNumber - 1) * this.config.pageSize + index + 1,
            };
        }, this);

        if (templateData.buzzes.length === 0) {
            return;
        }

        // render component template
        sidebarModule.renderTemplate({
            element: element,
            template: this.loadTemplate(),
            templateData
        });
    }

    /**
     * Code that runs when this module has been processed.
     */
    loadComplete() {
        let idxInParent;
        if ('idxInParent' in this.config) {
            idxInParent = this.config.idxInParent;
        } else if ('idxInParent' in this.element.dataset) {
            idxInParent = Number(this.element.dataset.idxInParent);
        }
        Application.broadcast(
            globalEvents.componentLoaded, {
                id: this.element.id,
                idxInParent
            }
        );
    }

    pageLoadComplete({
        pageSize
    }) {
        window.bfa('plugin/binder/trigger', {
            type: 'updateTargets'
        });
        Application.broadcast(
            `${pageLoadedEventPrefix}${this.config.unit}`, {
                id: this.element.id,
                pageSize
            }
        );
    }

    /**
     * Loads API page
     * @returns {Promise}
     */
    loadPage() {
        this.isPageLoading = true;
        let componentConfig = {
            page: this.config.firstPage + this.loadedPageNumber,
            pageSize: this.config.pageSize,
            imageCrop: this.config.imageCrop,
            origin: this.config.baseUrl,
            service: this.config.service,
            variant: this.config.variant,
        };
        return this.apiService.get(
                this.config.unitUrl, { ...componentConfig,
                    ...this.config.requestParams
                },
            )
            .then(data => {
                if (data.length < this.config.pageSize) {
                    this.removeScrollListener();
                }
                this.loadedPageNumber++;
                this.renderTemplate(data);
                this.isPageLoading = false;
                this.pageLoadComplete({
                    pageSize: data.length
                });
            })
            .catch(e => {
                this.removeScrollListener();
                this.isPageLoading = false;
                throw e;
            });
    }

    /**
     * Checks module position to to load more feed items
     * @returns {void}
     */
    scrollListenerСallback() {
        if (this.isPageLoading) {
            return;
        }
        if (dom.getViewPosition(this.element, client.getViewportHeight()).isNearBottom()) {
            this.loadPage();
        }
    }

    /**
     * Add scroll listener to load more feed items
     * when user scrolled to the bottom of the page
     * @returns {void}
     */
    addScrollListener() {
        this.scrollListenerId = scrollListener.add({
            throttleTimeout: 0,
            callback: () => this.scrollListenerСallback(),
        });
    }

    /**
     * Remove scroll listener handler
     * @returns {void}
     */
    removeScrollListener() {
        scrollListener.remove(this.scrollListenerId);
        this.scrollListenerId = null;
    }

    /**
     * Initializes the module (set as module.init())
     */
    init() {
        if ((this.config.loadXsmall && this.solid.isXsmall()) ||
            (this.config.loadSmall && this.solid.isSmall()) ||
            (this.config.loadMedium && this.solid.isMedium()) ||
            (this.config.loadLarge && this.solid.isLarge())) {

            this.loadPage()
                .then(this.loadComplete.bind(this));
            if (this.config.infiniteScroll) {
                this.addScrollListener();
            }
        } else {
            this.loadComplete();
        }
        return null;
    }

    /**
     * Initializes the module (set as module.destroy())
     */
    destroy() {
        this.apiService = null;
        this.solid = null;

        this.element = null;
        this.contentElement = null;
        this.config = null;

        this.loadedPageNumber = 0;
        this.isPageLoading = false;
        this.scrollListenerId = null;
    }
}

export default SiteComponentList;

Application.addModule(
    'site-component-list',
    new SiteComponentList(apiService, solid).generateModule()
);