import {
    objectToQueryString
} from '@buzzfeed/bf-utils/lib/query-string';
import abeagle from '../abeagle';
import ajax from '../ajax';
import bzfd from '../bzfd';
import flexpro from '../flexpro';
import localization from '../localization';


const basepath = `/site-component`;

/**
 * Creates a query string from supplied object.
 * Only supports a predefined list of options.
 * @param {Object} options - request options.
 * @return {String} - ${key}=${value} pairs joined with '&'.
 */
const search = function(options) {
    let mappings = {
        buzzIds: 'buzz_ids',
        page: 'page',
        pageSize: 'page_size',
        imageCrop: 'image_crop',
        advertiserId: 'advertiser_id',
        showName: 'show_name',
        keywords: 'keywords',
        fields: 'fields',
        q: 'q',
        qFuzzy: 'q__fuzzy',
        username: 'username',
        areaId: 'area_id',
        startId: 'start_id',
        startFrom: 'start_from',
        convertLinks: 'convert_links',
        platform: 'platform'
    };
    const pairs = Object.keys(mappings).reduce((params, key) => {
        let mappedKey = mappings[key];
        let value = options[key];
        /* eslint-disable */
        if (!!value) {
            params[mappedKey] = value;
        }
        /* eslint-enable */
        return params;
    }, {});

    return pairs;
};

/**
 * Performs a GET request to the SCA endpoint.
 * @param {Object} component - component object.
 * @param {Object} options - request options.
 * @param {String} [variant] - component variant.
 */
const load = (component, options, variant, version = 'v1') => {
    const uri = (variant && variant !== 'control') ? `${component.uri}/${variant}` : component.uri;
    const origin = options.origin || bzfd.webRoot;
    let baseUrl = `${origin}${basepath}/${version}`;
    const edition = component.edition(localization.getEdition(options.service), variant);
    if (edition) {
        baseUrl = `${baseUrl}/${edition}`;
    }
    const params = search(options);
    Object.assign(params, options.extraParams);
    const paramsStr = (Object.keys(params).length > 0) ? objectToQueryString(params) : '';
    return ajax.get(`${baseUrl}/${uri}${paramsStr}`, {
            skipAuth: true
        })
        .then(data => Promise.resolve(component.view(data)));
};

const defaultView = data => data.results;
const defaultEdition = current => current;
const fallbackToUS = current => {
    // Use US for Canada
    if (current === 'en-ca') {
        return 'en-us';
    }
    return current;
};

const components = {
    'shopping-sidebar': {
        uri: 'shopping-sidebar',
        view: defaultView,
        edition: () => 'en-us'
    },
    'shopping-epv-with-trending': {
        uri: 'shopping-epv-with-trending',
        view: defaultView,
        edition: () => 'en-us'
    },
    'big-stories': {
        uri: 'big-stories',
        view: defaultView,
        edition: () => 'en-us'
    },
    'bottom-feed': {
        uri: 'bottom-feed',
        view(data) {
            return data.results.map(flexpro.pickVariation);
        },
        // Use US bottom-feed for Canada OOSITE-1030
        edition: fallbackToUS,
    },
    'buzzstats': {
        uri: 'buzzstats',
        view: data => data,
        edition: () => 'en-us'
    },
    'qcu': {
        uri: 'qcu',
        view: data => data,
        edition: () => 'en-us'
    },
    'thumbstrip': {
        uri: 'thumbstrip',
        view: defaultView,
        // Use US Thumbstrip for Canada OOSITE-1019
        edition: fallbackToUS,
    },
    'trending': {
        uri: 'trending',
        view: defaultView,
        edition: defaultEdition
    },
    'trending-no-quizzes': {
        uri: 'trending-no-quizzes',
        view: defaultView,
        edition: defaultEdition
    },
    'trending-quizzes': {
        uri: 'trending-quizzes',
        view: defaultView,
        edition: defaultEdition
    },
    'trending-sfw': {
        uri: 'trending-sfw',
        view: defaultView,
        edition: defaultEdition
    },
    'trending-on-buzzfeed': {
        uri: 'trending-on-buzzfeed',
        view: defaultView,
        edition: defaultEdition
    },
    'trending-on-buzzfeednews': {
        uri: 'trending-on-buzzfeednews',
        view: defaultView,
        edition: defaultEdition
    },
    'morebuzz': {
        uri: 'morebuzz',
        view: defaultView,
        edition(current) {
            if (['es'].indexOf(current) > -1) {
                return 'en-us';
            }
            return current;
        }
    },
    'morenews': {
        uri: 'morenews',
        view: defaultView,
        edition(current) {
            if (['en-uk', 'en-us', 'fr-fr'].indexOf(current) > -1) {
                return current;
            }
            return 'en-us';
        }
    },
    'news-top-bar': {
        uri: 'news-top-bar',
        view: defaultView,
        edition: () => 'en-us'
    },
    'section': {
        uri: 'section',
        view: defaultView,
        edition(current, variant = '') {
            if (variant === 'world') {
                if (['en-au'].indexOf(current) > -1) {
                    return 'en-us';
                }
            }
            return current;
        }
    },
    'similar': {
        uri: 'similar',
        view: defaultView,
        edition: defaultEdition
    },
    'related-tag': {
        uri: 'related-tag',
        view: defaultView,
        edition: () => 'en-us'
    },
    'outsideyourbubble': {
        uri: 'outsideyourbubble',
        view: defaultView,
        edition: defaultEdition
    },
    'latest-advertiser-posts': {
        uri: 'latest-advertiser-posts',
        view(data) {
            return {
                next: data.next,
                results: data.results
            };
        },
        edition: defaultEdition
    },
    'nationaldesk': {
        uri: 'nationaldesk',
        view: defaultView,
        edition: defaultEdition
    },
    'investigations': {
        uri: 'investigations',
        view: defaultView,
        edition: defaultEdition
    },
    'top-posts': {
        uri: 'top-posts',
        view: defaultView,
        edition(current) {
            switch (current) {
                case 'en-uk':
                    return 'en-gb';
                case 'es':
                    return 'es-es';
                default:
                    return current;
            }
        }
    },
    'top-shopping': {
        uri: 'top-shopping',
        view: defaultView,
        edition(current) {
            if (['en-uk', 'en-us'].indexOf(current) > -1) {
                return current;
            }
            return 'en-us';
        }
    },
    'top-quizzes': {
        uri: 'top-quizzes',
        view: defaultView,
        edition(current) {
            if (['ja-jp', 'fr-fr', 'pt-br'].indexOf(current) > -1) {
                return current;
            }
            return 'en-us';
        }
    },
    'hall-of-fame': {
        uri: 'hall-of-fame',
        view: defaultView,
        edition() {
            return 'en-us';
        }
    },
    'popular-video': {
        uri: 'popular-video',
        view: defaultView,
        edition: defaultEdition
    },
    'search': {
        uri: 'search',
        view: defaultView,
        edition: defaultEdition
    },
    'breaking-bar': {
        uri: 'breaking-bar',
        view(data) {
            if (data.results.length) {
                return data.results[0];
            } else {
                return null;
            }
        },
        edition: defaultEdition
    },
    'top-user-posts': {
        uri: 'top-user-posts',
        view: defaultView,
        edition: defaultEdition
    },
    'masthead': {
        uri: 'masthead',
        view(data) {
            return data.data[0];
        },
        edition: defaultEdition
    },
    'branded-buzz': {
        uri: 'branded-buzz',
        view(data) {
            return data.buzzes[0].buzz;
        },
        edition: () => ''
    },
    'bfp': {
        uri: 'bfp',
        view(data) {
            return data.results[0];
        },
        edition: () => ''
    },
    // @todo SITE-6493 should be removed after cleanup /bpager/static/js/modules/related-tag-content.js
    'packages': {
        uri: 'packages',
        view: (data) => data.results,
        edition: defaultEdition
    },
    'packages-all-data': {
        uri: 'packages',
        view: (data) => data,
        edition: defaultEdition
    },
    'gift-guide-nav': {
        uri: 'gift-guide-nav',
        view: (data) => data.results[0],
        edition: () => '',
    },
    'good-deals': {
        uri: 'good-deals',
        view: (data) => data,
        edition: () => ''
    }
};

export default {
    /**
     * Requests data from SCA for a specified component.
     * @param {String} componentName - name of the component to fetch.
     * @param {Object} options - request options.
     * @param {Number} [options.page] - index of the requested feed page.
     * @param {Number} [options.pageSize] - number of items in the response.
     * @param {String} [options.imageCrop] - size of images in the items.
     * @param {String} [options.showName] - show_name used for Omnisearch video lookup.
     * @param {String} [options.variant] - component variation. Does not override ABeagle response.
     * @param {String} [options.origin] - overrides request domain name.
     * @param {String} [options.service] - name of the consumer service for picking an A/B test.
     * @param {String} [options.keywords] - main key of filed for Omnisearch buzzes search.
     * @param {String} [options.fields] - name fields which we want to return for Omnisearch buzzes search.
     * @param {String} [options.q] - query sting for Omnisearch buzzes search.
     * @param {String} [options.qFuzzy] - True if need to add fuzziness to Omnisearch buzzes search.
     * @param {String} [options.startId] - buzz ID to be appended to request URL in order to fetch next page of data.
     * @param {String} [options.startFrom] - buzz timestamp to be appended to request URL in order to fetch next page of data.
     * @param {String} [options.convertLinks] - True if need convert amazon links
     * @param {String} [options.platform] - current platform based on solid size defs
     * @param {String} version - numeric designator of component version requested from SCA.
     * @return {Promise} - resolved with component data.
     */
    get(componentName, options = {}, version = 'v1') {
        const component = components[componentName];
        if (!component) {
            return Promise.reject(`Component ${componentName} is not supported`);
        }

        return abeagle.getExperimentVariant(`${options.service}_${componentName}_variants`)
            .then(variant => load(component, options, variant || options.variant, version))
            .catch(() => load(component, options, options.variant, version));
    }
};