import {
    loadScript
} from '@buzzfeed/bf-utils';
import {
    queryStringToObject
} from '@buzzfeed/bf-utils/lib/query-string';
import bzfd from '../bzfd';
import cookies from '../cookies';
import webview from '../webview';
import {
    isSafari
} from '../util/standalone';


/**
 * @see https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/CMP%20JS%20API%20v1.1%20Final.md
 *
 * @see https://help.quantcast.com/hc/en-us/articles/360003814853-Technical-Implementation-Guide
 */
// namespace for easier testing
const util = {
    isSafari,
    loadScript,
    queryStringToObject
};

const host = window.location.hostname;
const QUANTCAST = 'https://quantcast.mgr.consensu.org/choice';
const CMP_SRC = `${QUANTCAST}/3aud4J6uA4Z6Y/${host}/choice.js`;
const CMP_FALLBACK = `${QUANTCAST}.js`;
const appFallback = webview.isMobileApp();

let _initializing;

const service = {
    get gdprQueryParam() {
        return queryStringToObject(window.location.search).gdpr || '';
    },
    /**
     * checks against BF cookies if needs consent or
     * if has the query params for dev purposes:
     * gdpr=quantcast will require consent, but not show the CMP
     *    if cookies exist from a previous consent accepting
     * gdpr=display-consent will always show the CMP UI
     * @return {Boolean} true if BF needs consent
     */
    get needsConsent() {
        const enforceGdpr = (this.gdprQueryParam === 'quantcast' || this.gdprQueryParam === 'display-consent'); // forcing to see
        if (
            appFallback || // not on app fallback
            (bzfd.isDev && !enforceGdpr) // not on dev enviornments but allow enforce
        ) {
            return false;
        }
        let cookie = cookies.get('gdpr');
        if (typeof cookie === 'string') {
            cookie = !!cookie; // cast "true" as boolean
        }
        return enforceGdpr || cookie || false;
    },
    /**
     * Purpose ids the publisher is requesting consent for.
     * If this array is null or empty, it will default to all configured purposes.
     * PurposeId's 1-24 indicate standard purposes, while 25-88 indicate custom (publisher-configured) purposes
     *
     * 1 - Information storage and access
     * 2 - Personalisation
     * 3 - Ad selection, delivery, reporting
     * 4 - Content selection, delivery, reporting
     * 5 - Measurement
     */
    get publisherPurposeIds() {
        return [1, 2, 3, 4];
    },
    /**
     * Vendor ids (as identified in the Global Vendor List) for which consent is being requested.
     * If this array is null or empty, the operation will return consent status for all vendors in the vendor list
     */
    get vendorIds() {
        return [];
    },
    /**
     * Loads the CMP (Consent Management Provider) script and initializes it
     * Assumes `window.__cmp` is defined in the page head
     */
    init() {
        const displayConsent = (this.gdprQueryParam === 'display-consent');
        if (_initializing) {
            return _initializing;
        }
        _initializing = util.loadScript(`${CMP_SRC}?timestamp=${Date.now()}`)
            .catch(() => {
                return util.loadScript(CMP_FALLBACK);
            })
            .then(() => {
                if (displayConsent) {
                    window.__cmp('displayConsentUi');
                }
            });
        return _initializing;
    },
    /**
     * Promisifies the `window.__cmp` call
     * @param {String} command - command name to send to `window.__cmp`
     * @param {*} parameter - command parameter
     * @returns {Promise} - is settled when `window.__cmp` runs the command and calls the callback:
     *   resolves when the callback is called with `success: true`,
     *   rejects when the callback is called with `success: false`
     */
    cmpCall(command) {
        return new Promise((resolve, reject) => {
            window.__cmp(...arguments, (data, success) => {
                if (!success) {
                    return reject({
                        success,
                        data,
                        error: new Error(`"${command}" failed`)
                    });
                }
                return resolve({
                    success,
                    data
                });
            });
        });
    },
    /**
     * @param {Array} [vendorIds=[]] - vendor ids (as identified in the Global Vendor List)
     *   for which consent is being requested. If vendorIds is null or empty, the operation will return
     *   consent status for all vendors in the vendor list
     * @returns {Promise}
     */
    getVendorConsents(vendorIds = service.vendorIds) {
        return service.cmpCall('getVendorConsents', vendorIds);
    },
    /**
     * @param {Array} [purposeIds=[1, 2, 3, 4]] - purpose ids the publisher is requesting consent for.
     *   If this array is null or empty, it will default to all configured purposes.
     *   PurposeId's 1-24 indicate standard purposes, while 25-88 indicate custom (publisher-configured) purposes
     * @returns {Promise}
     */
    getPublisherConsents(purposeIds = service.publisherPurposeIds) {
        return service.cmpCall('getPublisherConsents', purposeIds);
    },
    /**
     * takes no other paramters, fetches special google consent
     */
    getGooglePersonalization() {
        return service.cmpCall('getGooglePersonalization');
    },
    handleCmpMsg(event) {
        let msgIsString = typeof event.data === 'string';
        let json;
        if (msgIsString) {
            json = event.data.indexOf('__cmpCall') !== -1 ? JSON.parse(event.data) : {};
        } else {
            json = event.data;
        }
        if (json.__cmpCall) {
            let i = json.__cmpCall;
            window.__cmp(i.command, i.parameter, function(retValue, success) {
                let returnMsg = {
                    '__cmpReturn': {
                        'returnValue': retValue,
                        'success': success,
                        'callId': i.callId
                    }
                };
                event.source.postMessage(msgIsString ? JSON.stringify(returnMsg) : returnMsg, '*');
            });
        }
    },
};

export default service;