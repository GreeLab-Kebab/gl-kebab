import {
    Application
} from 't3js';
import alu from '../../services/affiliate-links';
import bzfd from '../../services/bzfd';
import dom from '../../services/dom';
import util from '../../services/util';
import {
    instrument
} from '../../services/metrics';

const EXCLUDED_PATHNAMES = [
    '/bpage-preview/'
];

const EXCLUDED_CATEGORIES = [
    'advertiser',
    'aunews',
    'business',
    'canadanews',
    'community',
    'francenews',
    'japannews',
    'lgbt',
    'politics',
    'quickpost',
    'science',
    'uknews',
    'usnews',
    'ukpolitics',
    'world',
];

const AMAZON_EXTENSION = new RegExp(/com\.au|com\.br|com\.mx|co\.uk|co\.jp|com|ca|in/);
const AMAZON_PREFIX = new RegExp(/\b(?:https?:\/\/)?(?:www\.)?amazon\./);
const AMAZON_CONVERTED_RE = new RegExp(`(${AMAZON_PREFIX.source})(${AMAZON_EXTENSION.source})(?:\\/.*)?(?:&|\\?)(tag=[^&]*).*`);
const AMAZON_CONVERTED_RE_GROUPS = {
    prefix: 1,
    extension: 2,
    tag: 3
};
const AMAZON_DOMAIN_RE = new RegExp(`(${AMAZON_PREFIX.source})(${AMAZON_EXTENSION.source})(?:\\/|\\?|$)`);
const AMZN_DOMAIN_RE = /\b(?:https?:\/\/)?(?:www\.)?amzn\./;

// Amazon's OneLink script overwrites affiliate links on every click.  While it is being used, we need to modify the ascsubtag
// again each time (via _modifyHref).
const ONELINK_ENABLED = true;

class AmazonSubtagModifier {
    constructor(context) {
        this.context = context;
        this._element = context.getElement();
        this._id = context.getConfig('id');

        this.onauxclick = this.onclick;
        this.oncontextmenu = this.onclick;
    }

    /**
     * Whether or not amazon subtag modification should be allowed
     * @returns {Boolean} - true if allowed
     */
    get isEnabled() {
        const window = this.context.getGlobal('window');
        const currentPath = window.location.pathname;
        return !(
            // excluded by path name
            (currentPath.length && EXCLUDED_PATHNAMES.some(pathname => currentPath[0].indexOf(pathname) === 0))
            // excluded by category
            ||
            EXCLUDED_CATEGORIES.includes((bzfd.category || '').toLowerCase())
        );
    }

    /**
     * Get href attribute of a given element
     * @param {HTMLElement} targetEl - link element
     * @returns {String} - value of href or an empty string
     */
    _getHref(targetEl) {
        var href = targetEl instanceof Element ? dom.getAttr(targetEl, 'href') : '';
        return href || '';
    }

    /**
     * Check if link from amazon domain
     * @param {String} href - link url
     * @returns {Boolean} - true if link from amazon domain
     */
    _isAmazonDomain(href) {
        return !!href && typeof href === 'string' && !!href.match(AMAZON_DOMAIN_RE);
    }

    /**
     * Check if link is a shortened url
     * @param {String} href - link url
     * @returns {Boolean} - true if link is shortened
     */
    _isShortenedUrl(href) {
        return !!href && typeof href === 'string' && !!href.match(AMZN_DOMAIN_RE);
    }

    /**
     * Check if is converted amazon link
     * @param {String} href - link url
     * @returns {Boolean} - true if converted amazon link
     */
    _isAmazonLink(href) {
        if (!href || typeof href !== 'string') {
            return false;
        }
        const amazonMatch = href.match(AMAZON_CONVERTED_RE);
        const tagIndex = AMAZON_CONVERTED_RE_GROUPS['tag'];
        return !!(amazonMatch && amazonMatch.length > tagIndex && amazonMatch[tagIndex].length);
    }

    /**
     * Track pixiedust broken affiliate link event
     * @param {String} url - broken affiliate link
     * @returns {void}
     */
    _pdAlert(url) {
        util.bfaTrack('track/click/affiliate-link', {
            n: url,
            l: 'affiliate-error-link',
            d: this._id,
        });
    }

    /**
     * Rewrites 'data-origin' attribute for a all amazon links of element
     * @param {Object} data - containing origin and subBuzzId
     * @returns {void}
     */
    _updateDataOriginAttr(data) {
        if (
            typeof data['origin'] === 'undefined' || !data['origin'] ||
            (this._id !== data['subBuzzId'] && data['subBuzzId'] !== 'all')
        ) {
            return;
        }

        const links = dom.find(this._element, 'a');
        util.each(links, (i, targetEl) => {
            const href = this._getHref(targetEl);
            if (this._isAmazonLink(href)) {
                // set origin to attr so data isn't lost during onelink overwrite
                dom.setAttr(targetEl, {
                    'data-origin': data['origin']
                });
                // remove class to allow _modifyHREF
                if (!ONELINK_ENABLED) {
                    dom.removeClass(targetEl, 'js-amazon-subtag-modified');
                }
            }
        });
    }

    /**
     * Extract any data-subtag-* attributes so that we can add them to the amazon subtags
     * Otherwise they are overwritten by the amazon onelink script on every click event
     * @param {HTMLElement} targetEl - the element whose attributes we are collecting
     * @returns {Object}, default {}
     */
    _getSubtagAttributes(targetEl) {
        if (!targetEl || !targetEl.attributes) {
            return {};
        }
        const subtags = {};
        util.each(targetEl.attributes, (i, attr) => {
            if (attr.nodeName.match(/^data-subtag/)) {
                subtags[attr.nodeName.replace(/^data-subtag-/, '')] = attr.nodeValue;
            }
        });
        return subtags;
    }

    /**
     * Rewrites 'href' attribute for a target element
     * If target's href exists and matches the amazon domain convert that URL using the subtag
     * update service. Apply converted URL to href of target element
     * @param {HTMLElement} targetEl - the element
     * @returns {void}
     */
    _modifyHREF(targetEl) {
        if (!ONELINK_ENABLED && dom.hasClass(targetEl, 'js-amazon-subtag-modified')) {
            return;
        }

        const href = this._getHref(targetEl);
        if (this._isAmazonLink(href)) {
            const convertedURL = alu._modifyAmazonURL(href, {
                origin: dom.getAttr(targetEl, 'data-origin'),
                subtags: this._getSubtagAttributes(targetEl),
            });
            dom.setAttr(targetEl, {
                'href': convertedURL
            });
            dom.addClass(targetEl, 'js-amazon-subtag-modified');
        } else if (this._isAmazonDomain(href)) {
            this._pdAlert(href);
        } else if (this._isShortenedUrl(href)) {
            instrument('affiliate_link', 'error.short', {
                url: href
            });
        }
    }

    /**
     * Intercept t3js broadcasts to respond to amazon update link events
     * @param {String} msg - the broadcast message
     * @param {Object} data - data accompanying message
     */
    onmessage(msg, data) {
        if (msg === 'amazon-update-origin') {
            this._updateDataOriginAttr(data);
        }
    }

    /**
     * Handles onclick event.
     * @param {Event} ev - normalized DOM event.
     * @returns {void}
     */
    onclick(ev) {
        if (!ev || !ev.target || !this.isEnabled) {
            return;
        }
        //check target element for closest anchor element (ie. if clicked
        //element is a non-anchor nested within one; like a <span>)
        const targetAnchor = dom.closest(ev.target, 'a');
        if (targetAnchor) {
            this._modifyHREF(targetAnchor);
        }
    }

    onmouseup = function(ev) {
        if (ev.button === 1 || ev.ctrlKey) {
            this.onclick(ev);
        }
    };

    /**
     * t3js init
     * @return {void}
     */
    init() {
        if (!this.isEnabled) {
            this.destroy();
        }
    }

    /**
     * Cleanup.
     * @ignore
     * @return {void}
     */
    destroy() {
        this.context = null;
        this._element = null;
        this._id = null;
        this.onclick = this.onmouseup = null;
    }
}

Application.addBehavior('amazon-subtag-modifier', context => new AmazonSubtagModifier(context));

export const name = 'amazon-subtag-modifier';

export default AmazonSubtagModifier;