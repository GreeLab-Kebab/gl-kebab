import scrollListener from '../../../js/services/scroll-listener';

const autoplayVideos = [];
let onscroll = null;

export const getWindow = () => window;

/**
 * Returns true if current video is currently at the end
 * @param {Element} video - the video to check
 * @returns {Boolean}
 */
const videoIsAtEnd = video => video.currentTime === video.duration;

/**
 * Checks if a DOMRect is in the view
 * @param {DOMRect} rect - the DOMRect to check
 * @returns {boolean} true if rect is in view
 */
export function inView(rect) {
    const requiredVisible = 0.75; // 75% visible
    const max = getWindow().innerHeight - rect.height * requiredVisible;
    return rect.top >= 0 && rect.top < max;
}

/**
 * Returns the most central video of a set of videos
 * or undefined if no videos are in view
 * @param {Element[]} videos - the videos to check against
 * @returns {Element} the most central video
 */
export function mostCentralVideo(videos) {
    const centerY = getWindow().innerHeight / 2;
    const {
        bestVideo
    } = videos
        .reduce((closest, video) => {
            const rect = video.getBoundingClientRect();
            if (inView(rect)) {
                const distanceY = centerY > rect.top ? centerY - rect.bottom : rect.top - centerY;
                if (distanceY < closest.minDistanceY) {
                    return {
                        minDistanceY: distanceY,
                        bestVideo: video
                    };
                }
            }
            return closest;
        }, {
            minDistanceY: Number.MAX_VALUE,
            bestVideo: undefined
        });
    return bestVideo;
}

/**
 * Plays the most prominent video in the autoplayVideos array
 * Pauses any other videos
 */
export function playMostCentralVideo(videos) {
    // find the most central video
    const bestVideo = mostCentralVideo(videos);

    // if this video is not already playing, and has not been manually paused by user
    if (bestVideo && bestVideo.paused &&
        bestVideo.dataset.userPaused !== '' && !videoIsAtEnd(bestVideo)) {
        bestVideo.play();
    }

    // pause all other videos
    videos.forEach(video => {
        if (video !== bestVideo) {
            video.pause();
        }
    });
}

/**
 * Adds smart autoplay functionality to a video Element
 * Video plays when it is in viewport
 * Video pauses when another video begins playing
 * @param {Element} video - the video element to add autoplay to
 */
export default function addAutoplay(video) {
    const callback = playMostCentralVideo.bind(null, autoplayVideos);
    if (!onscroll) {
        scrollListener.add({
            callback
        });
        onscroll = true;
    }
    autoplayVideos.push(video);
    // A new video could have been added to the current viewport
    // Let the browser schedule a check to see if we should play it
    if (getWindow().requestAnimationFrame) {
        getWindow().requestAnimationFrame(callback);
    }
}