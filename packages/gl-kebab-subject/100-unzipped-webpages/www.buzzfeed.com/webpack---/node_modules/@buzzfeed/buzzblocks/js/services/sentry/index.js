import raven from 'raven-js';

const PROD_SAMPLE_RATE = 0.2;
const defaultWhitelistUrls = [/\/static-assets\//];
const sentryDebugMode = window.location.search.indexOf('sentrydebug') > -1;

/**
 * Initialize Sentry for JS error reporting.
 * Sentry is only initialized in production.
 * This also sets raven as a global for access by embeds etc.
 * @export
 * @param {Object} params
 * @param {string} params.url - The sentry unique url
 * @param {string} params.env? - The runtime environment
 * @param {string} params.canary? - Is the deployment type canary?
 * @param {string} params.sampleRate? - The rate at which you sample errors (0 - 1)
 * @param {array} params.whitelistUrls? - An array of URL strings that you want to collect errors on
 * @param {array} params.ignoreErrors? - An array of strings or regexes that you want to ignore
 * @param {array} params.dataCallback? - A transformation function to be run before sending
 * @returns {raven} - the raven-js library
 * @example sentry({ url: 'https://some.url', env: 'dev' })
 */
export default function({
    url,
    env = window.BZFD.Config.env,
    canary = window.BZFD.Config.canaryDeploy,
    sampleRate = PROD_SAMPLE_RATE,
    whitelistUrls = defaultWhitelistUrls,
    ignoreErrors = [],
    dataCallback = data => data
}) {

    if (!url && (env !== 'prod' || sentryDebugMode)) {
        throw new Error('Missing sentry url. More info: http://bit.ly/2v9diir');
    }

    if (env !== 'prod' && !sentryDebugMode) {
        return;
    }

    raven.config(url, {
            whitelistUrls,
            ignoreErrors,
            shouldSendCallback: (data) => {
                if (data && data.extra && data.extra.forceSend) {
                    return true;
                }
                if (sentryDebugMode) {
                    return true;
                }
                return (Math.random() <= sampleRate);
            },
            dataCallback
        })
        .setTagsContext({
            canary
        })
        .install();

    window.raven = raven;
    return raven; // eslint-disable-line consistent-return
}