import {
    withUtmTracking
} from '@buzzfeed/site-tracking/shares';
import webview from '../webview/';
import sharing from '../sharing';

/**
 * A service to consolidate bpager tracking and sharing through app-native means.
 */
var webbridge = {};

/* Workaround for ios8+. window.open will not work.
 * This creates iframe with share url to trigger the
 * bf:// dialog*/
const iosOpenUrl = function(url) {
    var iframe = document.createElement('iframe');
    iframe.style.cssText = 'position:absolute; width:1px; height:1px; opacity:0;';
    iframe.setAttribute('src', url);
    document.body.appendChild(iframe);
};
webbridge.iosOpenUrl = iosOpenUrl;

/* For pixiedust, serialize the data to json and urlencode it. */
const encodePixiedustData = (data) => {
    return encodeURIComponent(JSON.stringify(data));
};
webbridge.encodePixiedustData = encodePixiedustData;

/* The default data encoding is to pass as key/value query paramaters */
const encodeData = (data) => {
    var params = '';
    Object.keys(data).forEach(function(key) {
        if (params) {
            params += '&';
        }
        params += key + '=' + encodeURIComponent(data[key]);
    });
    return params;
};
webbridge.encodeData = encodeData;

/* "ga_label" is used by the apps as a way to determine if the share is
 * for a quiz result, and should eventually be deprecated and replaced
 * by "result_id"
 */
var _addQuizShareData = (shareData, sd) => {
    if (shareData.quizId && shareData.itemId) {
        sd['ga_label'] = shareData.quizId + '=' + shareData.itemId;
        sd['result_id'] = shareData.itemId;
    }

    return sd;
};

/* Convert current share data to what webbridge needs to pass
 * to mobile app for Facebook.
 * NOTE: `ga_label` and `parent_id` may be desired in certain
 * cases when sharing quiz results for IOS.
 *
 * @param shareData - share data return from share widget
 */
export const facebookTransformShareData = shareData => ({
    name: shareData.text,
    caption: sharing.getCaption(),
    description: sharing.getDescription('facebook'),
    link: withUtmTracking({
        shareUrl: shareData.shareMetaUpdatedUrl || shareData.url,
        platform: 'facebook'
    }),
    picture: shareData.picture
});

/* Convert current share data to what webbridge needs to pass
 * to mobile app.
 * @param shareData - share data return from share widget
 */
export const pinterestTransformShareData = shareData => ({
    media: shareData.media,
    url: withUtmTracking({
        shareUrl: shareData.shareMetaUpdatedUrl || shareData.url,
        platform: 'pinterest'
    }),
    description: shareData.text
});

/* Convert current share data to what webbridge needs to pass
 * to mobile app for Twitter.
 * @param shareData - share data return from share widget
 */
export const twitterTransformShareData = shareData => ({
    text: shareData.text,
    url: withUtmTracking({
        shareUrl: shareData.shareMetaUpdatedUrl || shareData.url,
        platform: 'twitter'
    }),
});

/* Convert current share data to what webbridge needs to pass
 * to mobile app to copy url to clipboard.
 * @param shareData - share data return from share widget
 */
export const copyTransformShareData = shareData => ({
    url: withUtmTracking({
        shareUrl: shareData.shareMetaUpdatedUrl || shareData.url,
        platform: 'copy'
    }),
});

/* Convert current share data to what webbridge needs to pass
 * to mobile app for email.
 * @param shareData - share data return from share widget
 */
export const emailTransformShareData = shareData => ({
    subject: shareData.text,
    body: withUtmTracking({
        shareUrl: shareData.shareMetaUpdatedUrl || shareData.url,
        platform: 'email'
    }),
});

/**
 * Share a piece of content on the native app for the specified platform.
 * @param platform - Either `facebook` or `pinterest`
 * @param data - An object containing required data to share.  For
 * Facebook: { name, caption, description, link, picture }.  For
 * Pinterest: { media, url, description }
 */
export const share = (platform, data) => {
    let shareData = data;
    if (platform === 'pinterest') {
        shareData = pinterestTransformShareData(data);
    }
    if (platform === 'facebook') {
        shareData = facebookTransformShareData(data);
    }
    if (platform === 'twitter') {
        shareData = twitterTransformShareData(data);
    }
    if (platform === 'email') {
        shareData = emailTransformShareData(data);
    }
    if (platform === 'copy') {
        shareData = copyTransformShareData(data);
    }
    // Check to see if data contains a quiz result, and if so, add it to the shared Data
    shareData = _addQuizShareData(data, shareData);
    if (webview.isIOS()) {
        let shareUrl = 'bf://share/' + platform + '?' + encodeData(shareData);
        iosOpenUrl(shareUrl);
    } else if (webview.isAndroid()) {
        !!window.bf && window.bf.share(platform, JSON.stringify(shareData));
    } else {
        console.log('share() error: cannot determine device os, bailing.');
    }
};
webbridge.share = share;

/**
 * Track an event on the native app for the specified platform.
 * @param platform - Either `google` or `pixiedust`
 * @param data - An object containing { category, action, label, value }
 */
export const analytics = (platform, data) => {
    if (webview.isIOS()) {
        let analyticsUrl;
        /* the iOS news app has a bug processing the native bf: urls, so we exempt news iOS */
        if (platform === 'pixiedust' && (!webview.isNewsApp())) {
            analyticsUrl = 'bf://pixiedust?event=' + encodePixiedustData(data);
        } else if (platform === 'google') {
            analyticsUrl = 'bf://analytics?' + encodeData(data);
        } else {
            console.log('analytics() ios "platform" is neither "pixiedust" nor "google", is this OK?');
        }
        iosOpenUrl(analyticsUrl);
    } else if (webview.isAndroid()) {
        if (platform === 'pixiedust') {
            !!window.bf && !!window.bf.pixiedust && window.bf.pixiedust(JSON.stringify(data));
        } else if (platform === 'google') {
            var type = ''; // Always empty
            !!window.bf && window.bf.analytics(type, JSON.stringify(data));
        } else {
            console.log('analytics() android "platform" is neither "pixiedust" nor "google", is this OK?');
        }
    } else {
        console.log('analytics() error: cannot determine device os, bailing.');
    }
};
webbridge.analytics = analytics;

/**
 * Return the native app's injected js function call, if it exists, to display ads or not based on a rewards ad
 * placement being watched wittingly to stop ads for a session, defaults to display ads (false).
 * @return boolean, opt-out is true for this session if they've watched a rewards ad
 */
export const optOut = () => {
    var optOutResult = false;
    if (!!window.bf && !!window.bf.optOut) {
        optOutResult = window.bf.optOut();
    }
    return optOutResult;
};
webbridge.optOut = optOut;

export default webbridge;