webpackJsonpVHS([2], {

    /***/
    379:
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }(); /* global webpackPluginVhsVersion */

            var _safeChain = __webpack_require__(7);

            var _safeChain2 = _interopRequireDefault(_safeChain);

            var _events = __webpack_require__(5);

            var _events2 = _interopRequireDefault(_events);

            var _getDeviceType = __webpack_require__(35);

            var _getDeviceType2 = _interopRequireDefault(_getDeviceType);

            var _getReferrer = __webpack_require__(53);

            var _getReferrer2 = _interopRequireDefault(_getReferrer);

            var _logger = __webpack_require__(3);

            var _logger2 = _interopRequireDefault(_logger);

            var _dimensions = __webpack_require__(509);

            var _dimensions2 = _interopRequireDefault(_dimensions);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var logger = new _logger2.default('vhs:plugin:nyt-analytics');
            var log = function log() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                Promise.resolve().then(function() {
                    return logger.log.apply(logger, args);
                });
            };

            var dataLayer = window.dataLayer || [];

            var Tracker = function() {
                function Tracker(store, player) {
                    _classCallCheck(this, Tracker);

                    this.store = store;
                    this.player = player;
                    this.dimensions = new _dimensions2.default(store, player);
                    this.unsubscribes = [];
                }

                _createClass(Tracker, [{
                    key: 'init',
                    value: function init() {
                        this.dimensions.init();

                        this.setOncePerMediaTrackers();
                        this.subscribe();

                        this.trackPlayerLoad();
                        this.trackMediaLoad();
                        this.trackInview();
                        this.trackPlay();
                        this.trackPause();
                        this.trackResume();
                        this.trackSeek();
                        this.trackMediaComplete();
                        this.trackMute();
                        this.trackUnmute();
                        this.trackHdOn();
                        this.trackHdOff();
                        this.trackEnterFullscreen();
                        this.trackExitFullscreen();
                        this.trackAdStart();
                        this.trackAdSkip();
                        this.trackAdComplete();
                        this.trackPlayerError();
                        this.trackRebuffering();
                        this.trackMediaError();
                        this.trackEndSlateInview();
                        this.trackEndSlateLoaded();
                    }
                }, {
                    key: 'subscribe',
                    value: function subscribe() {
                        var _this = this;

                        // For replay
                        this.store.whenever('player', function() {
                            return true;
                        }, function(cur, prev) {
                            if (cur.media && prev.media && cur.media.id === prev.media.id && prev.isMediaEnded && cur.isMediaPlaying) {
                                _this.resetOncePerMediaTrackers();
                            }
                        });

                        this.store.whenever('player.isMediaLoaded', true, function() {
                            _this.resetOncePerMediaTrackers();
                        });
                    }
                }, {
                    key: 'setOncePerMediaTrackers',
                    value: function setOncePerMediaTrackers() {
                        this.unsubscribes.push(this.track25PercentConsumed());
                        this.unsubscribes.push(this.track50PercentConsumed());
                        this.unsubscribes.push(this.track75PercentConsumed());
                        this.unsubscribes.push(this.track90PercentConsumed());
                        this.unsubscribes.push(this.trackPlay());
                    }
                }, {
                    key: 'resetOncePerMediaTrackers',
                    value: function resetOncePerMediaTrackers() {
                        this.unsubscribes.forEach(function(unsubscribe) {
                            return unsubscribe();
                        });
                        this.unsubscribes = [];

                        this.setOncePerMediaTrackers();
                    }
                }, {
                    key: 'trackPlayerLoad',
                    value: function trackPlayerLoad() {
                        var _this2 = this;

                        var event = 'player-load';
                        var state = this.store.getState();

                        if (state.player.isElementReady) {
                            log(event, {
                                dimensions: this.dimensions.getDefaultBatch()
                            });
                            this.pushToDataLayer(event);
                        } else {
                            var unsubscribe = this.store.whenever('player.isElementReady', true, function() {
                                unsubscribe();
                                log(event, {
                                    dimensions: _this2.dimensions.getDefaultBatch()
                                });
                            });
                        }
                    }
                }, {
                    key: 'trackMediaLoad',
                    value: function trackMediaLoad() {
                        var _this3 = this;

                        var event = 'media-load';

                        this.store.whenever('player.isMediaLoaded', true, function() {
                            log(event, {
                                dimensions: _this3.dimensions.getCompleteBatch()
                            });
                            _this3.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackInview',
                    value: function trackInview() {
                        var _this4 = this;

                        var event = 'inview';
                        var state = this.store.getState();

                        if (state.plugins.viewportIntersectionObserver.isInsideViewport) {
                            log(event, {
                                dimensions: this.dimensions.getDefaultBatch()
                            });
                            this.pushToDataLayer(event);
                        }

                        this.store.whenever('plugins.viewportIntersectionObserver.isInsideViewport', true, function() {
                            log(event, {
                                dimensions: _this4.dimensions.getDefaultBatch()
                            });
                            _this4.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackPlay',
                    value: function trackPlay() {
                        var _this5 = this;

                        var event = 'play';

                        var unsubscribe = this.store.whenever('player.isMediaPlaying', true, function() {
                            unsubscribe();
                            log(event, {
                                dimensions: _this5.dimensions.getDefaultBatch()
                            });
                            _this5.pushToDataLayer(event);
                        });

                        return unsubscribe;
                    }
                }, {
                    key: 'trackPause',
                    value: function trackPause() {
                        var _this6,
                            event,
                            _this29 = this;

                        _this6 = _this29;
                        event = 'pause';


                        _this29.store.whenever('player.isMediaPlaying', false, function() {
                            // If it's a seek, we ignore.
                            if (_this6.store.getState().plugins.controls.isMouseDown) return;

                            log(event, {
                                dimensions: _this6.dimensions.getDefaultBatch()
                            });
                            _this6.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackResume',
                    value: function trackResume() {
                        var _this7 = this;

                        var event = 'resume';

                        this.store.whenever('player.isMediaPlaying', true, function() {
                            var state = _this7.store.getState();

                            if (state.player.isSeeking) return;

                            if ((0, _safeChain2.default)(state, 'player.media.progress') > 0) {
                                log(event, {
                                    dimensions: _this7.dimensions.getDefaultBatch()
                                });
                                _this7.pushToDataLayer(event);
                            }
                        });
                    }
                }, {
                    key: 'trackSeek',
                    value: function trackSeek() {
                        var _this8 = this;

                        var event = 'seek';

                        this.store.whenever('player.isSeeking', true, function() {
                            log(event, {
                                dimensions: _this8.dimensions.getDefaultBatch()
                            });
                            _this8.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackMediaComplete',
                    value: function trackMediaComplete() {
                        var _this9 = this;

                        var event = 'media-complete';

                        this.store.whenever('player.isMediaEnded', true, function() {
                            log(event, {
                                dimensions: _this9.dimensions.getDefaultBatch()
                            });
                            _this9.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackMute',
                    value: function trackMute() {
                        var _this10 = this;

                        var event = 'mute';

                        this.store.whenever('player.isMediaMuted', true, function() {
                            log(event, {
                                dimensions: _this10.dimensions.getDefaultBatch()
                            });
                            _this10.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackUnmute',
                    value: function trackUnmute() {
                        var _this11 = this;

                        var event = 'unmute';

                        this.store.whenever('player.isMediaMuted', false, function() {
                            log(event, {
                                dimensions: _this11.dimensions.getDefaultBatch()
                            });
                            _this11.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackHdOn',
                    value: function trackHdOn() {
                        var _this12 = this;

                        var event = 'hd-on';

                        this.store.whenever('player.isMediaHD', true, function() {
                            log(event, {
                                dimensions: _this12.dimensions.getDefaultBatch()
                            });
                            _this12.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackHdOff',
                    value: function trackHdOff() {
                        var _this13 = this;

                        var event = 'hd-off';

                        this.store.whenever('player.isMediaHD', false, function() {
                            log(event, {
                                dimensions: _this13.dimensions.getDefaultBatch()
                            });
                            _this13.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'track25PercentConsumed',
                    value: function track25PercentConsumed() {
                        var _this14 = this;

                        var event = 'percent-25-consumed';

                        var unsubscribe = this.store.whenever('player.media.progress', function(progress) {
                            return progress > 0;
                        }, function() {
                            var state = _this14.store.getState();
                            var progressPercentage = state.player.media.progress / state.player.media.duration;

                            if (progressPercentage >= 0.25) {
                                unsubscribe();
                                log(event, {
                                    dimensions: _this14.dimensions.getDefaultBatch()
                                });
                                _this14.pushToDataLayer(event);
                            }
                        });

                        return unsubscribe;
                    }
                }, {
                    key: 'track50PercentConsumed',
                    value: function track50PercentConsumed() {
                        var _this15 = this;

                        var event = 'percent-50-consumed';

                        var unsubscribe = this.store.whenever('player.media.progress', function(progress) {
                            return progress > 0;
                        }, function() {
                            var state = _this15.store.getState();
                            var progressPercentage = state.player.media.progress / state.player.media.duration;

                            if (progressPercentage >= 0.5) {
                                unsubscribe();
                                log(event, {
                                    dimensions: _this15.dimensions.getDefaultBatch()
                                });
                                _this15.pushToDataLayer(event);
                            }
                        });

                        return unsubscribe;
                    }
                }, {
                    key: 'track75PercentConsumed',
                    value: function track75PercentConsumed() {
                        var _this16 = this;

                        var event = 'percent-75-consumed';

                        var unsubscribe = this.store.whenever('player.media.progress', function(progress) {
                            return progress > 0;
                        }, function() {
                            var state = _this16.store.getState();
                            var progressPercentage = state.player.media.progress / state.player.media.duration;

                            if (progressPercentage >= 0.75) {
                                unsubscribe();
                                log(event, {
                                    dimensions: _this16.dimensions.getDefaultBatch()
                                });
                                _this16.pushToDataLayer(event);
                            }
                        });

                        return unsubscribe;
                    }
                }, {
                    key: 'track90PercentConsumed',
                    value: function track90PercentConsumed() {
                        var _this17 = this;

                        var event = 'percent-90-consumed';

                        var unsubscribe = this.store.whenever('player.media.progress', function(progress) {
                            return progress > 0;
                        }, function() {
                            var state = _this17.store.getState();
                            var progressPercentage = state.player.media.progress / state.player.media.duration;

                            if (progressPercentage >= 0.9) {
                                unsubscribe();
                                log(event, {
                                    dimensions: _this17.dimensions.getDefaultBatch()
                                });
                                _this17.pushToDataLayer(event);
                            }
                        });

                        return unsubscribe;
                    }
                }, {
                    key: 'trackEnterFullscreen',
                    value: function trackEnterFullscreen() {
                        var _this18 = this;

                        var event = 'enter-fullscreen';

                        this.store.whenever('plugins.fullscreen.isFullscreen', true, function() {
                            log(event, {
                                dimensions: _this18.dimensions.getDefaultBatch()
                            });
                            _this18.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackExitFullscreen',
                    value: function trackExitFullscreen() {
                        var _this19 = this;

                        var event = 'exit-fullscreen';

                        this.store.whenever('plugins.fullscreen.isFullscreen', false, function() {
                            log(event, {
                                dimensions: _this19.dimensions.getDefaultBatch()
                            });
                            _this19.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackAdStart',
                    value: function trackAdStart() {
                        var _this20 = this;

                        var event = 'ad-start';

                        this.player.on(_events2.default.AD_STARTED, function() {
                            log(event, {
                                dimensions: _this20.dimensions.getDefaultBatch()
                            });
                            _this20.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackAdSkip',
                    value: function trackAdSkip() {
                        var _this21 = this;

                        var event = 'ad-skip';

                        this.player.on(_events2.default.AD_SKIPPED, function() {
                            log(event, {
                                dimensions: _this21.dimensions.getDefaultBatch()
                            });
                            _this21.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackAdComplete',
                    value: function trackAdComplete() {
                        var _this22 = this;

                        var event = 'ad-complete';

                        this.player.on(_events2.default.AD_COMPLETED, function() {
                            log(event, {
                                dimensions: _this22.dimensions.getDefaultBatch()
                            });
                            _this22.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackPlayerError',
                    value: function trackPlayerError() {
                        var _this23 = this;

                        var event = 'player-error';

                        window.addEventListener('error', function(error) {
                            var filename = (0, _safeChain2.default)(error, 'filename') || '';

                            // Only errors from VHS files
                            if (filename.indexOf('vhs') === -1) {
                                return;
                            }

                            log(event, {
                                dimensions: _this23.dimensions.getDefaultBatch()
                            });
                            _this23.pushToDataLayer(event);
                        });

                        this.player.on(_events2.default.ERROR, function(error) {
                            // If it's an event, it means it was fired by the media element.
                            if (error && error.target) {
                                return;
                            }

                            log(event, {
                                dimensions: _this23.dimensions.getDefaultBatch()
                            });
                            _this23.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackLevelChange',
                    value: function trackLevelChange() {
                        var _this24 = this;

                        var event = 'level-change';

                        this.player.on(_events2.default.LEVEL_TYPE_CHANGE, function() {
                            log(event, {
                                dimensions: _this24.dimensions.getDefaultBatch()
                            });
                            _this24.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackRebuffering',
                    value: function trackRebuffering() {
                        var _this25 = this;

                        var event = 'rebuffering';

                        this.store.whenever('player.isMediaBuffering', true, function() {
                            log(event, {
                                dimensions: _this25.dimensions.getDefaultBatch()
                            });
                            _this25.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'trackMediaError',
                    value: function trackMediaError() {
                        var _this26 = this;

                        var event = 'media-error';

                        this.player.on(_events2.default.ERROR, function(error) {
                            // Only capture media element errors.
                            if (error && error.target) {
                                log(event, {
                                    dimensions: _this26.dimensions.getDefaultBatch()
                                });
                                _this26.pushToDataLayer(event);
                            }
                        });
                    }
                }, {
                    key: 'trackEndSlateInview',
                    value: function trackEndSlateInview() {
                        var _this27 = this;

                        var event = 'endslate-inview';

                        function isEndSlateInview(state) {
                            return state.plugins.viewportIntersectionObserver.isInsideViewport && state.plugins.endSlate.isVisible;
                        }

                        this.store.whenever('plugins.viewportIntersectionObserver.isInsideViewport', true, function() {
                            var state = _this27.store.getState();
                            if (isEndSlateInview(state)) {
                                log(event, {
                                    dimensions: _this27.dimensions.getDefaultBatch()
                                });
                                _this27.pushToDataLayer(event);
                            }
                        });

                        this.store.whenever('plugins.endSlate.isLoaded', true, function() {
                            var state = _this27.store.getState();
                            if (isEndSlateInview(state)) {
                                log(event, {
                                    dimensions: _this27.dimensions.getDefaultBatch()
                                });
                                _this27.pushToDataLayer(event);
                            }
                        });
                    }
                }, {
                    key: 'trackEndSlateLoaded',
                    value: function trackEndSlateLoaded() {
                        var _this28 = this;

                        var event = 'endslate-load';

                        this.store.whenever('plugins.endSlate.isLoaded', true, function() {
                            log(event, {
                                dimensions: _this28.dimensions.getDefaultBatch()
                            });
                            _this28.pushToDataLayer(event);
                        });
                    }
                }, {
                    key: 'pushToDataLayer',
                    value: function pushToDataLayer(name) {
                        var media = this.getTrackingData(name, this.dimensions.getTrackingConfig());
                        dataLayer.push({
                            event: 'mediaEvent',
                            media: media
                        });
                    }
                }, {
                    key: 'getTrackingData',
                    value: function getTrackingData(name, config) {
                        var currentState = this.store.getState();

                        var trackingData = {
                            module: config.module || 'video-player',
                            version: this.dimensions.getPlayerType() || 'unknown',
                            contentCollection: (0, _safeChain2.default)(currentState, 'player.media.section'),
                            region: config.region || '',
                            action: config.action || '',
                            contentId: (0, _safeChain2.default)(currentState, 'player.media.id'),
                            eventName: name,
                            eventTimestamp: new Date().getTime(),
                            referrer: (0, _getReferrer2.default)() || '',
                            mData: _extends({
                                videoName: (0, _safeChain2.default)(currentState, 'player.media.headline'),
                                videoType: config.videoType || this.dimensions.getType()
                            }, config.mData)
                        };

                        if (name === this.dimensions.getCompleteEvent()) {
                            trackingData.state = 'completed';
                        } else if (this.player.isPaused()) {
                            trackingData.state = 'paused';
                        } else {
                            trackingData.state = 'playing';
                        }

                        // video and ad specific data on mData
                        if (trackingData.module === 'video-player') {
                            trackingData = this.addVideoData(trackingData);
                        } else if (trackingData.module === 'audio-player') {
                            trackingData.mData = _extends({}, trackingData.mData, this.audioMData());
                        }

                        return trackingData;
                    }
                }, {
                    key: 'addVideoData',
                    value: function addVideoData(trackingData) {
                        var currentState = this.store.getState();
                        trackingData.mData.device = (0, _getDeviceType2.default)();
                        trackingData.mData.playerType = this.dimensions.getPlayerType() || '';
                        trackingData.mData.playerUsage = currentState.player.options.usage || '';
                        trackingData.mData.playerVersion = '3.41.8';
                        trackingData.mData.tech = 'html5';
                        trackingData.mData.videoDeliveryMethod = (0, _safeChain2.default)(currentState, 'player.media.isLive') ? 'live' : 'vod';
                        trackingData.mData.videoDuration = Math.round((0, _safeChain2.default)(currentState, 'player.media.duration'));
                        trackingData.mData.videoFranchise = (0, _safeChain2.default)(currentState, 'player.media.series');
                        trackingData.mData.videoPrimaryPlaylistId = (0, _safeChain2.default)(currentState, 'player.media.playlist.id');
                        trackingData.mData.videoPrimaryPlaylistName = (0, _safeChain2.default)(currentState, 'player.media.playlist.headline');
                        trackingData.mData.videoSection = (0, _safeChain2.default)(currentState, 'player.media.section');
                        trackingData.mData.videoSubSection = '';
                        trackingData.mData.videoTimeOfEvent = this.player.getCurrentTime();
                        trackingData.mData.aspectRatio = (0, _safeChain2.default)(currentState, 'player.media.ratio');

                        if (currentState.plugins.captions) {
                            trackingData.mData.captionsAvailable = currentState.plugins.captions.areCaptionsAvailable;
                            trackingData.mData.captionsEnabled = currentState.plugins.captions.areCaptionsEnabled;
                        }

                        trackingData.mData.muteEnabled = currentState.player.isMediaMuted;

                        if (trackingData.mData.videoType === 'ad') {
                            trackingData.mData.adPosition = 'preroll';
                            trackingData.mData.adDuration = Math.round(currentState.player.adData.duration);
                        }
                        if (trackingData.mData.videoType === 'video' && (0, _safeChain2.default)(currentState, 'player.media.playlist.isSponsored') && !(0, _safeChain2.default)(currentState, 'player.media.playlist.isPaidPost')) {
                            trackingData.mData.adPosition = 'flexframe';
                        }

                        return trackingData;
                    }
                }, {
                    key: 'audioMData',
                    value: function audioMData() {
                        var currentState = this.store.getState();
                        return {
                            device: (0, _getDeviceType2.default)(),
                            playerType: this.dimensions.getPlayerType() || '',
                            playerUsage: currentState.player.options.usage || '',
                            playerVersion: '3.41.8',
                            tech: 'html5',
                            deliveryMethod: (0, _safeChain2.default)(currentState, 'player.media.isLive') ? 'live' : 'aod',
                            duration: Math.round((0, _safeChain2.default)(currentState, 'player.media.duration')),
                            series: (0, _safeChain2.default)(currentState, 'player.media.series'),
                            section: (0, _safeChain2.default)(currentState, 'player.media.section'),
                            subSection: '',
                            timeOfEvent: this.player.getCurrentTime()
                        };
                    }
                }]);

                return Tracker;
            }();

            exports.default = Tracker;

            /***/
        }),

    /***/
    509:
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }(); /* global webpackPluginVhsVersion */
            /* eslint-disable no-restricted-globals */

            var _corleone = __webpack_require__(6);

            var _corleone2 = _interopRequireDefault(_corleone);

            var _v = __webpack_require__(111);

            var _v2 = _interopRequireDefault(_v);

            var _safeChain = __webpack_require__(7);

            var _safeChain2 = _interopRequireDefault(_safeChain);

            var _mediaTypes = __webpack_require__(24);

            var _mediaTypes2 = _interopRequireDefault(_mediaTypes);

            var _prefixedSessionStorage = __webpack_require__(510);

            var _prefixedSessionStorage2 = _interopRequireDefault(_prefixedSessionStorage);

            var _logger = __webpack_require__(3);

            var _logger2 = _interopRequireDefault(_logger);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var logger = new _logger2.default('vhs:plugin:nyt-tracking');
            var prefixedSessionStorage = new _prefixedSessionStorage2.default();

            var Dimensions = function() {
                function Dimensions(store, player) {
                    _classCallCheck(this, Dimensions);

                    this.store = store;
                    this.player = player;
                    this.state = {
                        mediaSessionId: (0, _v2.default)(),
                        startTimestamp: Date.now(),
                        readyTimestamp: null,
                        timeToPlayStart: null,
                        timeToPlayEnd: null,
                        playerLoadTime: null,
                        isFirstPlay: true,
                        wasLastMediaEnded: false
                    };
                }

                _createClass(Dimensions, [{
                    key: 'init',
                    value: function init() {
                        this.subscribe();
                    }
                }, {
                    key: 'subscribe',
                    value: function subscribe() {
                        var _this = this;

                        this.store.whenever('player.media.id', function() {
                            return true;
                        }, function(cur, prev) {
                            // Only after the second media is loaded.
                            if (prev !== undefined) {
                                _this.state.mediaSessionId = (0, _v2.default)();
                                _this.state.isFirstPlay = false;
                                _this.state.wasLastMediaEnded = false;
                            }
                        });

                        this.store.whenever('player.shouldPlay', true, function() {
                            _this.state.timeToPlayStart = Date.now();
                        });

                        this.store.whenever('player.isAdActive', true, function() {
                            _this.state.timeToPlayStart = null;
                            _this.state.timeToPlayEnd = null;
                        });

                        this.store.whenever('player.isAdActive', false, function() {
                            _this.state.timeToPlayStart = Date.now();
                        });

                        this.store.whenever('player.isMediaPlaying', true, function() {
                            if (!_this.store.getState().player.isAdActive) {
                                _this.state.timeToPlayEnd = Date.now();
                            }
                        });

                        // Renew `mediaSessionId` for replay
                        this.store.whenever('player', function() {
                            return true;
                        }, function(cur) {
                            var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                            if (cur.media && prev.media && cur.media.id === prev.media.id && prev.isMediaEnded && cur.isMediaPlaying) {
                                _this.state.mediaSessionId = (0, _v2.default)();
                            }
                        });

                        var playerIsReadyUnsubscribe = this.store.whenever('player.isReady', true, function() {
                            _this.state.readyTimestamp = Date.now();
                            playerIsReadyUnsubscribe();
                        });
                    }
                }, {
                    key: 'getDefaultBatch',
                    value: function getDefaultBatch() {
                        var dimensions = {
                            ad_duration: this.getAdDuration(),
                            ad_load_time: this.getAdLoadTime(),
                            ad_id: this.getAdId(),
                            ad_creative_id: this.getAdCreativeId(),
                            ad_position: this.getAdPosition(),
                            captions_available: this.getCaptionsAvailable(),
                            captions_enabled: this.getCaptionsEnabled(),
                            client_id: this.getClientId(),
                            delivery_method: this.getDeliveryMethod(),
                            error_code: this.getErrorCode(),
                            error_message: this.getErrorMessage(),
                            is_inview: this.getIsInview(),
                            level: this.getLevel(),
                            mute_enabled: this.getMuteEnabled(),
                            other_data: this.getOtherData(),
                            play_id: this.getPlayId(),
                            seek_time: this.getSeekTime(),
                            time_of_event: Date.now(),
                            viewing_mode: this.getViewingMode(),
                            voiceover_running: this.getVoiceoverRunning()
                        };

                        Object.keys(dimensions).forEach(function(key) {
                            if (dimensions[key] === undefined) {
                                delete dimensions[key];
                            }
                        });

                        return dimensions;
                    }
                }, {
                    key: 'getCompleteBatch',
                    value: function getCompleteBatch() {
                        var dimensions = _extends({}, this.getDefaultBatch(), {
                            aspect_ratio: this.getAspectRatio(),
                            autoplay: this.getAutoplay(),
                            creation_type: this.getCreationType(),
                            duration: this.getDuration(),
                            headline: this.getHeadline(),
                            media_id: this.getMediaId(),
                            media_type: this.getMediaType(),
                            play_intent: this.getPlayIntent(),
                            player_load_time: this.getPlayerLoadTime(),
                            player_time_to_download: this.getPlayerTimeToDownload(),
                            player_loc: this.getPlayerLoc(),
                            player_size: this.getPlayerSize(),
                            player_time_to_play: this.getPlayerTimeToPlay(),
                            primary_playlist_headline: this.getPrimaryPlaylistHeadline(),
                            primary_playlist_id: this.getPrimaryPlaylistId(),
                            section: this.getSection(),
                            series: this.getSeries(),
                            test_variant: this.getTestVariant(),
                            type: this.getType(),
                            uri: this.getUri(),
                            vhs_version: this.getVhsVersion()
                        });

                        Object.keys(dimensions).forEach(function(key) {
                            if (dimensions[key] === undefined) {
                                delete dimensions[key];
                            }
                        });

                        return dimensions;
                    }
                }, {
                    key: 'getDuration',
                    value: function getDuration() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.duration');
                    }
                }, {
                    key: 'getType',
                    value: function getType() {
                        try {
                            var isAudio = this.store.getState().player.options.mediaType === _mediaTypes2.default.AUDIO;
                            var is360 = this.store.getState().player.media.is360;
                            var isPaidPost = this.store.getState().player.media.playlist.isPaidPost;
                            var isAdActive = this.store.getState().player.isAdActive;

                            return isPaidPost && Dimensions.type.PAID_POST || isAdActive && Dimensions.type.AD || is360 && Dimensions.type['360video'] || isAudio && Dimensions.type.AUDIO || Dimensions.type.VIDEO;
                        } catch (error) {
                            return undefined;
                        }
                    }
                }, {
                    key: 'getPlayerType',
                    value: function getPlayerType() {
                        var pt = _corleone2.default.query('meta[name="PT"]');
                        var pst = _corleone2.default.query('meta[name="PST"]');
                        var slug = _corleone2.default.query('meta[name="slug"]');

                        var ptContent = (0, _safeChain2.default)(pt, 'content') || '';
                        var pstContent = (0, _safeChain2.default)(pst, 'content') || '';
                        var slugContent = (0, _safeChain2.default)(slug, 'content') || '';

                        var pageType = ptContent && pstContent ? ptContent.toLowerCase() + '-' + pstContent.toLowerCase() : null;
                        var type = null;

                        if (this.store.getState().player.options.type) {
                            type = this.store.getState().player.options.type;
                        } else if (pageType === 'multimedia-interactive' && slugContent) {
                            type = pageType + '|' + slugContent;
                        } else if (pageType) {
                            type = pageType;
                        } else {
                            logger.error('Player TYPE should be provided');
                        }

                        return type;
                    }
                }, {
                    key: 'getAdDuration',
                    value: function getAdDuration() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.adData.duration');
                    }
                }, {
                    key: 'getCreationType',
                    value: function getCreationType() {
                        if ((0, _safeChain2.default)(this.store.getState(), 'player.options.usage') === 'vanilla_js') {
                            return Dimensions.creationType.JS;
                        }

                        return undefined;
                    }
                }, {
                    key: 'getMediaId',
                    value: function getMediaId() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.id');
                    }
                }, {
                    key: 'getHeadline',
                    value: function getHeadline() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.headline');
                    }
                }, {
                    key: 'getPrimaryPlaylistId',
                    value: function getPrimaryPlaylistId() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.playlist.id');
                    }
                }, {
                    key: 'getPrimaryPlaylistHeadline',
                    value: function getPrimaryPlaylistHeadline() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.playlist.headline');
                    }
                }, {
                    key: 'getDeliveryMethod',
                    value: function getDeliveryMethod() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.playbackType');
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getVhsVersion',
                    value: function getVhsVersion() {
                        return '3.41.8';
                    }
                }, {
                    key: 'getPlayIntent',
                    value: function getPlayIntent() {
                        var autoPlay = (0, _safeChain2.default)(this.store.getState(), 'player.options.autoplay');

                        if (this.state.isFirstPlay) {
                            if (autoPlay) {
                                return Dimensions.playIntent.AUTO;
                            }
                            return Dimensions.playIntent.USER;
                        } else if (this.state.wasLastMediaEnded) {
                            if (autoPlay) {
                                return Dimensions.playIntent.NEXT_AUTO;
                            }
                            return Dimensions.playIntent.NEXT_USER;
                        }

                        return Dimensions.playIntent.UNKNOW;
                    }
                }, {
                    key: 'getMediaType',
                    value: function getMediaType() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.options.mediaType');
                    }
                }, {
                    key: 'getAutoplay',
                    value: function getAutoplay() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.options.autoplay');
                    }
                }, {
                    key: 'getPlayerLoadTime',
                    value: function getPlayerLoadTime() {
                        if (!this.state.readyTimestamp) {
                            return undefined;
                        }
                        var time = this.state.readyTimestamp - this.state.startTimestamp;
                        return time;
                    }
                }, {
                    key: 'getPlayerTimeToDownload',
                    value: function getPlayerTimeToDownload() {
                        var performance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.performance;

                        if (this.state.playerLoadTime) {
                            return this.state.playerLoadTime;
                        }

                        try {
                            var performanceEntry = performance.getEntries().filter(function(entry) {
                                return (/(vhs\.js|vhs\.min\.js)/.test(entry.name));
                            })[0];
                            this.state.playerLoadTime = performanceEntry.duration;
                            return this.state.playerLoadTime;
                        } catch (error) {
                            return undefined;
                        }
                    }
                }, {
                    key: 'getPlayerSize',
                    value: function getPlayerSize() {
                        var performance = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.performance;

                        if (this.state.playerSize) {
                            return this.state.playerSize;
                        }

                        try {
                            var performanceEntry = performance.getEntries().filter(function(entry) {
                                return (/(vhs\.js|vhs\.min\.js)/.test(entry.name));
                            })[0];
                            this.state.playerSize = performanceEntry.transferSize;
                            return this.state.playerSize;
                        } catch (error) {
                            return undefined;
                        }
                    }
                }, {
                    key: 'getMuteEnabled',
                    value: function getMuteEnabled() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.isMediaMuted');
                    }
                }, {
                    key: 'getCaptionsEnabled',
                    value: function getCaptionsEnabled() {
                        return (0, _safeChain2.default)(this.store.getState(), 'plugins.captions.areCaptionsEnabled');
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getClientId',
                    value: function getClientId() {
                        var clientId = prefixedSessionStorage.getItem('clientId');

                        if (!clientId) {
                            clientId = (0, _v2.default)();
                            prefixedSessionStorage.setItem('clientId', clientId);
                        }

                        return clientId;
                    }
                }, {
                    key: 'getCaptionsAvailable',
                    value: function getCaptionsAvailable() {
                        return (0, _safeChain2.default)(this.store.getState(), 'plugins.captions.areCaptionsAvailable');
                    }
                }, {
                    key: 'getPlayId',
                    value: function getPlayId() {
                        return this.state.mediaSessionId;
                    }
                }, {
                    key: 'getUri',
                    value: function getUri() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.url');
                    }
                }, {
                    key: 'getErrorCode',
                    value: function getErrorCode() {
                        return (0, _safeChain2.default)(this.player, 'playback.video.error.code');
                    }
                }, {
                    key: 'getErrorMessage',
                    value: function getErrorMessage() {
                        return (0, _safeChain2.default)(this.player, 'playback.video.error.message');
                    }
                }, {
                    key: 'getIsInview',
                    value: function getIsInview() {
                        return (0, _safeChain2.default)(this.store.getState(), 'plugins.viewportIntersectionObserver.isInsideViewport');
                    }
                }, {
                    key: 'getPlayerTimeToPlay',
                    value: function getPlayerTimeToPlay() {
                        var timeToPlay = this.state.timeToPlayEnd - this.state.timeToPlayStart;
                        return isNaN(timeToPlay) ? undefined : timeToPlay;
                    }
                }, {
                    key: 'getAspectRatio',
                    value: function getAspectRatio() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.ratio');
                    }
                }, {
                    key: 'getLevel',
                    value: function getLevel() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.hlsLevel');
                    }
                }, {
                    key: 'getSeries',
                    value: function getSeries() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.series');
                    }
                }, {
                    key: 'getSection',
                    value: function getSection() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.media.section');
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getTestVariant',
                    value: function getTestVariant() {
                        return 0;
                    }
                }, {
                    key: 'getPlayerLoc',
                    value: function getPlayerLoc() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.options.type');
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getVoiceoverRunning',
                    value: function getVoiceoverRunning() {
                        return undefined;
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getViewingMode',
                    value: function getViewingMode() {
                        return 'standard';
                    }

                    // eslint-disable-next-line class-methods-use-this

                }, {
                    key: 'getOtherData',
                    value: function getOtherData() {
                        return undefined;
                    }
                }, {
                    key: 'getAdLoadTime',
                    value: function getAdLoadTime() {
                        var state = this.store.getState();
                        var adLoadStarTimestamp = (0, _safeChain2.default)(state, 'player.adData.loadStartTimestamp');
                        var adLoadEndTimestamp = (0, _safeChain2.default)(state, 'player.adData.loadEndTimestamp');
                        var adLoadTime = adLoadEndTimestamp - adLoadStarTimestamp;

                        return isNaN(adLoadTime) ? undefined : adLoadTime;
                    }
                }, {
                    key: 'getSeekTime',
                    value: function getSeekTime() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.seekTo');
                    }
                }, {
                    key: 'getAdId',
                    value: function getAdId() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.adData.id');
                    }
                }, {
                    key: 'getAdCreativeId',
                    value: function getAdCreativeId() {
                        return (0, _safeChain2.default)(this.store.getState(), 'player.adData.creativeId');
                    }
                }, {
                    key: 'getAdPosition',
                    value: function getAdPosition() {
                        var position = (0, _safeChain2.default)(this.store.getState(), 'player.adData.position');

                        if (position === 0) {
                            return 'preroll';
                        } else if (position === -1) {
                            return 'postroll';
                        } else if (position > 0) {
                            return 'midroll';
                        }

                        return undefined;
                    }
                }, {
                    key: 'getCompleteEvent',
                    value: function getCompleteEvent() {
                        if (this.getType() === Dimensions.type.AUDIO) {
                            return 'audio-complete';
                        }
                        return 'video-complete';
                    }
                }, {
                    key: 'getTrackingConfig',
                    value: function getTrackingConfig() {
                        var config = void 0;
                        switch (this.getType()) {
                            case Dimensions.type.AD:
                                config = _extends({}, Dimensions.adConfig);
                                break;
                            case Dimensions.type.PAID_POST:
                                config = _extends({}, Dimensions.paidPostConfig);
                                break;
                            case Dimensions.type['360video']:
                                config = _extends({}, Dimensions.video360Config);
                                break;
                            case Dimensions.type.AUDIO:
                                config = _extends({}, Dimensions.audioConfig);
                                break;
                            case Dimensions.type.VIDEO:
                            default:
                                config = _extends({}, Dimensions.videoConfig);
                                break;
                        }
                        return config;
                    }
                }]);

                return Dimensions;
            }();

            Dimensions.creationType = {
                JS: 'js',
                HTML: 'html'
            };

            Dimensions.type = {
                VIDEO: 'video',
                AD: 'ad',
                PAID_POST: 'paidPost',
                '360video': '360video',
                AUDIO: 'audio'
            };

            Dimensions.playIntent = {
                USER: 'user',
                AUTO: 'auto',
                NEXT_USER: 'next_user',
                NEXT_AUTO: 'next_auto',
                UNKNOW: 'unknow'
            };

            Dimensions.videoConfig = {
                videoType: Dimensions.type.VIDEO,
                module: 'video-player',
                mData: {}
            };

            Dimensions.video360Config = {
                videoType: Dimensions.type['360video'],
                module: 'video-player',
                mData: {}
            };

            Dimensions.adConfig = {
                videoType: Dimensions.type.AD,
                module: 'video-player',
                mData: {}
            };

            Dimensions.paidPostConfig = {
                videoType: Dimensions.type.PAID_POST,
                module: 'video-player',
                mData: {}
            };

            Dimensions.audioConfig = {
                videoType: Dimensions.type.AUDIO,
                module: 'audio-player',
                mData: {}
            };

            exports.default = Dimensions;

            /***/
        }),

    /***/
    510:
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = function() {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                return function(Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            var _logger = __webpack_require__(3);

            var _logger2 = _interopRequireDefault(_logger);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var logger = new _logger2.default('vhs:util:session-storage');

            var PrefixSessionStorage = function() {
                function PrefixSessionStorage() {
                    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nytvhs';

                    _classCallCheck(this, PrefixSessionStorage);

                    this.prefix = prefix;
                }

                _createClass(PrefixSessionStorage, [{
                    key: 'getItem',
                    value: function getItem(key) {
                        try {
                            var valueSerialized = sessionStorage.getItem(this.prefix + '.' + key);
                            return JSON.parse(valueSerialized);
                        } catch (error) {
                            logger.error(error);
                        }

                        return null;
                    }
                }, {
                    key: 'setItem',
                    value: function setItem(key, value) {
                        try {
                            sessionStorage.setItem(this.prefix + '.' + key, JSON.stringify(value));
                        } catch (error) {
                            logger.error(error);
                        }
                    }
                }, {
                    key: 'removeItem',
                    value: function removeItem(key) {
                        try {
                            sessionStorage.removeItem(this.prefix + '.' + key);
                        } catch (error) {
                            logger.error(error);
                        }
                    }
                }, {
                    key: 'clear',
                    value: function clear() {
                        var _this = this;

                        try {
                            Object.keys(sessionStorage).filter(function(key) {
                                return key.indexOf(_this.prefix) === 0;
                            }).forEach(function(key) {
                                return sessionStorage.removeItem(key);
                            });
                        } catch (error) {
                            logger.error(error);
                        }
                    }
                }]);

                return PrefixSessionStorage;
            }();

            exports.default = PrefixSessionStorage;

            /***/
        })

});


// WEBPACK FOOTER //
// vhs-plugin-nyt-analytics.min.js