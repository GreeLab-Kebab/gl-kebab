'use strict';

var stringcase = require('stringcase'),
    deacro = require('pascal-deacronym'),
    diagnostics = require('diagnostics');

var debug = diagnostics('golf-to-eid');
var isValidKey = /^[A-Za-z0-9\_\:-]+$/

/**
 * Transforms the specified set of keys from one of four
 * formats:
 *
 *    camelCaseWithNoDelimiters
 *    PascalCaseWithNoDelimiters
 *    camelCase:delimitedBy:Colon
 *    Pascal:Delimited:By:Colon
 *
 * and transforms it into:
 *
 *    snake_case_no_delimiter
 *
 * @param {string|Array} keys Key (or set of keys) to transform
 * @param {Object} opts *Optional* Additional options for returned keys
 * @returns {string|Array} Transformed key (or set ofkeys).
 *
 */
module.exports = function(keys, opts) {
    var isArray = Array.isArray(keys);

    opts = opts || {};
    keys = !isArray ? [keys] : keys;

    var mapped = keys.filter(function(key) {
        return isValidKey.test(key);
    }).map(function(key) {
        //
        // Transformation is three steps:
        // 1. Obtain substring of key after the last ":"
        // 2. "deacryonym" it using
        //   pascal-deacronym. For example:
        //   - SSL becomes Ssl
        //   - GDEmail becomes GdEmail
        //   - VAT becomes Vat
        //   - ECommerce stays ECommerce
        //   - etc. etc. etc.
        // 3. Convert that part from proper PascalCase
        //    to snake_case
        //
        var rekey = key.substring(key.lastIndexOf(':') + 1);
        rekey = deacro(rekey);
        rekey = stringcase.snakecase(rekey);
        rekey = rekey.replace('-', '_');

        //
        // Add our prefix and postfix components of
        // the eid.
        //
        if (opts.prefix) {
            rekey = opts.prefix + '.' + rekey;
        }

        if (opts.postfix) {
            rekey = rekey + '.' + opts.postfix;
        }

        debug('%s', key);
        debug('%s', rekey);

        return rekey;
    });

    return isArray ? mapped : mapped[0];
};