import React from 'react';
import {
    URL
} from '@ux/util';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import PropTypes from 'prop-types';
import Link from '@ux/link';

// Regex for whitespace and non-typographical unicode characters
// eslint-disable-next-line no-control-regex
const WHITESPACE_REGEX = /[\s\u0000-\u001F\u007F-\u009F]/g;

/**
 * Add query parameters from props to the url.
 *
 * @param {String} url link.
 * @param {Object} props Properties to merge with the query parameters object.
 * @returns {String} Configured url.
 * @private
 */
function updateQuery(url, props) {
    url = new URL(url, true);
    return url.set('query', { ...url.query,
        ...props
    }).href;
}

/**
 * Renders shared GD logo.
 *
 * @param {Object} props Properties
 * @returns {ReactElement} shared logo
 * @public
 */
export class LogoComponent extends NamespaceConsumer {
    constructor(props) {
        super(props);

        // Some Logo consumers setup breakpoints themselves and will trigger
        // corresponding re-renders of the Logo. But for those that don't, Logo
        // needs to setup breakpoints on its own. This prevents spurious re-renders
        // when consumed by an already-breakpoint-sensitive component.
        this.shouldConfigureBreakpoints = typeof props.isMobile !== 'boolean';
    }

    /**
     * Check if breakpoint is mobile. (Respects `shouldConfigureBreakpoints`.)
     *
     * @returns {Boolean} Mobile or not.
     * @private
     */
    get _isMobile() {
        return this.shouldConfigureBreakpoints ?
            this.isMobile :
            this.props.isMobile;
    }

    /**
     * Get the logo URL for the current breakpoint.
     *
     * @returns {String} Logo URL.
     * @private
     */
    get _logo() {
        const {
            logos
        } = this.props;
        const url = logos && (this._isMobile ? logos.mobile : logos.desktop) || '';

        return url.replace(WHITESPACE_REGEX, '');
    }

    componentDidMount() {
        if (this.shouldConfigureBreakpoints) {
            this.breakpoint('mobile', 'phablet', 'tablet', 'desktop', 'large');
        }
    }

    componentWillUnmount() {
        if (this.shouldConfigureBreakpoints) {
            this.breakup();
        }
    }

    /**
     * Return elements for rendering a reseller logo
     * @param {String} url Logo URL
     * @returns {ReactElement} Part of the shared logo
     * @api private
     */
    resellerLogo() {
        const {
            spanClass,
            privateLabelName
        } = this.props;
        const url = this._logo;

        //
        // If no URL for a custom logo has been provided then display
        // the name of the private label.
        //
        if (!url) {
            return ( <
                span id = 'registrar'
                className = {
                    this.namespace('logo-text')
                } > {
                    privateLabelName
                } <
                /span>
            );
        }

        // To prevent SVGs from rendering 0x0, set an arbitrarily large enough width
        // to cover the max-width of the span. Only appropriate for SVGs because
        // other image types would stretch if their aspect ratio is narrower than
        // the span's.
        const svgHack = /\.svg$/.test(url) && {
            width: 200
        };

        return ( <
            span className = {
                this.classNames('logo-img', spanClass)
            } >
            <
            img id = 'registrar'
            src = {
                encodeURI(url)
            }
            alt = {
                privateLabelName
            } { ...svgHack
            }
            /> <
            /span>
        );
    }

    /**
     * Return elements for rendering a primary (i.e. GoDaddy) logo with the head
     * @param {String} url Logo URL
     * @returns {ReactElement} Part of the shared logo
     * @api private
     */
    primaryLogo() {
        const props = this.props;
        return ( <
            span className = {
                props.spanClass
            } >
            <
            img id = {
                props.id || 'homepage'
            }
            src = '//img1.wsimg.com/pc/img/1/trademark/nonregistered/godaddy-logo.png'
            alt = {
                props.messages['Shared:ProductNav:CompanyName']
            }
            /> <
            /span>
        );
    }

    /**
     * Work around for `sinon@7`/lolex having issues faking timers.
     * Context
     *
     * @returns {number} number of milliseconds since epoch (same as `Date.now()`)
     */
    getDateNow() {
        return Date.now();
    }

    /**
     * Return elements for rendering the temporary GoDaddy logo for culture campaigns
     *
     * @param {Object} tempLogo from props
     * @param {String} tempLogo.filename the name of the file to be retrieved from CDN
     * @param {Object} tempLogo.start the starting date of the campaign
     * @param {Object} tempLogo.end the ending date of the campaign
     * @param {Object} tempLogo.styles the styles to be applied
     * @returns {ReactElement} The temp logo
     */
    renderTempLogo({
        filename,
        start,
        end,
        styles = {},
        altText = ''
    }) {
        const props = this.props;

        const convertToDateObject = ({
            year,
            month,
            day,
            hour = null
        }) => {
            // subtract 1 from the month since Date months are indexed from 0
            return new Date(year, month - 1, day, hour);
        };

        const startDate = convertToDateObject(start);
        const endDate = convertToDateObject(end);

        const now = this.getDateNow();

        if (startDate < now && now < endDate) {
            const cdn = `${props.urls.cdn.href}ux/sales-header/`;

            return ( <
                span id = {
                    props.id || 'homepage'
                }
                className = {
                    props.spanClass
                }
                aria - label = 'GoDaddy' >
                <
                img alt = {
                    altText
                }
                src = {
                    `${cdn}${filename}`
                }
                onError = {
                    (e) => {
                        e.target.onError = null;
                        // default logo fallback
                        e.target.src = `${cdn}gd-logo.svg`;
                        e.target.style = null;
                    }
                }
                style = {
                    styles
                }
                /> <
                /span>
            );
        }

        return this.headlessGDLogo();
    }

    /**
     * Return elements for rendering the headless GoDaddy logo for the Brand update in application header
     * @param {String} url Logo URL
     * @returns {ReactElement} Part of the shared logo
     * @private
     */
    headlessGDLogo() {
        const props = this.props;

        return ( <
            span id = {
                props.id || 'homepage'
            }
            className = {
                props.spanClass
            }
            aria - label = 'GoDaddy' >
            <
            svg className = {
                this.namespace('logo-mark')
            }
            viewBox = '0 0 367.7 78.1'
            xmlns = 'http://www.w3.org/2000/svg' >
            <
            path className = {
                this.namespace('logo-mark-color')
            }
            d = 'M95.3 38.6c0-4.6-3.6-8.4-8.3-8.4-4.6 0-8.3 3.8-8.3 8.4s3.6 8.3 8.3 8.3 8.3-3.7 8.3-8.3m14.4.1c0 11.9-10.1 21.4-22.6 21.4-12.6 0-22.6-9.5-22.6-21.4 0-12 10.1-21.6 22.6-21.6 12.5-.1 22.6 9.6 22.6 21.6M154.8 30c0-8-5.6-15-13.9-15h-11.5v30.3h11.5c8.3 0 13.9-7.3 13.9-15.3m15.5 0c0 17.1-12.1 28.8-29.1 28.8h-24.6c-1.2 0-2.1-.9-2.1-2V3.4c0-1.1.9-2 2.1-2h24.6c17.1.1 29.1 11.5 29.1 28.6M194.4 46.9c4.6 0 8.3-3.8 8.3-8.4s-3.6-8.4-8.3-8.4c-4.6 0-8.3 3.8-8.3 8.4 0 4.7 3.7 8.4 8.3 8.4M192.2 17c4.9 0 8.8 1.8 10.5 4.3v-1.2c0-1.1.9-1.9 1.9-1.9H215c1.1 0 1.9.8 1.9 1.9v36.8c0 1.1-.8 1.9-1.9 1.9h-10.3c-1.1 0-1.9-.8-1.9-1.9v-1.2c-1.7 2.5-5.7 4.3-10.6 4.3-10.4 0-20.4-8.3-20.4-21.6s10-21.4 20.4-21.4M241.4 46.9c4.6 0 8.3-3.8 8.3-8.4s-3.6-8.4-8.3-8.4c-4.6 0-8.3 3.8-8.3 8.4 0 4.7 3.7 8.4 8.3 8.4M238.9 17c5 0 8.9 1.9 10.7 4.1V3.4c0-1.1.9-1.9 1.9-1.9H262c1.1 0 1.9.8 1.9 1.9V57c0 1.1-.8 1.9-1.9 1.9h-10.3c-1.1 0-1.9-.8-1.9-1.9v-1.2c-2.1 2.5-5.7 4.3-10.6 4.3-10.4 0-20.4-8.3-20.4-21.6S228.7 17 238.9 17M288.4 46.9c4.6 0 8.3-3.8 8.3-8.4s-3.6-8.4-8.3-8.4c-4.6 0-8.3 3.8-8.3 8.4.1 4.7 3.7 8.4 8.3 8.4M286 17c5 0 8.9 1.9 10.7 4.1V3.4c0-1.1.9-1.9 1.9-1.9H309c1.1 0 1.9.8 1.9 1.9V57c0 1.1-.8 1.9-1.9 1.9h-10.3c-1.1 0-1.9-.8-1.9-1.9v-1.2c-2.1 2.5-5.7 4.3-10.6 4.3-10.4 0-20.4-8.3-20.4-21.6S275.7 17 286 17M345.5 64.7c-2.6 8.6-8.6 13.4-18 13.4-5.1 0-10.1-1.7-13.3-4.5-.5-.5-.8-1.1-.8-1.7 0-.5.2-1.1.7-1.7l3.9-5.9c.6-.8 1.5-.9 1.7-.9.9 0 1.3.2 2.1.8 1.2.8 2.9 1.8 4.8 1.8 1.6 0 3.7-.7 4.5-3.1l1.3-4.1H326c-1.3 0-2.1-.9-2.5-2L313 21.5c-.2-.9-.3-1.4-.3-1.7 0-.8.6-1.5 1.7-1.5h12.4c1.1 0 1.7 1 2 2l6.9 25.4h.5l5.5-25.4c.2-1 .9-2 2-2h12.6c1.2 0 1.7.7 1.7 1.5 0 .3-.1.8-.3 1.7l-12.2 43.2M49.7 50.9c-5 6.9-13.2 9.2-20.5 9.2C12.4 60.1 0 47.6 0 30.2.1 13.5 13.5.2 31 .2c13 0 23.4 5.5 28.1 16 .6 1.2 1 3.2-2.5 3.8l-9.2 1.6c-2.1.4-3.3-1-3.7-1.6-2.7-3.7-7.1-6.2-12.4-6.2-9.2 0-15.7 7-15.7 16.3 0 10.3 7.4 16.3 15.5 16.3 5.4 0 9.8-2 12.7-5.8h-8.1c-1.2 0-2.1-.9-2.1-2v-7.7c0-1.1.9-2 2.1-2h24.7c1.2 0 2.1.9 2.1 2v25.9c0 1.1-.9 2-2.1 2h-8.6c-1.2 0-2.1-.9-2.1-2v-5.9M359.8 0c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14.4c-3.5 0-6.4-2.9-6.4-6.4s2.9-6.4 6.4-6.4 6.4 2.9 6.4 6.4-2.9 6.4-6.4 6.4z' / >
            <
            path className = {
                this.namespace('logo-mark-color')
            }
            d = 'M361.4 6.5c0-.4-.1-.7-.4-.8-.2-.2-.6-.4-.9-.4h-1.4v2.3h1.4c.4 0 .7-.1.9-.4.2-.2.4-.4.4-.7zm-3.1 5.9h-1.5c-.1 0-.1 0-.2-.1 0-.1-.1-.1-.1-.2V3.8c0-.1 0-.1.1-.2.1 0 .1-.1.2-.1h3.3c1.1 0 1.9.2 2.5.8s.9 1.3.9 2.1c0 .6-.1 1.1-.5 1.5-.4.5-.7.8-1.2 1.1l1.9 2.9c.1.1.1.2 0 .4 0 .1-.1.1-.2.1H362c-.1 0-.2 0-.4-.1-.1 0-.1-.1-.2-.2l-1.6-2.7h-1.2V12c0 .1 0 .1-.1.2s-.1.2-.2.2z' / >
            <
            /svg> <
            /span>
        );
    }

    render() {
        const props = this.props;
        const linkProps = {
            'className': this.classNames(props.className, {
                'white-logo-bg': props.privateLabelId !== 1 && this._logo
            }),
            'urlArgs': props.urlArgs,
            'href': updateQuery(props.href, props.urlArgs),
            'data-eid': props['data-eid']
        };

        let logoCaption;

        if (props.privateLabelId !== 1) {
            linkProps.rel = 'nofollow';
            logoCaption = this.resellerLogo();
        } else if (props.tempLogo) {
            logoCaption = this.renderTempLogo(props.tempLogo);
        } else if (props.includeGDHead) {
            logoCaption = this.primaryLogo();
        } else {
            logoCaption = this.headlessGDLogo();
        }

        const logo = ( <
            React.Fragment > {
                props.market !== 'en-US' &&
                props.showCountryNameOnLogo &&
                props.privateLabelId === 1 &&
                < span className = {
                    this.namespace('topnav-country')
                } > {
                    props.country
                } <
                /span>
            } {
                logoCaption
            } <
            /React.Fragment>
        );

        if (!props.href) return logo;

        return ( <
            Link { ...linkProps
            } > {
                logo
            } <
            /Link>
        );
    }
}

LogoComponent.defaultProps = {
    market: 'en-US',
    country: '',
    privateLabelId: 1,
    showCountryNameOnLogo: false,
    urlArgs: {},
    includeGDHead: true
};

LogoComponent.propTypes = {
    ...NamespaceShape,
    'className': PropTypes.string,
    'country': PropTypes.string,
    'data-eid': PropTypes.string,
    'href': PropTypes.string,
    'logos': PropTypes.object,
    'market': PropTypes.string.isRequired,
    'messages': PropTypes.object.isRequired,
    'privateLabelId': PropTypes.number.isRequired,
    'privateLabelName': PropTypes.string,
    'showCountryNameOnLogo': PropTypes.bool,
    'spanClass': PropTypes.string,
    'tempLogo': PropTypes.object,
    'urlArgs': PropTypes.object,
    'urls': PropTypes.object,
    'isMobile': PropTypes.bool,
    'includeGDHead': PropTypes.bool,
    'id': PropTypes.string
};

export default withNamespace(LogoComponent);