import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import React from 'react';
import PropTypes from 'prop-types';
import Button from '@ux/button';

const breakpoints = [
    'mobile',
    'phablet',
    'tablet',
    'desktop',
    'large'
];
/**
 * Tray button component.
 *
 * Tray buttons are the anchor for the tray menu, or what element is used to
 * toggle the menu open or closed.
 *
 * @class TrayButton
 * @public
 */
class TrayButton extends NamespaceConsumer {
    constructor() {
        super(...arguments);
        this.state = {
            trayToggleWidth: 0,
            caretMarginLeft: 0
        };
    }

    /**
     * Render the component.
     *
     * @returns {React.ReactElement} Button.
     * @api public
     */
    render() {
        const props = this.props;
        const {
            className,
            type,
            ariaLabel,
            onClick,
            children,
            traySpanClass,
            dataAttrs
        } = props;

        let caretNode = null;
        if (props.showOpenCaret) {
            caretNode = ( <
                span className = {
                    this.namespace('tray-toggle-caret')
                }
                style = {
                    {
                        marginLeft: this.state.caretMarginLeft + 'px'
                    }
                } > < /span>
            );
        }

        return ( <
            div className = {
                this.namespace('tray-toggle-wrapper')
            }
            ref = {
                r => {
                    this.trayToggleWrapper = r;
                }
            } >
            <
            Button ariaLabel = {
                ariaLabel
            }
            onClick = {
                onClick
            }
            design = {
                type
            }
            className = {
                this.classNames(className, this.namespace('tray-toggle'))
            } { ...dataAttrs
            }
            aria - expanded = {
                props['aria-expanded']
            }
            aria - haspopup >
            < span className = {
                traySpanClass
            } > {
                children
            } < /span></Button > {
                caretNode
            } <
            /div>
        );
    }

    /**
     * Calculate the margin for placing the caret
     *
     * @api private
     */
    componentDidMount() {
        this.breakpoint(...breakpoints);
        this.calcCaretMargin();
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup();
    }

    /**
     * Calculate the margin for placing the caret
     *
     * @param {Object} previousProps the props before the component updated
     * @param {Object} previousState the state before the component updated
     * @api private
     */
    componentDidUpdate(previousProps, previousState) {
        if (previousState.breakpoint !== this.state.breakpoint ||
            previousState.trayToggleWidth !== this.state.trayToggleWidth) {
            this.calcCaretMargin();
        }
    }

    /**
     * Determine left margin for the caret based on the width of the tray-button
     *
     * @api private
     */
    calcCaretMargin() {
        const trayToggleWidth = this.getWidth(this.trayToggleWrapper);
        const caretMarginLeft = trayToggleWidth / 2 - 10;
        this.setState({
            trayToggleWidth,
            caretMarginLeft
        });
    }

    /**
     * Get a width for a given node
     *
     * @param {Element} element the element to measure
     * @returns {Number} the width of {element}
     * @api private
     */
    getWidth(element) {
        if (!element) {
            return 0;
        }

        const style = window.getComputedStyle(element) || {
            width: void 0
        };
        return parseFloat(style.width) || 0;
    }

}

/**
 * Property definitions.
 *
 * @type {Object}
 * @public
 */
TrayButton.propTypes = {
    ...NamespaceShape,
    'ariaLabel': PropTypes.string,
    'onClick': PropTypes.func.isRequired,
    'type': PropTypes.string,
    'children': PropTypes.node,
    'traySpanClass': PropTypes.string,
    'showOpenCaret': PropTypes.bool,
    'dataAttrs': PropTypes.object,
    'aria-expanded': PropTypes.bool
};

export default withNamespace(TrayButton);