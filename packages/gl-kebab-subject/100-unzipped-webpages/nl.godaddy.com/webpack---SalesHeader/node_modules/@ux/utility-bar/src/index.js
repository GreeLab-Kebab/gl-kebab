import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import Cart from '@px/header-cart';
import AccountDelegation from '@ux/account-delegation';
import AccountTray from './account-tray/account-tray';
import MarketSelector from '@ux/market-selector';
import Notifications from '@ux/notifications';
import LegacyNotifications from '@ux/notifs-v1';
import ContactTray from './contact-tray';
import ProductPanel from '@ux/product-panel';
import Logo from '@ux/logo';
import Button from '@ux/button';
import Icon from '@ux/icon';
import assign from 'object-assign';
import BackLink from './back-link';
import Link from '@ux/link';
import Markets from '@godaddy/markets';
import {
    golf,
    defaultComponents
} from './enums';
import eidBuilder from './eid';
import LinkBuilder from './link-builder.js';

/**
 * Render and expose the Utility as a functional Component.
 *
 * @param {Object} props Properties
 * @returns {ReactElement} Namespaced UtilityBar.
 * @api public
 */
class UtilityBar extends NamespaceConsumer {
    constructor(props) {
        super(...arguments);

        //
        // Merge `components` from props with the default components so that incoming
        // props only have to set things that should be different than the default.
        //
        this.components = { ...defaultComponents,
            ...props.components
        };
        this.markets = new Markets();
        this.eids = {
            blogLink: eidBuilder({
                key: golf.blogLink,
                manifest: props.manifest
            })
        };
    }

    /**
     * Update this.components when props.components changes
     *
     * @param {Object} nextProps the new properties that are received
     * @api private
     */
    componentWillReceiveProps(nextProps) {
        // Merge `components` from props with the default components so that incoming props only have to set things that should be
        // different than the default.
        this.components = { ...defaultComponents,
            ...nextProps.components
        };
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup();
    }

    /**
     * Add eventListeners for breakpoints. Notify listeners the utilityBar
     * is mounted and expose the instance.
     *
     * @api private
     */
    componentDidMount() {
        this.breakpoint('mobile', 'phablet', 'tablet', 'desktop', 'large');
    }

    /**
     * Prefer state over props when assigning to children
     *
     * @returns {Object} Child props
     * @api private
     */
    getChildProps() {
        return assign({}, this.props, this.state);
    }

    /**
     * Determine whether to render legacy notifications or the current module
     * @returns {React.element} legacy notifications component or current
     */
    renderNotifications() {
            const props = this.props;
            const {
                urls,
                messages,
                privateLabelId
            } = props;
            const headerText = messages[golf.notificationsHeaderText];
            const notificationProps = {
                showCount: !props.minimize,
                manifest: props.manifest,
                sso: {
                    href: urls.sso.href,
                    login: urls.sso.login
                },
                market: props.market,
                shopperId: props.shopperId,
                privateLabelId,
                messages: {
                    noNotificationsTitle: messages[golf.noNotificationsTitle],
                    noNotificationsText: messages[golf.noNotificationsText],
                    failedNotificationsTitle: messages[golf.failedNotificationsTitle],
                    failedNotificationsText: messages[golf.failedNotificationsText],
                    failedNotificationsLink: messages[golf.failedNotificationsLink],
                    headerText
                },
                tooltip: headerText,
                ...urls.notifications
            };

            if (props.notificationsVersion === 2 && props.features && props.features.notifsV2 && privateLabelId === 1) {
                return ( < Notifications { ...notificationProps
                    }
                    />);
                }
                return ( < LegacyNotifications { ...notificationProps
                    }
                    />);
                }

                /**
                 * Renders help, notifications, account tray, cart in that order
                 * @param  {Object} cartProps  Props specific to cart
                 * @param  {Object} childProps Values assembled from combining props and state
                 * @returns {React.element} A right-aligned div containing global elements
                 */
                renderGlobalElements(cartProps, childProps) {
                    const props = this.props;
                    const components = this.components;
                    return ( <
                        div className = {
                            this.namespace('see-change-bar-right', 'justify-content-end')
                        } > {
                            components.help && this.renderHelpCenter()
                        } {
                            components.notifications && props.loggedIn &&
                                this.renderNotifications()
                        } {
                            components.accountTray && < AccountTray { ...childProps
                            }
                            />
                        } {
                            components.cart && < Cart { ...cartProps
                            }
                            />
                        } <
                        /div>
                    );
                }

                renderDomainSearch() {
                    const mobileSearch = < Link urlArgs = {
                        this.props.urlArgs
                    } { ...this.props.urls.domainSearch
                    }
                    className = {
                        this.namespace('mobile-header-domain-search')
                    }
                    />;

                    const action = `${this.props.urls.home.href}/domainsearch/find`;
                    return ( <
                        React.Fragment > {
                            mobileSearch
                        } <
                        FormattedMessage id = 'Sales:DomainSearch:Input:Placeholder' > {
                            (placeholder) =>
                            <
                            form method = 'GET'
                            action = {
                                action
                            }
                            className = {
                                this.namespace('input-group', 'header-domain-search')
                            } >
                            <
                            input placeholder = {
                                placeholder
                            }
                            type = 'text'
                            name = 'domainToCheck'
                            className = {
                                this.namespace('form-control')
                            }
                            /> <
                            span className = {
                                this.namespace('input-group-btn')
                            } >
                            <
                            Button design = 'addon'
                            type = 'submit'
                            value = 'Submit' >
                            <
                            Icon name = 'magnifying-glass' / >
                            <
                            /Button> <
                            /span> <
                            /form>
                        } <
                        /FormattedMessage> <
                        /React.Fragment>
                    );
                }

                renderHelpCenter() {
                    const {
                        seechange,
                        fullHelpLinkId,
                        urlArgs,
                        urls
                    } = this.props;
                    let eid;

                    if (seechange) {
                        eid = 'uxp.hyd.utility_bar_seechange.help.link.click';
                    } else if (fullHelpLinkId === 'Sales:HelpByGoDaddyGuides') {
                        eid = 'uxp.hyd.utility_bar_godaddyguides.help.link.click';
                    } else {
                        eid = 'uxp.hyd.utility_bar.help.link.click';
                    }

                    return ( < FormattedMessage id = {
                            fullHelpLinkId
                        } > {
                            (title) =>
                            <
                            Link
                            data - eid = {
                                eid
                            }
                            className = {
                                this.namespace('help-link')
                            }
                            urlArgs = {
                                urlArgs
                            } { ...urls.help
                            }
                            target = '_blank'
                            title = {
                                title
                            } >
                            <
                            span className = {
                                this.namespace('help-link-text')
                            } >
                            <
                            FormattedMessage id = {
                                fullHelpLinkId
                            }
                            /> <
                            /span> <
                            /Link>
                        } <
                        /FormattedMessage>
                    );
                }

                renderFeaturedNav() {
                    const {
                        featuredNav,
                        urlArgs
                    } = this.props;
                    const navs = featuredNav.map(item => {
                            if (!item.onlyMobile) {
                                const {
                                    id
                                } = item;
                                const eid = eidBuilder({
                                    key: id
                                });
                                return ( < LinkBuilder { ...item
                                    }
                                    key = {
                                        id
                                    }
                                    eid = {
                                        eid
                                    }
                                    urlArgs = {
                                        urlArgs
                                    }
                                    classNames = {
                                        this.namespace('d-none', 'd-lg-flex')
                                    }
                                    />);
                                }
                            });

                        return ( <
                            ul className = {
                                this.namespace('featured-nav')
                            } > {
                                navs
                            } <
                            /ul>
                        );
                    }

                    /**
                     * Render function for jsx specific to the minimize split
                     * @param  {Object} logoProps  Props specific to logo
                     * @param  {Object} cartProps  Props specific to cart
                     * @param  {Object} childProps Values assembled from combining props and state
                     * @returns {React.element} div for seechange elements
                     */
                    renderMinimize(logoProps, cartProps, childProps) {
                        const props = this.props;
                        const components = this.components;
                        const {
                            loggedIn
                        } = props;
                        const productPanelProps = {
                            control: < span className = {
                                this.namespace('product-flyout-btn-lines')
                            } > < /span>,
                            messages: props.messages,
                            urls: props.urls,
                            discoverNav: props.discoverNav,
                            productNav: props.navigation,
                            urlArgs: props.urlArgs,
                            isInGoCohort: props.isInGoCohort,
                            loggedIn: loggedIn,
                            globalElements: !props.minimize
                        };

                        return ( <
                            div className = {
                                this.namespace('flex-row', 'd-flex')
                            } >
                            <
                            div className = {
                                this.namespace('see-change-bar-left', 'd-flex')
                            } > {
                                components.logo &&
                                <
                                div className = {
                                    this.namespace('topnav-logo-wrap')
                                } >
                                <
                                Logo { ...logoProps
                                }
                                /> <
                                /div>
                            } {
                                components.productPanel && < ProductPanel { ...productPanelProps
                                }
                                />
                            } {
                                props.featuredNav && this.renderFeaturedNav()
                            } {
                                components.domainSearch && this.renderDomainSearch()
                            } <
                            /div> {
                                this.renderGlobalElements(cartProps, childProps)
                            } <
                            /div>
                        );
                    }

                    /**
                     * Render function for jsx in all non-minimize instances of utility-bar
                     * @param  {Object} logoProps  Props specific to logo
                     * @param  {Object} cartProps  Props specific to cart
                     * @param  {Object} childProps Values assembled from combining props and state
                     * @returns {React.element} div for normal rendering of elements
                     */
                    renderNormal(logoProps, cartProps, childProps) {
                        const props = this.props;
                        const components = this.components;
                        const eids = this.eids;
                        const {
                            features
                        } = childProps;
                        const marketSelectorProps = assign({
                            currentPage: props.currentPage,
                            manifest: props.manifest,
                            eidPrefix: 'uxp.hyd',
                            urls: props.urls,
                            urlArgs: props.urlArgs,
                            messages: props.messages,
                            currentMarket: props.market,
                            numColumns: this.state.breakpoint === 'tablet' ? 2 : 4,
                            marketData: props.marketData,
                            isReseller: props.isReseller
                        }, props.marketSelector);
                        const contactTrayProps = assign({
                            contactTrayEnabled: features.contactTray,
                            utilityChatEnabled: features.utilityChat,
                            shopperId: props.customer.shopperId
                        }, props);

                        const utilSeparator = < div className = {
                            this.namespace(
                                this.classNames('util-separator', {
                                    growthnav2: props.growthnav2
                                }))
                        }
                        />;

                        return ( <
                            div className = {
                                this.namespace('row')
                            } >
                            <
                            div className = {
                                this.namespace('flex-row')
                            } >
                            <
                            div className = {
                                this.namespace('utility-left-nav')
                            } > {
                                components.backLink &&
                                <
                                BackLink { ...props.backLink
                                }
                                />
                            } {
                                components.logo &&
                                    <
                                    div className = {
                                        this.namespace('topnav-logo-wrap')
                                    } >
                                    <
                                    Logo { ...logoProps
                                    }
                                /> <
                                /div>
                            } {
                                components.marketSelector && !props.isReseller &&
                                    <
                                    div className = {
                                        this.namespace('market-selector-container')
                                    } >
                                    <
                                    MarketSelector { ...marketSelectorProps
                                    }
                                /> <
                                /div>
                            } <
                            /div> <
                            div className = {
                                this.namespace('utility-right-nav')
                            } > {
                                components.utilitySeparator && props.isPaymentHeader && utilSeparator
                            } {
                                components.contactTray &&
                                    <
                                    ContactTray { ...contactTrayProps
                                    }
                                />
                            } {
                                components.marketSelector && props.isReseller && < MarketSelector { ...marketSelectorProps
                                }
                                />
                            } {
                                // if there is no props.urls.blog, then blog is blacklisted
                                components.blog && props.urls.blog &&
                                    <
                                    Link
                                className = {
                                    this.namespace('blog-link')
                                }
                                urlArgs = {
                                    props.urlArgs
                                } { ...props.urls.blog
                                }
                                data - eid = {
                                        eids.blogLink
                                    } >
                                    <
                                    FormattedMessage id = {
                                        golf.blogLink
                                    }
                                /> <
                                /Link>
                            } {
                                components.help && this.renderHelpCenter()
                            } {
                                components.utilitySeparator &&
                                    props.loggedIn && utilSeparator
                            } {
                                components.notifications && this.props.loggedIn &&
                                    this.renderNotifications()
                            } {
                                components.utilitySeparator && !props.isPaymentHeader && utilSeparator
                            } {
                                components.utilitySeparator && props.isPaymentHeader &&
                                    !props.loggedIn && utilSeparator
                            } {
                                components.accountTray && < AccountTray { ...childProps
                                }
                                />
                            } {
                                components.cart && < Cart { ...cartProps
                                }
                                />
                            } <
                            /div> <
                            /div> <
                            /div>
                        );
                    }

                    /**
                     * Renders either minimize or normal utility-bar
                     * @returns {React.element} the whole utility-bar
                     */
                    render() {
                        const props = this.props;
                        const {
                            logos,
                            isReseller,
                            resellerStorefrontLogoSize
                        } = props;
                        const components = this.components;
                        const childProps = this.getChildProps();
                        const marketInfo = props.marketData[props.market];
                        const isPrivateLabel = props.privateLabelId !== 1;
                        this.countryName = marketInfo ? marketInfo.countryName : 'United States';

                        // Only apply logo size class name on reseller storefront for private
                        // labels with a desktop logo and a size setting other than 'small'.
                        const plLogoSize = isReseller && isPrivateLabel && logos && logos.desktop &&
                            resellerStorefrontLogoSize && resellerStorefrontLogoSize !== 'small' &&
                            `pl-${resellerStorefrontLogoSize}-logo`;

                        const logoProps = assign({
                            'className': this.namespace('topnav-logo', plLogoSize),
                            'spanClass': this.namespace('logo-wrap'),
                            'showCountryNameOnLogo': !this.isMobile,
                            'country': this.countryName,
                            'href': props.urls.home.href,
                            'logos': props.logos,
                            'market': props.market,
                            'messages': props.messages,
                            'privateLabelId': props.privateLabelId,
                            'privateLabelName': props.privateLabelName,
                            'urlArgs': props.urlArgs,
                            'includeGDHead': false,
                            'tempLogo': props.tempLogo,
                            'urls': props.urls,
                            'data-eid': props.seechange ?
                                'uxp.hyd.utility_bar_seechange.logo.link.click' : 'uxp.hyd.utility_bar.logo.link.click'
                        }, props.logo);

                        const cartProps = assign({}, props.cart);

                        if (typeof this.props.items === 'number') {
                            cartProps.items = this.props.items;
                        }

                        const isLanguageHeader = props.preset === 'language-header';

                        const utilityBarClasses = this.namespace(this.classNames({
                            'utility-bar': !props.seechange,
                            'single-use-header': components.logo && !props.isPaymentHeader && !props.seechange,
                            'payment-header': props.isPaymentHeader,
                            'pl': isPrivateLabel,
                            'pl-no-logo': isPrivateLabel && (!logos || (!(this.isMobile ? logos.mobile : logos.desktop))),
                            'reseller': isReseller,
                            'language-header': isLanguageHeader && !props.seechange,
                            'logged-in': props.loggedIn,
                            'see-change-bar': props.seechange
                        }));

                        return ( <
                            IntlProvider locale = {
                                props.market
                            }
                            messages = {
                                props.messages
                            } >
                            <
                            div > {
                                components.accountDelegation &&
                                <
                                AccountDelegation
                                market = {
                                    props.market
                                }
                                messages = {
                                    props.messages
                                }
                                action = {
                                    props.urls.sso.exitDelegation.href
                                }
                                restoreCookie = {
                                    props.urls.sso.restoreCookie.href
                                }
                                customer = {
                                    props.customer
                                }
                                />
                            } <
                            div className = {
                                utilityBarClasses
                            } >
                            <
                            div className = {
                                this.namespace(props.minimize ? 'container-fluid' : 'container')
                            } > {
                                props.minimize ?
                                this.renderMinimize(logoProps, cartProps, childProps) : this.renderNormal(logoProps, cartProps, childProps)
                            } <
                            /div> <
                            /div> <
                            /div> <
                            /IntlProvider>
                        );
                    }
                }

                UtilityBar.propTypes = {
                    ...NamespaceShape,
                    components: PropTypes.shape({
                        backLink: PropTypes.bool,
                        marketSelector: PropTypes.bool,
                        contactTray: PropTypes.bool,
                        help: PropTypes.bool,
                        notifications: PropTypes.bool,
                        accountTray: PropTypes.bool,
                        cart: PropTypes.bool,
                        blog: PropTypes.bool,
                        logo: PropTypes.bool
                    }),
                    backLink: PropTypes.shape({
                        href: PropTypes.string,
                        title: PropTypes.string,
                        eid: PropTypes.string
                    }),
                    bottomNav: PropTypes.array,
                    contactTray: PropTypes.object,
                    currentHref: PropTypes.string,
                    customer: PropTypes.object.isRequired,
                    discoverNav: PropTypes.array,
                    features: PropTypes.object.isRequired,
                    growthnav2: PropTypes.bool,
                    loggedIn: PropTypes.bool,
                    manifest: PropTypes.string,
                    market: PropTypes.string.isRequired,
                    marketSelector: PropTypes.object,
                    marketData: PropTypes.object,
                    messages: PropTypes.object.isRequired,
                    minimize: PropTypes.bool,
                    navigation: PropTypes.array,
                    notificationsVersion: PropTypes.number,
                    privateLabelId: PropTypes.number,
                    privateLabelName: PropTypes.string,
                    seechange: PropTypes.bool,
                    supportContacts: PropTypes.object,
                    setProductNav: PropTypes.func,
                    tempLogo: PropTypes.object,
                    urlArgs: PropTypes.object,
                    urls: PropTypes.object.isRequired,
                    utilityBarNav: PropTypes.arrayOf(PropTypes.object),
                    isPaymentHeader: PropTypes.bool,
                    isReseller: PropTypes.bool,
                    enableHelpSearchContactTray: PropTypes.bool,
                    fullHelpLinkId: PropTypes.string,
                    resellerStorefrontLogoSize: PropTypes.string
                };

                UtilityBar.defaultProps = {
                    utilityBarNav: [],
                    components: defaultComponents,
                    contactTray: {
                        compact: true
                    },
                    features: {},
                    growthnav2: false,
                    minimize: false,
                    privateLabelId: 1,
                    privateLabelName: '',
                    seechange: false,
                    isPaymentHeader: false,
                    isReseller: false,
                    marketData: {},
                    fullHelpLinkId: golf.helpLink,
                    enableHelpSearchContactTray: false
                };

                export default withNamespace(UtilityBar);