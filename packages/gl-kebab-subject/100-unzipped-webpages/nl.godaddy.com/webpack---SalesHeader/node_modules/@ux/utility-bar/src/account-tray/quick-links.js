/* jscs:disable requireSpacesInsideJsxExpressionContainers */

import React from 'react';
import PropTypes from 'prop-types';
import {
    TrayTitle
} from '@ux/tray-menu';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import Link from '@ux/link';
import eidBuilder from '../eid';

/**
 * Render Quick Links section.
 *
 * @Constructor
 * @class QuickLinks
 * @api public
 */
class QuickLinks extends NamespaceConsumer {
    /**
     * Build the items in a list
     *
     * @param {LinkItem[]} items An array of objects containing the details of a list item
     * @returns {React.ReactElement[]} An array of list items containing a link
     * @api private
     */
    listItemBuilder(items) {
        return items.map(item => {
            const captionOrId = item.caption || item.id;
            return ( <
                li key = {
                    captionOrId
                } >
                <
                Link urlArgs = {
                    this.props.urlArgs
                }
                href = {
                    item.href
                }
                data - eid = {
                    eidBuilder({
                        key: captionOrId,
                        manifest: this.props.manifest
                    })
                } > {
                    item.caption ? < FormattedMessage id = {
                        item.caption
                    }
                    /> : <span>{ item.title }</span >
                } <
                /Link> <
                /li>
            );
        });
    }

    /**
     * @typedef {Object} LinkItem
     * @prop {LinkItem[]} [children] Array of objects that hold individual list items (caption, href)
     * @prop {String} [caption] Golf string
     * @prop {String} [title] Pre-translated text -- either caption or title must be set
     * @prop {String} [id] Identifier for item -- either caption or ID must be set
     * @prop {String} [href] Optional URL to link to
     */
    /**
     * Build a list
     *
     * @param {LinkItem[]} items An object containing the details for lists to build
     * @returns {Array} An array of lists
     * @api private
     */
    listBuilder(items) {
        if (!items) {
            return;
        }

        // https://github.secureserver.net/UX/eldorado/blob/master/application/includes/all-products-menu.jade#L14-L19
        const colCount = items.length;
        let colClassNum = 2;
        if (colCount === 5) {
            colClassNum = 15;
        } else if (colCount === 6 || colCount <= 4) {
            colClassNum = Math.floor(12 / colCount);
        }

        return items.map(item => {
                return ( <
                    div key = {
                        item.caption || item.id
                    }
                    className = {
                        this.namespace(`col-md-${colClassNum}`)
                    } >
                    <
                    ul className = {
                        this.namespace('list-unstyled')
                    } > {
                        (item.caption || item.title) &&
                        <
                        li >
                        <
                        strong > {
                            item.caption ? < FormattedMessage id = {
                                item.caption
                            }
                            /> : <span>{ item.title }</span >
                        } <
                        /strong> <
                        /li> } {
                            this.listItemBuilder(item.children)
                        } <
                        /ul> <
                        /div>
                    );
                });
        }

        render() {
            const props = this.props;
            const utilityBarNavs = props.utilityBarNav || [];
            let quickLinks = {};

            for (let i = 0; i < utilityBarNavs.length; i++) {
                const nav = utilityBarNavs[i];
                const captionOrId = nav.caption || nav.id;
                if (captionOrId && (~captionOrId.indexOf('QuickLinks'))) {
                    quickLinks = nav;
                    break;
                }
            }

            if ((!quickLinks.caption && !quickLinks.title) || !quickLinks.children) {
                return null;
            }

            return ( <
                IntlProvider locale = {
                    props.market
                }
                messages = {
                    props.messages
                } >
                <
                div className = {
                    this.namespace('col-xl-5', 'pull-xl-7', 'col-lg-6', 'pull-lg-6', 'inbox-links')
                } >
                <
                TrayTitle > {
                    quickLinks.caption ? < FormattedMessage id = {
                        quickLinks.caption
                    }
                    /> : <span>{ quickLinks.title }</span >
                } <
                /TrayTitle> <
                div className = {
                    this.namespace('row', 'quick-links')
                } > {
                    this.listBuilder(quickLinks.children)
                } <
                /div> <
                /div> <
                /IntlProvider>
            );
        }
    }

    /**
     * Require properties.
     *
     * @type {Object}
     * @api public
     */
    QuickLinks.propType = {
        ...NamespaceShape,
        urls: PropTypes.object.isRequired,
        market: PropTypes.string.isRequired,
        messages: PropTypes.object.isRequired,
        utilityBarNav: PropTypes.arrayOf(PropTypes.object)
    };

    export default withNamespace(QuickLinks);