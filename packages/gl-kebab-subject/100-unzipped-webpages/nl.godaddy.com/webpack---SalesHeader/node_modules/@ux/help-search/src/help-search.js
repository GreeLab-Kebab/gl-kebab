import React from 'react';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import PropTypes from 'prop-types';
import Button from '@ux/button';
import Form from '@ux/form';
import Pivots from '@ux/pivot';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    request
} from '@ux/util';


const helpSearchUrl = 'https://www.godaddy.com/help/search';
const searchIndices = 'hcbf'; // h - help, c - community, b - blog, f - fos
const maxResultsCount = 6;
const maxInputLength = 500;
const maxSubtitleLength = 34;

/**
 * Help Search component
 *
 * @Constructor
 * @class HelpSearch
 * @public
 */
class HelpSearch extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            queryText: '',
            results: null,
            resultCount: 0
        };

        this.onQueryKeyPress = this.onQueryKeyPress.bind(this);
        this.onQueryChange = this.onQueryChange.bind(this);
        this.submitForm = this.submitForm.bind(this);
        this.startOver = this.startOver.bind(this);
    }

    /**
     * Sends traffic event with location and shopper id
     *
     * @param {String} eventType The custom event type
     * @param {String} eid The traffic event id
     * @param {Object} args The traffic event arguments
     * @private
     */
    trafficEvent(eventType, eid, args) {
        if (window._trfq) {
            args.push(['location', 'contacttray']);
            args.push(['shopperId', this.props.shopperId]);
            window._trfq.push(['cmdLogPageEvent', eventType, eid, args]);
        }
    }

    /**
     * Sends search related traffic events
     *
     * @param {String} eventType The custom event
     * @param {String} eid The search traffic event id
     * @param {String} query The associated search query
     * @param {Object} results The associated search results if any
     * @private
     */
    searchTrafficEvent(eventType, eid, query, results) {
        const trfqArgs = [
            ['query', query]
        ];
        if (results) {
            trfqArgs.push(['count', results.length]);
            for (let i = 0, len = results.length; i < len; i++) {
                trfqArgs.push([`${i + 1}`, results[i].link]);
            }
        }
        this.trafficEvent(eventType, eid, trfqArgs);
    }

    /**
     * Handler for search query response data
     *
     * @param {String} query The associated search query
     * @param {Object} results The search results
     * @private
     */
    handleResults(query, results) {
        this.searchTrafficEvent('notify', 'mcx.help.serp.results', query, results);
        this.setState({
            results,
            resultCount: results.length
        });
    }

    /**
     * Handler for search query response with no results and/or error
     *
     * @param {String} query The associated search query
     * @param {Object} error If specified has unexpected status or error info
     * @private
     */
    handleNoResults(query) {
        this.searchTrafficEvent('notify', 'mcx.help.serp.results', query, []);

        const noResultItem = {
            title: this.props.messages['Sales:HelpSearch:Results:None'],
            link: '#',
            onClick: this.startOver
        };

        this.setState({
            results: [noResultItem],
            resultCount: 0
        });
    }

    /**
     * Click handler for search results.  Sends traffic event before changing location
     *
     * @param {Object} evt The click event object
     * @param {String} link The target result link
     * @param {Number} idx The one-based numeric index of the selected result item
     * @private
     */
    resultOnClick(evt, link, idx) {
        evt.preventDefault();

        this.trafficEvent('notify', 'mcx.help.serp.results.article.click', [
            ['item', idx + 1],
            ['url', link]
        ]);

        setTimeout(function() {
            window.location = link;
        }, 150);
    }

    /**
     * @returns {String} search link
     *
     * @private
     */
    getSearchLink() {
        const query = this.state.queryText.trim();
        const searchArgs = `?path=${ searchIndices }&q=${ encodeURIComponent(query) }`;
        return helpSearchUrl + searchArgs;
    }

    /**
     * Performs search of user query on help articles, community and blogs
     *
     * @private
     */
    doSearchQuery() {
        const query = this.state.queryText.trim();
        if (this.props.onSubmit) {
            this.props.onSubmit(query);
        }

        this.searchTrafficEvent('search', 'mcx.help.search', query);

        const searchArgs = `?path=${ searchIndices }&s=false&fmt=json` +
            `&size=${ maxResultsCount }&q=${ encodeURIComponent(query) }`;

        request.get(helpSearchUrl + searchArgs, {
            mode: ''
        }, (err, data) => {
            if (err) {
                return this.handleNoResults(query, err);
            }
            if (!data.results) {
                return this.handleNoResults(query, 'No result set returned');
            }
            if (data.results.length) {
                return this.handleResults(query, data.results);
            }
            this.handleNoResults(query);
        });
    }

    /**
     * Handles keypress events to wire up enter key to doSearchQuery
     *
     * @param {Object} evt The event object
     * @private
     */
    onQueryKeyPress(evt) {
        if (evt.key === 'Enter') {
            evt.preventDefault();
            this.doSearchQuery();
        }
    }

    /**
     * Looks for changes to query text in order to enable / disable submit button.
     *
     * Also, removes a few characters not used in search that would otherwise require special
     * handling for traffic data and XSS ('>', '<', '^', ',')
     *
     * @param {Object} evt The event object
     * @private
     */
    onQueryChange(evt) {
        this.setState({
            queryText: evt.target.value.replace(/[><,^]/g, '')
        });
    }

    /**
     * Form submit handler which calls help search which renders result pane on response
     *
     * @param {Object} evt The event object
     * @private
     */
    submitForm(evt) {
        evt.preventDefault();
        this.doSearchQuery();
    }

    /**
     * When user starts over the results state is cleared which causes query input pane to render
     *
     * @param {Object} evt The event object
     * @private
     */
    startOver(evt) {
        this.trafficEvent('notify', 'mcx.help.serp.start-over', []);
        this.setState({
            results: null
        });
        evt.stopPropagation();
    }

    /**
     * @returns {React.Element} search panel
     *
     * @private
     */
    renderSearchPanel() {
        const query = this.state.queryText.trim();

        return ( <
            div className = {
                this.namespace('col-lg-9', 'col-md-8')
            } >
            <
            div className = {
                this.namespace('help-search-hdr')
            } >
            <
            div className = {
                this.namespace('margin-compressed', 'h3')
            } > < FormattedMessage id = {
                'Sales:HelpSearch:Input:Heading'
            }
            /></div >
            <
            FormattedMessage id = {
                'Sales:HelpSearch:Input:Desc'
            }
            /> <
            /div> <
            Form action = '#'
            onSubmit = {
                this.submitForm
            } >
            <
            label htmlFor = 'help-search'
            className = 'sr-only' >
            <
            FormattedMessage id = {
                'Sales:HelpSearch:Input:Accessbility:Label'
            }
            /> <
            /label> <
            textarea id = 'help-search'
            className = {
                this.namespace('help-search-input', 'form-control', 'font-base')
            }
            placeholder = {
                this.props.messages['Sales:HelpSearch:Input:Example']
            }
            maxLength = {
                maxInputLength
            }
            value = {
                this.state.queryText
            }
            onKeyPress = {
                this.onQueryKeyPress
            }
            onChange = {
                this.onQueryChange
            }
            /> <
            label htmlFor = 'help-search'
            className = {
                this.namespace('help-search-input-limit')
            } >
            <
            FormattedMessage id = {
                'Sales:HelpSearch:Input:SearchLimit'
            }
            /> <
            /label> <
            br / >
            <
            Button ariaLabel = {
                this.props.messages['Sales:HelpSearch:Input:Submit']
            }
            className = {
                this.namespace('help-search-submit')
            }
            type = 'submit'
            design = 'primary'
            disabled = {
                query.length === 0
            } >
            <
            FormattedMessage id = {
                'Sales:HelpSearch:Input:Submit'
            }
            /> <
            /Button> <
            /Form> <
            /div>
        );
    }

    /**
     * @returns {React.Element} a result item as slat type pivot
     *
     * @param {Object} results The search results
     * @param {Number} idx The zero-based index of result to render
     * @private
     */
    renderResult(results, idx) {
        if (results.length <= idx) {
            return null;
        }

        const result = results[idx];

        var location = result.location || '';
        if (location.length > maxSubtitleLength) {
            location = location.substr(0, maxSubtitleLength) + '...';
        }

        const data = [{
                title: result.title,
                href: `#${idx + 1}`,
                graphic: ( < img src = {
                        result.imageUrl
                    }
                    alt = ''
                    style = {
                        {
                            display: 'none'
                        }
                    }
                    />),
                    subtitle: location !== 'Blog' ? location :
                    `${this.props.messages['Sales:HelpSearch:Results:By']} ${result.author}`,
                    onClick: result.onClick || (evt => {
                        this.resultOnClick(evt, result.link, idx);
                    })
                }];

            return ( <
                div className = {
                    this.namespace('help-search-rslt-item', 'card')
                } >
                <
                Pivots pivotList = {
                    data
                }
                design = 'slats' / >
                <
                /div>
            );
        }

        /**
         * @returns {React.Element} a column of results
         *
         * @param {Number} columnIdx The zero-based index of column to render
         * @private
         */
        renderResultsColumn(columnIdx) {
            const offset = columnIdx * 3;
            return ( <
                div className = {
                    this.namespace('help-search-rslt-col', 'col-lg-6',
                        columnIdx === 0 ? 'col-md-12' : 'hidden-md-down')
                } > {
                    this.renderResult(this.state.results, offset + 0)
                } {
                    this.renderResult(this.state.results, offset + 1)
                } {
                    this.renderResult(this.state.results, offset + 2)
                } <
                /div>
            );
        }

        /**
         * @returns {React.Element} results panel with multiple columns for desktop and single column for mobile
         *
         * @private
         */
        renderResultsPanel() {
            return ( <
                div className = {
                    this.namespace('col-md-12')
                } >
                <
                div className = {
                    this.namespace('help-search-rslt-hdr', 'help-search-hdr')
                } >
                <
                button aria - label = {
                    this.props.messages['Sales:HelpSearch:Results:Previous']
                }
                className = {
                    this.namespace('help-search-back', 'uxicon',
                        'uxicon-chevron-left-lt', 'hidden-sm-down', 'btn', 'btn-link')
                }
                href = '#'
                style = {
                    {
                        visibility: this.state.results ? 'visible' : 'hidden'
                    }
                }
                onClick = {
                    this.startOver
                } >
                <
                /button> <
                div className = {
                    this.namespace('margin-compressed', 'h3')
                } >
                <
                FormattedMessage id = {
                    'Sales:HelpSearch:Results:Heading'
                }
                /> <
                /div> <
                button aria - label = {
                    this.props.messages['Sales:HelpSearch:Results:StartOver']
                }
                className = {
                    this.namespace('help-search-start-over', 'btn', 'btn-link')
                }
                href = '#'
                onClick = {
                    this.startOver
                } >
                <
                FormattedMessage id = {
                    'Sales:HelpSearch:Results:StartOver'
                }
                /> <
                /button> <
                /div> <
                div className = {
                    this.namespace('row')
                } > {
                    this.renderResultsColumn(0)
                } {
                    this.renderResultsColumn(1)
                } <
                /div> <
                div className = {
                    this.namespace('row')
                } >
                <
                div className = {
                    this.namespace('help-search-more-answers')
                }
                style = {
                    {
                        visibility: this.state.resultCount ? 'visible' : 'hidden'
                    }
                } >
                <
                a className = {
                    this.namespace('no-underline')
                }
                aria - label = {
                    this.props.messages['Sales:HelpSearch:Results:MoreAnswers']
                }
                href = {
                    this.getSearchLink()
                } >
                <
                FormattedMessage id = {
                    'Sales:HelpSearch:Results:MoreAnswers'
                }
                /> <
                /a> <
                /div> <
                /div> <
                /div>
            );
        }

        /**
         * @returns {React.Element} search panel or results panel depending on state.
         *
         * @private
         */
        render() {
            return ( <
                IntlProvider locale = {
                    this.props.market
                }
                messages = {
                    this.props.messages
                } >
                <
                div className = {
                    this.namespace('help-search-ctl', 'row')
                } > {
                    (!this.state.results) ? this.renderSearchPanel() : this.renderResultsPanel()
                } <
                /div> <
                /IntlProvider>
            );
        }
    }

    /**
     * Property definitions.
     *
     * @type {Object}
     * @public
     */
    HelpSearch.propTypes = {
        ...NamespaceShape,
        market: PropTypes.string.isRequired,
        messages: PropTypes.object.isRequired,
        shopperId: PropTypes.string.isRequired,
        onSubmit: PropTypes.func
    };

    export default withNamespace(HelpSearch);