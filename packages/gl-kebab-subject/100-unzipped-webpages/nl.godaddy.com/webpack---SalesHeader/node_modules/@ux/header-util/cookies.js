import {
    cookie,
    json
} from '@ux/util';
import {
    get
} from './helpers';

const browser = typeof document !== 'undefined';

/**
 * Collection of cookies, read out cookie info_idp on construction.
 *
 * @Constructor Cookies.
 * @param {Object} options Optional configuration.
 * @api public
 */
export default class Cookies {
    constructor() {
        this.idp = {};
        this.getIdpProperty = get(this.idp);

        this.updateRealm('idp');

        this.jomax = {};
        this.getJomaxProperty = get(this.jomax);

        this.updateRealm('jomax');
    }

    /**
     * Get the customers shopper id from the cookie.
     *
     * @returns {String} Shopper id.
     * @api public
     */
    get shopperId() {
        return this.getIdpProperty('info_shopperId');
    }

    /**
     * Get the encrypted shopper ID from the ShopperId<plid> cookie
     * @param {String} env Environment (e.g. prod, test, dev)
     * @param {Number} plid Private label ID
     * @returns {String|Undefined} encrypted shopper ID or undefined
     * @public
     */
    getEncryptedShopperId(env, plid) {
        const cookieEnv = env === 'prod' ? '' : env;
        return cookie.get(`${cookieEnv}ShopperId${plid}`) || undefined; // eslint-disable-line no-undefined
    }

    /**
     * Update the cached cookies values.
     * (For backwards compatibility since this was previously marked as public)
     *
     * @returns {Cookies} fluent interface.
     * @api public
     */
    updateIdp() {
        return this.updateRealm('idp');
    }

    /**
     * Update the cached cookies values.
     *
     * @param {String} [realm='idp'] The authentication realm to update
     * @returns {Cookies} fluent interface.
     * @api private
     */
    updateRealm(realm = 'idp') {
        if (!browser) {
            return this;
        }

        const titleCaseRealm = realm[0].toUpperCase() + realm.substr(1);

        this[realm] = json.parse(cookie.get(`info_${realm}`)) || {};
        this[`get${titleCaseRealm}Property`] = get(this[realm]);
        return this;
    }

    /**
     * Get the requested properties from the cookie for the specified realm.
     *
     * @param {Array} properties properties to extract.
     * @param {Object} replace Optional object with strings to replace.
     * @returns {Object} Collection of extracted properties.
     * @api public
     */
    getIdpProperties(properties, replace) {
        return Cookies.getRealmPropertiesFromObject(this.idp, properties, replace);
    }

    /**
     * Get the requested properties from the specified object
     *
     * @param {Object} obj The object to extract properties from
     * @param {Array} properties properties to extract.
     * @param {Object} replace Optional object with strings to replace.
     * @returns {Object} Collection of extracted properties.
     * @package
     */
    static getRealmPropertiesFromObject(obj, properties, replace = {}) {
        const getProp = get(replace);

        if (!Array.isArray(properties)) {
            properties = [properties];
        }

        return properties.reduce((result, property) => {
            if (Array.isArray(property)) {
                result[getProp(property[property.length - 1], true)] = property.reduce((o, i) => o && o[i], obj);
                const desiredProp = property[property.length - 1];
                if (obj[desiredProp] && !result[desiredProp]) {
                    result[desiredProp] = obj[desiredProp];
                }
                return result;
            }

            result[getProp(property, true)] = obj[property];
            return result;
        }, {});
    }

    /**
     * Get the requested properties from the jomax cookie.
     *
     * @param {Array} properties properties to extract.
     * @param {Object} replace Optional object with strings to replace.
     * @returns {Object} Collection of extracted properties.
     * @api public
     */
    getJomaxProperties(properties, replace) {
        return Cookies.getRealmPropertiesFromObject(this.jomax, properties, replace);
    }
}