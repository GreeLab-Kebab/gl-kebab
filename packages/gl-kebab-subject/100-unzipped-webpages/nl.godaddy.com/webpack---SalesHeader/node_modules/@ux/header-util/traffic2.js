/* eslint no-undef: 0 */

import trfq, {
    gtm
} from 'react-trfq';
import {
    URL
} from '@ux/util';

export default {
    /**
     * Initialize traffic2.
     *
     * @param {Object} opts options object
     * @param {String} [opts.type=onload] type of initialization. values `disable`, `inline`, `onload`
     * @param {Boolean} [opts.beacon=true] whether to call beacon
     *
     * @private
     */
    init: function init(opts) {
        if (opts.type === 'disable') {
            return;
        }

        if (opts.type !== 'inline') {
            this.inject();
        }

        if (opts.beacon !== false) {
            this.beacon();
        }
    },

    /**
     * If there is a "ux" global (i.e. in the browser), then configure GTM immediately
     * with some values from ux.eldorado.data.props.
     *
     * @private
     */
    inject: function inject() {
        if (typeof ux !== 'undefined' && typeof window !== 'undefined') {
            const data = (ux.eldorado && ux.eldorado.data) || {};
            const {
                shopperId,
                privateLabelId
            } = data.props || {};
            gtm.configure({
                data: [
                    shopperId && {
                        shopperId: shopperId
                    },
                    privateLabelId && {
                        privateLabelId: privateLabelId
                    },
                    {
                        'tcc.status': 'on'
                    },
                    {
                        'tcc.gastatus': 'off'
                    }
                ].filter(Boolean)
            });
        }
    },

    /**
     * Logs a Traffic2 "beacon" event for the UX Platform team. This allows us to
     * get a gestalt for the total usage of all headers by all teams to better plan
     * new features and make prioritization features based on usage data.
     *
     * @private
     */
    beacon: function beacon() {
        if (typeof ux !== 'undefined' && typeof window !== 'undefined') {
            const url = new URL(window.location.href, true);
            const data = (ux.eldorado && ux.eldorado.data) || {};
            const {
                app,
                split,
                manifest,
                market,
                countryName,
                languageName,
                currency
            } = data.props || {};

            // UXCore 1 pages do not load ux.versions onto the page,
            // so we use ux.version's existence as a proxy for
            // "Is this page uxcore 1"?
            const uxcore = ux.versions ? 2 : 1;

            if (manifest && app) {
                trfq.logEvent(
                    `uxp.hyd.int.${manifest.toLowerCase()}.${app.replace('.', '_')}.impression`.replace(/-/g, '_'),
                    'impression', {
                        market,
                        split,
                        uxcore,
                        currency,
                        hostname: url.hostname,
                        path: url.path,
                        query: url.query,
                        country: countryName,
                        lang: languageName
                    }
                );
            }
        }
    }
};