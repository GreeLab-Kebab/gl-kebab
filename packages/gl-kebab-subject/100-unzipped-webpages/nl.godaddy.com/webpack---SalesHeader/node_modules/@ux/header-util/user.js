import {
    get
} from './helpers';
import Cookies from './cookies';
import shopperDataLoader from './shopper-data';

const status = [
    'partial',
    'full',
    'manager'
];

const inverseNameOrderMarkets = [
    'ja-JP',
    'ko-KR',
    'vi-VN',
    'zh-SG',
    'zh-TW',
    'zh-HK'
];

/**
 * User details.
 *
 * @Constructor User.
 * @param {Object} options Optional configuration.
 * @api public
 */
export default class User {
    constructor(options = {}) {
        this.options = options;
        this.market = options.market || 'en-US';

        this.cookies = new Cookies();
        this.set(options.data);
    }

    /**
     * Update user data and getter.
     *
     * @param {Object} data Dataset.
     * @api private
     */
    set(data) {
        this.data = data || {};
        this.get = get(data);
    }

    /**
     * Gets all store data as an object
     *
     * @returns {Object} User data
     * @api private
     */
    getAll() {
        return this.data;
    }

    /**
     * Makes a request against a url which expects shopper information.
     *
     * @param {String} url Request target.
     * @param {Function} done Continuation to respond to when complete
     * @api private
     */
    shopperRequest(url, done) {
        shopperDataLoader.shopperData({
            url,
            privateLabelId: this.options.privateLabelId,
            shopperId: this.shopperId
        }, done);
    }

    /**
     * Fetch all user details, unpack and store locally.
     * TODO: JSONP should not be enforced for details but CORS headers are missing.
     *
     * @param {Object} url Request targets.
     * @param {Function} done Completion callback
     * @api public
     */
    fetch(url, done) {
        this.fetchInternal(url, done);
    }

    /**
     * Fetch all user details, unpack and store locally.
     * TODO: JSONP should not be enforced for details but CORS headers are missing.
     *
     * @param {Object} url Request targets.
     * @param {Function} done Completion callback
     * @param {Function} [parseAdditionalData] Optional function that parses out additional data
     * @api private
     */
    fetchInternal(url, done, parseAdditionalData = null) {
        let additionalData = {};

        this.shopperRequest(url.gui, (error, details) => {
            if (error) {
                return done(error);
            }

            if (parseAdditionalData) {
                additionalData = parseAdditionalData(details);
            }

            details = { ...additionalData,
                ...details
            };
            this.set(details);

            done(null, details);
        });
    }

    /**
     * Return name to be displayed as customer or employee name.
     *
     * @param {Boolean} short Prefer short name.
     * @returns {String} Display name.
     * @api public
     */
    // eslint-disable-next-line complexity
    displayName(short) {
        // Content has already been generated, and we don't need to do so again.
        const name = this.get('displayName') || this.get('disp');
        if (name) {
            return name;
        }

        const firstName = this.get('firstName');
        const lastName = this.get('lastName');
        const fallback = this.get('name') ||
            this.get('userName') ||
            this.get('loginName') ||
            this.shopperId ||
            '';

        if (short) {
            const value = ~inverseNameOrderMarkets.indexOf(this.market) ?
                lastName :
                firstName;

            return value || fallback;
        }

        if (firstName) {
            // Some Asian countries are inverse the name order.
            return ~inverseNameOrderMarkets.indexOf(this.market) ?
                [lastName, firstName].filter(Boolean).join(' ').trim() :
                [firstName, lastName].filter(Boolean).join(' ').trim();
        }

        // Fallback to name, username or loginName
        return fallback;
    }

    /**
     * Returns purposefully short name to be used in Account Delegation.
     *
     * @returns {String} Name to use for Account Delegation (see @ux/account-delegation).
     * @api public
     */
    delegateName() {
        return this.get('displayName') || this.get('firstName');
    }

    /**
     * Return Shopper ID of customer.
     *
     * @returns {String} Shopper ID
     * @api public
     */
    get shopperId() {
        return this.get('shopperId') || this.cookies.shopperId;
    }

    /**
     * Return logged in status of user.
     *
     * @returns {Boolean} Logged in or not
     * @api public
     */
    get loggedIn() {
        return !!~status.indexOf(this.get('status')) || !!this.get('loginName');
    }

    /**
     * Return VIP details if available.
     *
     * @returns {Object} VIP data.
     * @api public
     */
    get vip() {
        return this.get('vip');
    }

    /**
     * Return number of items in cart.
     *
     * @returns {Number} Number of items in cart.
     * @api public
     */
    get cart() {
        return this.get('cartTotal');
    }
}