import {
    URL
} from '@ux/util';

/**
 * Add query parameters from props to the url.
 *
 * @param {String} url Logout or login link.
 * @param {Object} props Properties to merge with the query parameters object.
 * @returns {String} Configured url.
 * @api private
 */
function updateQuery(url, props) {
    url = new URL(url, true);

    return url.set('query', { ...url.query,
        ...props
    }).href;
}

/**
 * This function takes in a currentHref
 * and will return that with no query parameters OR if a
 * currentPage query parameter is present, it will utilize
 * that value and pass it back.
 *
 * @param {String} currentHref The currentHref usually passed thru props
 * @param {Bool} isBrowser A boolean indicating whether context is a browser
 * @param {String} location A string that represents document.location or window.location
 * @returns {String} A currentHref string without query params -OR- the value of the currentPage query parameter
 */
function updateCurrentHref(currentHref, isBrowser, location) {
    //
    // Logic originally from
    // https://github.secureserver.net/UX/product-nav/blob/119ebd4ffc55e41a4bfebe1c973f55de0c3e35bc/lib/product-nav.js#L37
    //
    if (isBrowser) {
        currentHref = location;
    }

    if (currentHref) {
        const currentUrl = new URL(currentHref, true);
        const qsCurrentHref = currentUrl.query.currentPage;
        if (qsCurrentHref) {
            currentHref = qsCurrentHref;
        } else {
            // Remove query string for comparisons
            currentUrl.set('query', {});
            currentHref = currentUrl.href;
        }
    }

    return currentHref;
}

export {
    updateQuery,
    updateCurrentHref
};