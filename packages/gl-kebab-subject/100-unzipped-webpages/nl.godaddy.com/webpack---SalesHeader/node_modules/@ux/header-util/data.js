import {
    URL
} from '@ux/util';
const qs = URL.qs;

/**
 * Expose 'smart' data object.
 *
 * @class Data
 * @api public
 */
export default class Data {
    constructor() {
        this.set(...arguments);
    }

    /**
     * Set property and value on the object. Unpack property if passed as object.
     *
     * @param {String} property Identifier.
     * @param {Mixed} value property values.
     * @returns {Data} Fluent interface
     * @api public
     */
    set(property, value) {
        if (!property) {
            return this;
        }

        if (property === 'urlArgs') {
            return this.setUrlArgs(value);
        }

        if (typeof property === 'object') {
            return Object.keys(property).forEach(prop => {
                this.set(prop, property[prop]);
            });
        }

        this[property] = value;
        return this;
    }

    /**
     * Performs a simple shallow merge of the value into property setting any default value.
     *
     * @param {String} property Identifier.
     * @param {Object} value property values.
     * @returns {Data} Fluent interface
     * @api public
     */
    merge(property, value) {
        if (!property || !value || typeof value !== 'object') {
            return this;
        }

        this[property] = {
            ...(this[property] || {}),
            ...value
        };

        return this;
    }

    /**
     * Safely sets `urlArgs` as an Object, converting any partial or complete
     * querystrings into objects as necessary.
     *
     * @param {Object|String} value Attempted value for urlArgs.
     * @returns {Data} Fluent interface
     * @api private
     */
    setUrlArgs(value) {
        const type = typeof value;
        if (type === 'string') {
            this.urlArgs = qs.parse(value);
            return this;
        }

        if (!value || type !== 'object') {
            this.urlArgs = {};
            return this;
        }

        this.urlArgs = value;
        return this;
    }

    /**
     * Returns sealed props object with keys and values, prevents React warnings.
     *
     * @returns {Object} Values.
     * @api public
     */
    get props() {
        return Object.seal(
            Object.getOwnPropertyNames(this).reduce((clone, key) => {
                clone[key] = this[key];
                return clone;
            }, {})
        );
    }
}