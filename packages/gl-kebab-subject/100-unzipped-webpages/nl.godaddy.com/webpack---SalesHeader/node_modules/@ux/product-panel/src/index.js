import React from 'react';
import PropTypes from 'prop-types';
import {
    golf,
    breakpoints
} from './enums';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import Cart from '@ux/cart';
import Icon from '@ux/icon';
import Link from '@ux/link';
import ParentPanel from './parent-panel';
import ChildPanel from './child-panel';
import golfToEid from 'golf-to-eid';
import {
    renderCaption
} from './utils';

export class ProductPanel extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            ...this.state,
            selectedParent: null,
            showChildPanel: false,
            open: false,
            runway: false,
            hideOnScroll: false
        };

        this.close = this.close.bind(this);
        this.goToParentMenu = this.goToParentMenu.bind(this);
        this.setSelected = this.setSelected.bind(this);
        this.toggleOpen = this.toggleOpen.bind(this);
        this.killRunway = this.killRunway.bind(this);
        this.compareDivs = this.compareDivs.bind(this);
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup;
    }

    componentDidUpdate(prevProps, prevState) {
        const {
            state
        } = this;
        const {
            open
        } = state;

        if (prevState.open !== open) {
            if (this.isBrowser) {
                const html = this.html = this.target || document.documentElement;
                html.className = this.classNames(
                    html.className,
                    this.mobileSafariClass, {
                        [this.namespace('product-flyout-open')]: open
                    }
                );
            }
        }

        if (this.isMobile) {
            let parentNeedsRunway = false;
            let childNeedsRunway = false;

            if (this.parentPanel) {
                parentNeedsRunway = this.compareDivs(this.parentPanel.outerDiv, this.parentPanel.innerDiv);
            } else if (this.childPanel) {
                childNeedsRunway = this.compareDivs(this.childPanel.outerDiv, this.childPanel.innerDiv);
            }

            if ((childNeedsRunway || parentNeedsRunway) &&
                !state.runway && !state.hideOnScroll) {
                this.setState({
                    runway: true
                });
            } else if (!state.open && state.runway) {
                this.setState({
                    runway: false
                });
            }
        }
    }

    componentDidMount() {
        this.breakpoint(...breakpoints);

        if (this.isBrowser) {
            const userAgent = window.navigator.userAgent;
            const iOS = userAgent.match(/iPhone|iPad/i); // iPad and iPhone user agent for Safari
            const mobileRegExp = /(iPad|iPhone).*WebKit(?:(?!(CriOS|FxiOS|OPiOS)).)*$/;
            this.mobileSafariClass = mobileRegExp.test(userAgent) ? this.namespace(`mobile-safari-${iOS[0].toLowerCase()}`) : '';
        }
    }

    /**
     * Compare the heights of two div references.
     * @param  {Element} outer Ref to a div
     * @param  {Element} inner Ref to a div
     * @returns {Boolean} True if inner height > outer height
     */
    compareDivs(outer, inner) {
        if (outer && inner) {
            const outerDivHeight = outer.clientHeight;
            const innerDivHeight = inner.clientHeight;
            return innerDivHeight > outerDivHeight;
        }
        return false;
    }

    /**
     * get rid of the runway
     *
     * @private
     */
    killRunway() {
        if (!this.state.runway) {
            return;
        }
        this.setState({
            runway: false,
            hideOnScroll: true
        });
    }

    /**
     * close the menu by setting state.open to be false
     *
     * @private
     */
    close() {
        this.setState({
            open: false,
            showChildPanel: false,
            selectedParent: null
        });
    }

    /**
     * click function to set open/close state of menu
     *
     * @private
     */
    toggleOpen() {
        const {
            open
        } = this.state;
        this.setState({
            open: !open
        });
    }

    /**
     * Set which parent is currently selected
     * @param {Object} item The parent nav item and its properties
     */
    setSelected(item) {
        this.setState({
            selectedParent: item,
            showChildPanel: true,
            hideOnScroll: false
        });
    }

    /**
     * click function to go back to the parent menu
     *
     * @private
     */
    goToParentMenu() {
        this.setState({
            showChildPanel: false,
            hideOnScroll: false
        });
    }

    /**
     * Render translucent background behind the navigation menu
     *
     * @private
     *
     * @returns {React.ReactElement} div for the background
     */
    renderBackground() {
        if (!this.state.open) {
            return null;
        }
        return ( <
            div onClick = {
                this.close
            }
            className = {
                this.namespace('product-panel-bkg')
            }
            role = 'presentation' / >
        );
    }

    /**
     * Render all panels containing children
     * @param  {Object[]} nav Array of child nav items
     * @returns {React.ReactElement[]} Array of child panels
     */
    renderChildPanels(nav) {
            const {
                state,
                props
            } = this;
            const panels = [];
            const {
                selectedParent
            } = state;
            const {
                caption = null, title = null
            } = selectedParent || {};
            nav.forEach((navItem) => {
                    if (navItem.children) {
                        const matchingCaption = caption && caption === navItem.caption;
                        const matchingTitle = title && title === navItem.title;
                        const open = state.showChildPanel && (
                            matchingCaption || matchingTitle
                        );
                        panels.push( < ChildPanel parent = {
                                navItem
                            }
                            onClose = {
                                this.close
                            }
                            onBack = {
                                this.goToParentMenu
                            }
                            open = {
                                open
                            }
                            navigation = {
                                navItem.children
                            }
                            eidPrefix = {
                                props.eidPrefix
                            }
                            key = {
                                navItem.caption || navItem.id
                            }
                            urlArgs = {
                                props.urlArgs
                            }
                            messages = {
                                props.messages
                            }
                            ref = {
                                (r) => {
                                    if (open) {
                                        this.childPanel = r;
                                    }
                                }
                            }
                            onScroll = {
                                this.killRunway
                            }
                            />);
                        }
                    });

                return panels;
            }

            /**
             * Renders the footer that exists on all panels
             * @returns {React.ReactElement} div for the flyout footer
             */
            renderPanelFooter() {
                const {
                    props
                } = this;
                const {
                    bottomNav
                } = props;

                return ( <
                    div className = {
                        this.namespace('product-flyout-footer')
                    } >
                    <
                    div className = {
                        this.namespace('container-fluid')
                    } >
                    <
                    div className = {
                        this.namespace('row')
                    } >
                    <
                    div className = {
                        this.namespace('col-md-7', 'product-flyout-legal')
                    } > {
                        bottomNav && Array.isArray(bottomNav) &&
                        bottomNav.map((item, i) => {
                            const {
                                caption,
                                title,
                                href,
                                id
                            } = item;
                            const text = caption || title;
                            return text && href && < Link
                            key = {
                                id || (caption + i)
                            }
                            href = {
                                href
                            }
                            urlArgs = {
                                props.urlArgs
                            }
                            onClicked = {
                                props.onClose
                            }
                            target = {
                                item.target
                            }
                            data - eid = {
                                    golfToEid(caption || id, {
                                        prefix: 'uxp.hyd.product_panel',
                                        postfix: 'link.click'
                                    })
                                } > {
                                    renderCaption(text, !caption)
                                } <
                                /Link>;
                        })
                    } <
                    /div> <
                    div className = {
                        this.namespace('col-md-5', 'product-flyout-selectors-wrap')
                    } > {
                        props.cornerContent
                    } <
                    /div> <
                    /div> <
                    /div> <
                    /div>
                );
            }

            renderRunway() {
                return ( <
                    div className = {
                        this.namespace(this.classNames(
                            'product-flyout-runway-container', {
                                show: this.state.runway
                            }))
                    } >
                    <
                    span className = {
                        this.namespace('uxicon', 'uxicon-chevron-down-lt')
                    }
                    /> <
                    span className = {
                        this.namespace('uxicon', 'uxicon-chevron-down-lt')
                    }
                    /> <
                    span className = {
                        this.namespace('uxicon', 'uxicon-chevron-down-lt')
                    }
                    /> <
                    /div>
                );
            }

            renderGlobalElements() {
                    const {
                        isInGoCohort,
                        urls,
                        messages,
                        cartProps,
                        loggedIn,
                        urlArgs,
                        globalElements
                    } = this.props;

                    if (!globalElements) {
                        return null;
                    }

                    let accountLink = urls.sso.login.href;
                    let accountLabel = messages[golf.signin];
                    if (loggedIn) {
                        accountLink = isInGoCohort ? urls.accountHome.href : urls.products.href;
                        accountLabel = messages[golf.home];
                    }
                    let cartEid = 'uxp.hyd.product_panel.cart_empty.link.click';
                    if (cartProps && cartProps.items > 0) {
                        cartEid = 'uxp.hyd.product_panel.cart_full.link.click';
                    }
                    return ( <
                            div className = {
                                this.namespace(
                                    this.classNames('global-elements', {
                                        'logged-in': loggedIn
                                    }))
                            } > {
                                globalElements.help && < Link href = {
                                    urls.help.href
                                }
                                ariaLabel = {
                                    messages[golf.helpCenter]
                                }
                                data - eid = 'uxp.hyd.product_panel.help.link.click'
                                urlArgs = {
                                    urlArgs
                                }
                                className = {
                                    this.namespace('help-link')
                                } >
                                <
                                /Link> } {
                                    loggedIn && globalElements.notifications
                                } {
                                    globalElements.accountTray && < Link href = {
                                        accountLink
                                    }
                                    ariaLabel = {
                                        accountLabel
                                    }
                                    data - eid = 'uxp.hyd.product_panel.account.link.click'
                                    urlArgs = {
                                        urlArgs
                                    }
                                    className = {
                                            this.namespace('user-account')
                                        } >
                                        <
                                        /Link> } {
                                            globalElements.cart && < Cart { ...cartProps
                                            }
                                            eid = {
                                                cartEid
                                            }
                                            /> } <
                                            /div>
                                        );
                                }

                                render() {
                                    const {
                                        props,
                                        state
                                    } = this;
                                    const parentPanelOpen = state.open && !state.showChildPanel;

                                    return ( <
                                        IntlProvider locale = {
                                            props.market
                                        }
                                        messages = {
                                            props.messages
                                        } >
                                        <
                                        React.Fragment >
                                        <
                                        div className = {
                                            this.namespace(this.classNames('product-flyout-btn-wrap', {
                                                'is-open': state.open
                                            }))
                                        } >
                                        <
                                        button data - eid = 'uxp.hyd.product_panel_control.button.click'
                                        onClick = {
                                            this.toggleOpen
                                        }
                                        className = {
                                            this.namespace('product-flyout-btn')
                                        } > {
                                            props.control
                                        } <
                                        /button> <
                                        /div>

                                        {
                                            this.renderBackground()
                                        } <
                                        div className = {
                                            this.namespace(
                                                this.classNames('product-flyout-menu', {
                                                    open: state.open
                                                }))
                                        } > {
                                            this.renderGlobalElements()
                                        } <
                                        FormattedMessage id = {
                                            golf.close
                                        } > {
                                            (closeTxt) =>
                                            <
                                            button onClick = {
                                                this.close
                                            }
                                            className = {
                                                this.namespace('close')
                                            }
                                            aria - label = {
                                                closeTxt
                                            }
                                            />
                                        } <
                                        /FormattedMessage> <
                                        ParentPanel onClose = {
                                            this.close
                                        }
                                        open = {
                                            parentPanelOpen
                                        }
                                        onParentClick = {
                                            this.setSelected
                                        }
                                        ref = {
                                            (r) => {
                                                if (parentPanelOpen) {
                                                    this.parentPanel = r;
                                                }
                                            }
                                        }
                                        onScroll = {
                                            this.killRunway
                                        } { ...props
                                        }
                                        /> {
                                            this.renderChildPanels(props.discoverNav)
                                        } {
                                            this.renderChildPanels(props.productNav)
                                        } {
                                            this.renderPanelFooter()
                                        } {
                                            this.renderRunway()
                                        } <
                                        /div> <
                                        /React.Fragment> <
                                        /IntlProvider>
                                    );
                                }
                            }

                            ProductPanel.propTypes = {
                                ...NamespaceShape,
                                productNav: PropTypes.arrayOf(PropTypes.object).isRequired,
                                discoverNav: PropTypes.arrayOf(PropTypes.object).isRequired,
                                bottomNav: PropTypes.arrayOf(PropTypes.object),
                                cartProps: PropTypes.object,
                                cornerContent: PropTypes.element,
                                control: PropTypes.element,
                                globalElements: PropTypes.oneOfType([
                                    PropTypes.shape({
                                        notifications: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),
                                        accountTray: PropTypes.bool,
                                        cart: PropTypes.bool,
                                        help: PropTypes.bool
                                    }),
                                    PropTypes.bool
                                ]),
                                isInGoCohort: PropTypes.bool,
                                loggedIn: PropTypes.bool,
                                market: PropTypes.string,
                                messages: PropTypes.object.isRequired,
                                onClick: PropTypes.func,
                                urls: PropTypes.object.isRequired,
                                urlArgs: PropTypes.object
                            };

                            /**
                             * Default property values.
                             *
                             * @type {Object}
                             * @public
                             */
                            ProductPanel.defaultProps = {
                                isInGoCohort: false,
                                loggedIn: false,
                                eidPrefix: 'uxp.hyd.product_panel_nav',
                                market: 'en-US',
                                control: < Icon name = 'grid-horizontal'
                                size = {
                                    18
                                }
                                />
                            };

                            export default withNamespace(ProductPanel);