import React from 'react';
import PropTypes from 'prop-types';
import {
    golf
} from './enums';
import {
    FormattedHTMLMessage
} from 'react-intl';
import golfToEid from 'golf-to-eid';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import Link from '@ux/link';
import {
    renderCaption
} from './utils';

export class ParentPanel extends NamespaceConsumer {
    constructor() {
        super(...arguments);
        this.renderParents = this.renderParents.bind(this);

        this.state = {
            ...this.state,
            hovered: false
        };
    }

    /**
     * Render top level headings for nav. If the nav has children,
     * the heading will trigger expansion of child panel
     *
     * @private
     * @param {Object[]} nav Array of objects for generating parent items
     * @returns {React.ReactElement[]} List items for parent nav items
     */
    renderParents(nav) {
        const props = this.props;

        return nav.map((item, i) => {
            const {
                caption,
                children,
                title,
                href,
                id
            } = item;
            const text = caption || title;
            if (text) {
                const eid = golfToEid(caption || id, {
                    prefix: props.eidPrefix,
                    postfix: 'link.click'
                });
                if (children && children.length > 0) {
                    // list item that will trigger a menu
                    return ( <
                        li className = {
                            this.namespace('parent-with-child')
                        }
                        key = {
                            id || (caption + i)
                        }
                        data - eid = {
                            eid
                        } >
                        <
                        button onClick = {
                            () => props.onParentClick(item)
                        }
                        onMouseEnter = {
                            () => this.setState({
                                hovered: true
                            })
                        }
                        onMouseLeave = {
                            () => this.setState({
                                hovered: false
                            })
                        } > {
                            renderCaption(text, !caption)
                        } <
                        /button> <
                        /li>
                    );
                } else if (href) {
                    // Plain link
                    return ( <
                        li key = {
                            id || (caption + i)
                        } >
                        <
                        Link href = {
                            href
                        }
                        data - eid = {
                            eid
                        }
                        urlArgs = {
                            this.props.urlArgs
                        }
                        onClicked = {
                            props.onClose
                        }
                        className = {
                            this.namespace('single-parent-link')
                        }
                        onMouseEnter = {
                            () => this.setState({
                                hovered: true
                            })
                        }
                        onMouseLeave = {
                            () => this.setState({
                                hovered: false
                            })
                        } > {
                            renderCaption(text, !caption)
                        } <
                        /Link> <
                        /li>
                    );
                }
            }
        });
    }


    render() {
        const {
            props,
            state
        } = this;

        return ( <
            div className = {
                this.namespace(this.classNames(
                    'parent-menu-panel', {
                        open: props.open
                    }, {
                        'product-flyout-hovered-menu': props.open && state.hovered
                    }))
            } >
            <
            div className = {
                this.namespace('container-fluid', 'menu-scroller')
            }
            onScroll = {
                this.props.onScroll
            }
            ref = {
                (r) => {
                    this.outerDiv = r;
                }
            } >

            <
            div className = {
                this.namespace('parent-navigation')
            }
            ref = {
                (r) => {
                    this.innerDiv = r;
                }
            } >

            <
            div >
            <
            div className = {
                this.namespace('product-flyout-heading')
            } >
            <
            FormattedHTMLMessage id = {
                golf.product
            }
            /> <
            /div> <
            ul className = {
                this.namespace('list-unstyled', 'parent-link-items', 'parent-product-nav')
            } > {
                this.renderParents(props.productNav)
            } <
            /ul> <
            /div> <
            div >
            <
            div className = {
                this.namespace('product-flyout-heading')
            } >
            <
            FormattedHTMLMessage id = {
                golf.discover
            }
            /> <
            /div> <
            ul className = {
                this.namespace('list-unstyled', 'parent-link-items', 'parent-discover-nav')
            } > {
                this.renderParents(props.discoverNav)
            } <
            /ul> <
            /div> <
            /div> <
            /div> <
            /div>
        );
    }
}

ParentPanel.propTypes = {
    ...NamespaceShape,
    productNav: PropTypes.arrayOf(PropTypes.object).isRequired,
    discoverNav: PropTypes.arrayOf(PropTypes.object).isRequired,
    onClose: PropTypes.func,
    onParentClick: PropTypes.func,
    open: PropTypes.bool
};

ParentPanel.defaultProps = {
    onParentClick: () => {},
    open: false
};

export default withNamespace(ParentPanel);