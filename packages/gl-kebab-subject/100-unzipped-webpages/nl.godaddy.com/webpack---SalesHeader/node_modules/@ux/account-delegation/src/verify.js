import {
    FormattedMessage
} from 'react-intl';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    request
} from '@ux/util';
import AccountDelegation from './';
import Button from '@ux/button';
import Modal from '@ux/modal';
import Spinner from '@ux/spinner';
import React from 'react';
import PropTypes from 'prop-types';

/**
 * Check if the stored credentials still match that of the cookie.
 *
 * @param {Object} customer details.
 * @returns {Boolean} validity.
 * @api private
 */
function validCredentials(customer) {
    return AccountDelegation.idp.getIdpProperty('jti') === customer.get('jti');
}

/**
 * Verify the consistency of the current authentication credentials
 * against the cookie. This should prevent actions against wrong accounts if
 * impersonating multiple accounts.
 *
 * @param {Object} config Required configuration.
 * @returns {Boolean} true if credentials are valid, false if they are not
 * @api private
 */
function verify(config) {
    const customer = config.customer;

    //
    // If delegation is inactive or credentials are valid don't render modal warning.
    //
    if (!AccountDelegation.active || validCredentials(customer)) {
        return true;
    }

    return false;
}

/**
 * Issue a request to refresh the authentication cookie.
 *
 * @param {Object} config Required configuration.
 * @param {Function} done Completion callback.
 */
function refreshCookie(config, done) {
    const {
        customer
    } = config;

    //
    // Try to refresh the cookie to check the known jti. Ignore errors from the
    // request so the modal will also be shown in that case.
    //
    request.get(`${ config.restoreCookie }?jti=${ customer.get('jti') }`, {
        jsonp: config.jsonp === false ? config.jsonp : true
    }, error => {
        //
        // Credentials are still valid, notify the delegate that delegation is active.
        //
        if (!error && validCredentials(customer)) {
            return done(true);
        }

        done(false);
    });
}

/**
 * Render UXCore2 Modal if validation failed.
 *
 * @class Verify
 * @api public
 */
class VerificationModal extends NamespaceConsumer {
    render() {
        const props = this.props;

        const footer = !props.refreshFailed && ( <
            Button design = 'primary'
            disabled = {
                props.pending
            }
            onClick = {!props.pending && props.onOk
            } > {
                props.pending ?
                <
                Spinner size = 'sm'
                inline shade = 'dark' / > :
                    <
                    FormattedMessage id = 'Shared:Common:OK' / >
            } <
            /Button>
        );

        let message;
        if (!props.refreshFailed) {
            message = 'Shared:AccountDelegation:pageAuthRefreshMessage';
        } else {
            message = 'Shared:AccountDelegation:validateAuthMessage';
        }

        return ( <
            Modal footer = {
                footer
            }
            title = { < FormattedMessage id = 'Shared:AccountDelegation:validateAuthTitle' / >
            }
            onClose = {
                props.onDismiss
            } >
            <
            div className = {
                this.namespace('verification-modal')
            } >
            <
            FormattedMessage id = 'Shared:AccountDelegation:validateAuthShopper'
            values = {
                props
            }
            /> <
            FormattedMessage id = {
                message
            }
            /> <
            /div> <
            /Modal>
        );
    }
}

/**
 * Required properties for Modal message.
 *
 * @enum {Object}
 * @api public
 */
VerificationModal.propTypes = {
    ...NamespaceShape,
    displayName: PropTypes.string.isRequired,
    shopperId: PropTypes.string.isRequired,
    pending: PropTypes.bool,
    refreshFailed: PropTypes.bool,
    onDismiss: PropTypes.func,
    onOk: PropTypes.func
};

const modalWithNamespace = withNamespace(VerificationModal);

export {
    verify as
    default,
    refreshCookie,
    modalWithNamespace as VerificationModal,
    validCredentials
};