import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';

/**
 * Display popover content when click on the control component
 *
 * @displayName PopOver (Web)
 * @class PopOver
 * @public
 */
export class PopOver extends NamespaceConsumer {
    constructor(props) {
        super(props);
        this.state = {
            open: props.open
        };

        this.toggle = this.toggle.bind(this);
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
    }

    /**
     * Open the popover by setting open to true
     *
     * @private
     */
    open() {
        this.setState({
            open: true
        }, () => this.props.onToggle(true));
    }

    /**
     * Close the popover by setting open to false
     *
     * @private
     */
    close() {
        this.setState({
            open: false
        }, () => this.props.onToggle(false));
    }

    /**
     * Toggle the popover based on current state of open
     *
     * @private
     */
    toggle() {
        const next = this.state.open;
        next ?
            this.close() :
            this.open();
    }

    /**
     * Hide the dropdown if clicks are outside the tray itself.
     */
    componentDidMount() {
        this.outside('click', this.close, this.contentWrapper);
        this.outside('focusin', this.close, this.contentWrapper);
    }

    /**
     * Remove the attached click event listener.
     */
    componentWillUnmount() {
        this.off('click', this.close);
        this.off('focusin', this.close);
    }

    /**
     * Check if the open prop has changed.
     * If so, update state of open.
     *
     * @param {Object} prevProps - previous instance of props
     */
    componentDidUpdate(prevProps) {
        if (prevProps.open !== this.props.open && this.state.open !== this.props.open) {
            this.setState({
                open: this.props.open
            });
        }
    }

    /**
     * Render the control component within a button and the popover content children.
     *
     * @returns {ReactElement} PopOver element.
     * @private
     */
    render() {
        const {
            children,
            className,
            control,
            eid
        } = this.props;

        const open = this.state.open ? 'open' : '';

        return ( <
            div className = {
                className
            }
            data - eid = {
                eid
            }
            ref = {
                r => {
                    this.contentWrapper = r;
                }
            } >
            <
            div className = {
                this.namespace('popover', open)
            } >
            <
            button onClick = {
                this.toggle
            }
            onKeyDown = {
                this.toggle
            }
            tabIndex = '0'
            className = {
                this.namespace('popover-button')
            } > {
                control
            } <
            /button> <
            div className = {
                this.namespace('content')
            } > {
                children
            } <
            /div> <
            /div> <
            /div>
        );
    }
}

PopOver.propTypes = {
    ...NamespaceShape,
    /** Customized class name */
    className: PropTypes.string,
    /** Control component for button render  */
    control: PropTypes.element,
    /** Toggle handler for when popover is opened or closed */
    onToggle: PropTypes.func,
    /** eid to be used for the traffic tracking */
    eid: PropTypes.string,
    /** Allows consuemer to open or close the popover */
    open: PropTypes.bool
};

PopOver.defaultProps = {
    onToggle: () => {},
    open: false
};

export default withNamespace(PopOver);