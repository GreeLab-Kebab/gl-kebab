/* eslint no-return-assign: 0 */

import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import TrayMenu from '@ux/tray-menu';
import Markets from '@godaddy/markets';
import {
    request,
    cookie,
    URL
} from '@ux/util';
import assign from 'object-assign';
import golfToEid from 'golf-to-eid';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';

/**
 * Render and expose the CurrencySelector as a functional Component. The CurrencySelector
 * is responsible for allowing users to select their desired money. The default values
 * populated and the ordering of currencies within the list are dependent on the current
 * market and any previous user state.
 *
 * @param {Object} props Properties
 * @api public
 */
class CurrencySelector extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            priorityCurrencies: [],
            currencies: [],
            selected: '',
            loaded: false
        };

        this.markets = new Markets();
    }

    /**
     * Function that gets called when user clicks on a currency item
     *
     * @param {Object} cur The currently selected currency object
     * @param {Object} event The event fired on click
     *
     * @api public
     */
    onCurrencyChanged(cur, event) {
        event.preventDefault();
        this.setState({
            currency: cur,
            selected: cur.code
        });

        this.tray.close();

        if (!this.isBrowser) {
            return;
        }

        const {
            isReseller,
            urls,
            privateLabelId
        } = this.props;

        if (isReseller) {
            const url = new URL(urls.currencyList.href, true);

            url.set('query', assign({}, url.query, {
                currency: cur.code,
                target: window.location.href
            }));

            window.location.assign(url.href);

            return;
        }

        const requestUrl = new URL(urls.currencyList.href + '/' + cur.code);
        const query = {};
        if (privateLabelId !== 1) {
            query.pl_id = privateLabelId;
        }

        requestUrl.set('query', query);
        request.get(requestUrl.href, {}, (err) => {
            if (err) {
                return;
            }

            const redirectUrl = new URL(window.location.href, true);
            if (redirectUrl.query.currency) {
                // strip `currencyType` query
                redirectUrl.set('query', assign(redirectUrl.query, {
                    currency: ''
                }));
                // If the URL is changing, we must truly redirect to it
                window.location.assign(redirectUrl.href);
            } else {
                // If the URL is the same, we can simply reload, so that hash URLs work
                window.location.reload(true);
            }
        });
    }

    /**
     * Performs lexographic sorts based on the `code` key.
     * @param {Currency} lcur LHS of the sort to compare.
     * @param {Currency} rcur RHS of the sort to compare.
     * @returns {Number} A value indicating if `lcur.code` is greater than,
     * less than, or equal to `rcur.code`.
     * @api private
     */
    sortByCode(lcur, rcur) {
        const lcode = lcur.code;
        const rcode = rcur.code;

        if (lcode === rcode) {
            return 0;
        }
        return lcode > rcode ? 1 : -1;
    }

    /**
     * Perform an AJAX call to the GUI service and pass the set
     * the currencies represented by the results on this instance.
     * @param {Function} [done] Optional continuation callback
     * @api public
     */
    fetchCurrencies(done) {
        // TODO (crobbins): either introduce a second GUI string
        // for the base host or move this safety check into @godaddy/markets
        const gui = this.props.urls.gui.href.replace(/pcjson.*$/, '');
        // ux.eldorado.data.currency passed in by CMS
        let selected = this.props.currency;
        // string value of the `currency` cookie
        const currencyCookie = cookie.get('currency');
        const {
            market,
            privateLabelId
        } = this.props;
        this.markets.getCurrencies(gui, market, privateLabelId, (err, results) => {
            if (err) {
                return;
            }
            // If we received an array as a result then normalize the
            // individual items to the data structure we expect:
            // { code: 'USD', symbol: '$' }
            // also validate the currency cookie data
            results = (results || []).map(cur => {
                if (cur.currencytype === currencyCookie) {
                    selected = cur.currencytype;
                }
                return {
                    code: cur.currencytype,
                    symbol: cur.symbol
                };
            });
            this.setCurrencies(results, selected, done);
        });
    }

    /**
     * Populate state with a list of currencies (from the Markets API).
     * @param {Array} results List of unique currencies (e.g. { code: CAD, symbol: '$' })
     * @param {Object} selected String The currency code of the currency selected by the currency cookie
     * @param {Function} [done] Optional continuation callback
     * @api private
     */
    setCurrencies(results, selected, done) {
        // Find the currency object in the results associated with the currentMarket.
        // n.b.: assumes currencies returned by `results` have unique codes
        // and that the gui api returns them in order.

        // Build array of priority currency objects by cloning the currencies
        // that come before `-` in `results`
        const priority = [];
        const currencies = [];
        let isPriority = true;

        results.forEach(cur => {
            if (cur.symbol === '-') {
                isPriority = false;
                return;
            }

            if (isPriority) {
                priority.push(cur);
            } else {
                currencies.push(cur);
            }
        });

        this.setState({
            currencies: currencies,
            priorityCurrencies: priority,
            selected: selected || 'USD',
            loaded: true
        }, done);
    }

    /**
     * Fetches the list of currencies from the GUI service if no
     * currencies are present.
     * @api private
     */
    componentWillMount() {
        const {
            loaded
        } = this.state;

        if (this.isBrowser && !loaded) {
            this.fetchCurrencies();
        }
    }

    /**
     * Renders the CurrencySelector as a TrayMenu composed of two sets
     * of CurrencyItems:
     * - priorityCurrencies: currencies that should be displayed first.
     * - currencies: all other currencies available to transact in.
     *
     * @returns {ReactDOM} Virtual DOM for the CurrencySelector
     * @api public
     */
    render() {
        const {
            currencies,
            priorityCurrencies,
            selected
        } = this.state;
        const {
            eidPrefix,
            messages,
            market
        } = this.props;
        const trayMenuClassNames = this.namespace(this.classNames('currency-selector', 'fade', { in: this.state.loaded
        }));
        const eid = golfToEid('CurrencySelector', {
            prefix: eidPrefix,
            postfix: 'click'
        });

        return ( <
            IntlProvider locale = {
                market
            }
            messages = {
                messages
            } >
            <
            FormattedMessage id = 'Sales:Footer:CurrencySelectorTray:AriaLabel'
            values = {
                {
                    selection: selected
                }
            } > {
                (currencySelectorTray) =>
                <
                TrayMenu ariaLabel = {
                    currencySelectorTray
                }
                name = {
                    selected
                }
                type = 'base'
                className = {
                    trayMenuClassNames
                }
                ref = {
                    c => this.tray = c
                }
                data - eid = {
                    eid
                } > {
                    priorityCurrencies.map((cur, i) => {
                        const classNames = this.namespace(this.classNames('currency-item', {
                            selected: selected === cur.code
                        }));
                        return <CurrencyItem
                        key = {
                            `priority-${i}`
                        }
                        code = {
                            cur.code
                        }
                        symbol = {
                            cur.symbol
                        }
                        className = {
                            classNames
                        }
                        eidPrefix = {
                            eidPrefix
                        }
                        onClick = {
                            this.onCurrencyChanged.bind(this, cur)
                        }
                        />;
                    })
                }

                <
                div className = {
                    this.namespace('divider')
                } > < /div>

                {
                    currencies.map((cur, i) => {
                        const classNames = this.namespace(this.classNames('currency-item', {
                            selected: selected === cur.code
                        }));

                        return <CurrencyItem
                        key = {
                            `currency-${i}`
                        }
                        code = {
                            cur.code
                        }
                        symbol = {
                            cur.symbol
                        }
                        className = {
                            classNames
                        }
                        eidPrefix = {
                            eidPrefix
                        }
                        onClick = {
                            this.onCurrencyChanged.bind(this, cur)
                        }
                        />;
                    })
                } <
                /TrayMenu> } <
                /FormattedMessage> <
                /IntlProvider>
            );
        }
    }

    /*
     * PropTypes for the CurrencySelector. `urls.gui` is the only
     * required URL.
     */
    CurrencySelector.propTypes = {
        ...NamespaceShape,
        messages: PropTypes.object.isRequired,
        currency: PropTypes.string,
        eidPrefix: PropTypes.string,
        urls: PropTypes.object.isRequired,
        market: PropTypes.string.isRequired,
        privateLabelId: PropTypes.number.isRequired,
        isReseller: PropTypes.bool
    };

    CurrencySelector.defaultProps = {
        eidPrefix: 'uxp.hyd'
    };

    export default withNamespace(CurrencySelector);

    /**
     * Internal helper component for displaying a single currency in the
     * CurrencySelector dropdown.
     *
     * @param {Object} props Properties
     * @api private
     */
    class CurrencyItem extends React.Component {
        constructor() {
            super(...arguments);

            this.onClick = this.onClick.bind(this);
        }

        /**
         * Invokes this.props.onClick with the code and symbol
         * of the currency associated with this instance.
         *
         * @param {SyntheticEvent} evt React Click event.
         */
        onClick(evt) {
            const {
                code,
                symbol
            } = this.props;
            this.props.onClick(evt, {
                code,
                symbol
            });
        }

        /**
         * Renders the CurrencyItem as an anchor with two spans
         *
         * @returns {ReactDOM} Virtual DOM for the CurrencyItem.
         */
        render() {
            const {
                code,
                symbol,
                eidPrefix
            } = this.props;

            const eid = golfToEid(code, {
                prefix: eidPrefix + '.currency_selector',
                postfix: 'click'
            });

            return ( <
                button type = 'button'
                className = {
                    this.props.className
                }
                onClick = {
                    this.onClick
                }
                data - eid = {
                    eid
                } >
                <
                span > {
                    code
                } < /span> <span>{ symbol }</span >
                <
                /button>
            );
        }
    }

    /*
     * PropTypes for the CurrencySelector.
     * Only `className` is optional.
     */
    CurrencyItem.propTypes = {
        className: PropTypes.string,
        eidPrefix: PropTypes.string.isRequired,
        code: PropTypes.string.isRequired,
        symbol: PropTypes.string.isRequired,
        onClick: PropTypes.func.isRequired
    };