import PropTypes from 'prop-types';
import React from 'react';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';

/**
 * Columns component.
 *
 * This is the container for the columns, or in terms of HTML, it is the
 * wrapping `<ul>` element. You specify a list of `ColumnItem` components as
 * the children, and it will flow them into the correct columns based on the
 * props passed in.
 *
 * @class Columns
 * @public
 */
class Columns extends NamespaceConsumer {
    /**
     * Create the columns in a horizontal direction for the supplied items.
     *
     * @param {Array} items items to render into columns
     * @param {Number} num the number of columns to make
     * @returns {Array} columns
     * @api private
     */
    horizontal(items, num) {
        const columns = [];
        let i;

        for (i = 0; i < num; i++) {
            columns[i] = [];
        }

        for (i = 0; i < items.length; i++) {
            columns[i % num].push(items[i]);
        }

        return columns;
    }

    /**
     * Create the columns in a vertical direction for the supplied items.
     *
     * @param {Array} items items to render into columns
     * @param {Number} num the number of columns to make
     * @returns {Array} columns
     * @api private
     */
    vertical(items, num) {
        const itemsPerColumn = Math.ceil(items.length / num);
        const columns = [];
        let i;

        for (i = 0; i < num; i++) {
            const start = i * itemsPerColumn;
            const end = start + itemsPerColumn;

            columns[i] = items.slice(start, end);
        }

        return columns;
    }

    /**
     * Render the component.
     *
     * @returns {ReactElement} div
     * @api public
     */
    render() {
        const props = this.props;
        const {
            num,
            style
        } = props;
        const children = React.Children.toArray(props.children);
        const className = this.classNames(
            props.className,
            this.namespace(
                this.classNames(
                    'col-lg-' + (num <= 6 ? Math.floor(12 / num) : 2),
                    'col-md-6',
                    'col-sm-12'
                )
            )
        );

        const columns = this[style](children, num);
        if (!columns || columns.length === 0) {
            return null;
        }

        return ( <
            div className = {
                this.namespace('row')
            } > {
                columns.map((items, idx) => {
                    return <ul className = {
                        className
                    }
                    key = {
                            idx
                        } > {
                            items
                        } <
                        /ul>;
                })
            } <
            /div>
        );
    }
}

/**
 * Property definitions.
 *
 * @type {Object}
 * @public
 */
Columns.propTypes = {
    ...NamespaceShape,
    num: PropTypes.number,
    style: PropTypes.oneOf(['horizontal', 'vertical']),
    className: PropTypes.string,
    children: PropTypes.arrayOf(PropTypes.node)
};

/**
 * Default property values.
 *
 * @type {Object}
 * @public
 */
Columns.defaultProps = {
    num: 4,
    style: 'vertical'
};

export default withNamespace(Columns);