import React, {
    Component
} from 'react';
import {
    bool,
    object,
    string,
    arrayOf,
    shape,
    number
} from 'prop-types';
import {
    NamespaceProvider,
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedHTMLMessage
} from 'react-intl';
import Link from '@ux/link';
import Icon from '@ux/icon';
import CurrencySelector from '@ux/currency-selector';
import golfToEid from 'golf-to-eid';

/**
 * Return a namespace if the environment variable is set, 'polyfilled' by WebPack.
 *
 * @returns {Object} Configured namespace.
 * @api private
 */
function namespace() {
    return process.env.NAMESPACE; // eslint-disable-line no-process-env
}

const eidPrefix = 'uxp.hyd.reseller_sales_footer';

const footerLinkEid = {
    prefix: eidPrefix,
    postfix: 'link.click'
};

const utosLinkId = 'utos';

/**
 * Helper component for social media links
 *
 * @returns {ReactElement} The social media link
 */
class SocialMediaLinkItem extends Component {
    render() {
        const {
            link
        } = this.props;

        return ( <
            li >
            <
            Link href = {
                link.href
            }
            data - eid = {
                golfToEid(link.id, footerLinkEid)
            }
            target = '_blank' >
            <
            Icon name = {
                link.icon || 'social'
            }
            /> <
            span className = 'sr-only' > {
                link.title
            } < /span> <
            /Link> <
            /li>
        );
    }
}

SocialMediaLinkItem.propTypes = {
    link: object.isRequired
};

/**
 * Render and expose the Product navigation as a Component.
 *
 * @param {Object} props Properties
 * @returns {ReactElement} Namespaced Product Nav.
 * @api public
 */
class ResellerSalesFooterComponent extends NamespaceConsumer {
    constructor(props) {
        super(props);

        this.links = props.footer;
        this.utosLink = props.legal.filter(link => link.id === utosLinkId)[0];
        this.legalLinks = props.legal.filter(link => link.id !== utosLinkId);
        this.hasSocialMediaLinks = props.socialMedia && props.socialMedia.length > 0;
        this.socialMediaLinks = props.socialMedia;

        this.utosLinkValues = this.utosLink && {
            ...this.utosLink,
            eid: golfToEid(this.utosLink.id, footerLinkEid)
        };
    }
    /**
     * Add eventListeners for breakpoints.
     *
     * @api private
     */
    componentDidMount() {
        this.breakpoint(
            'mobile',
            'phablet',
            'tablet',
            'desktop',
            'large'
        );
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup();
    }

    buildLink(link) {
        const linkProps = {
            ...link,
            'data-eid': golfToEid(link.id, footerLinkEid)
        };

        return ( <
            Link { ...linkProps
            } > {
                link.title
            } < /Link>
        );
    }

    /**
     * Renders each given social media link as a SocialMediaLinkItem
     *
     * @param {Object[]} socialMediaLinks The links to render
     * @returns {SocialMediaLinkItem[]} The rendered links
     */
    renderSocialMediaLinks(socialMediaLinks) {
        return socialMediaLinks.map(socialMediaLink =>
            <
            SocialMediaLinkItem key = {
                socialMediaLink.id
            }
            link = {
                socialMediaLink
            }
            />
        );
    }

    /**
     * Renders footer
     *
     * @returns {ReactElement} namespaced footer
     */
    render() {
        const {
            props,
            links,
            legalLinks,
            utosLink
        } = this;
        const {
            resellerTypeId,
            multiCurrencyPricingEnabled
        } = props;

        const hasLinks = !!(links && links.length);
        const hasUtos = !!utosLink;
        const hasLegalLinks = !!(legalLinks && legalLinks.length);
        const isApiReseller = resellerTypeId === 3;

        const currencySelectorProps = {
            eidPrefix: footerLinkEid.prefix,
            manifest: props.manifest,
            market: props.market,
            currency: props.currency,
            urls: props.urls,
            privateLabelId: props.privateLabelId,
            isReseller: true,
            messages: props.messages
        };

        return ( <
            IntlProvider locale = {
                props.market
            }
            messages = {
                props.messages
            } >
            <
            div className = {
                this.namespace('reseller-footer')
            } >
            <
            div className = {
                this.namespace('container')
            } > {
                hasLinks && ( <
                    ul className = {
                        this.namespace('reseller-footer-links')
                    } > {
                        links.map((link, index) => ( <
                            li key = {
                                index
                            } > {
                                this.buildLink(link)
                            } <
                            /li>
                        ))
                    } <
                    /ul>
                )
            }

            {
                !isApiReseller && multiCurrencyPricingEnabled && ( <
                    div className = {
                        this.namespace('currency-selector-wrapper')
                    } >
                    <
                    CurrencySelector { ...currencySelectorProps
                    }
                    /> <
                    /div>
                )
            }

            {
                this.hasSocialMediaLinks && ( <
                    ul className = {
                        this.namespace('reseller-footer-social-media-links')
                    } > {
                        this.renderSocialMediaLinks(this.socialMediaLinks)
                    } <
                    /ul>
                )
            }

            {
                hasUtos && ( <
                    p className = {
                        this.namespace('reseller-footer-utos')
                    } >
                    <
                    FormattedHTMLMessage id = 'SalesReseller:Footer:UToS'
                    values = {
                        this.utosLinkValues
                    }
                    /> <
                    /p>
                )
            }

            {
                hasLegalLinks && ( <
                    ul className = {
                        this.namespace('reseller-footer-legal')
                    } > {
                        legalLinks.map((link, index) => ( <
                            li key = {
                                index
                            } > {
                                this.buildLink(link)
                            } <
                            /li>
                        ))
                    } <
                    /ul>
                )
            } <
            /div>

            <
            div id = 'gtm_privacy' > < /div> <
            /div> <
            /IntlProvider>
        );
    }
}

const linksPropType = arrayOf(shape({
    href: string.isRequired,
    title: string.isRequired,
    id: string.isRequired
})).isRequired;

ResellerSalesFooterComponent.propTypes = {
    ...NamespaceShape,
    messages: object.isRequired,
    market: string.isRequired,
    resellerTypeId: number.isRequired,
    footer: linksPropType,
    legal: linksPropType,
    socialMedia: linksPropType,
    multiCurrencyPricingEnabled: bool
};

const NamespacedFooter = withNamespace(ResellerSalesFooterComponent);

export default class ResellerSalesFooter extends Component {
    render() {
        return ( <
            NamespaceProvider namespace = {
                namespace()
            } >
            <
            NamespacedFooter { ...this.props
            }
            /> <
            /NamespaceProvider>
        );
    }
}