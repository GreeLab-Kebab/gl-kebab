import {
    FormattedHTMLMessage
} from 'react-intl';
import {
    Columns,
    ColumnItem
} from '@ux/column-layout';
import {
    TrayMenu,
    TrayTitle
} from '@ux/tray-menu';
import golfToEid from 'golf-to-eid';
import React from 'react';
import Link from '@ux/link';
import {
    URL
} from '@ux/util';

/**
 * Forces classNames to be an array.
 *
 * @param {Array|String} className Thing to check
 * @returns {Array} Array of classNames
 * @private
 */
function classNames(className) {
    return Array.isArray(className) ? className : [className];
}

/**
 * Ensures that paths have a leading slash.
 *
 * @param {String} pathname Pathname to fix.
 * @returns {String} A correctly formatted path.
 * @private
 */
function normalize(pathname) {
    if (!/^(https?:)?\/\//.test(pathname)) {
        pathname = pathname.charAt(0) === '/' ? pathname : '/' + pathname;
        pathname = pathname.replace('//', '/');
    }

    return pathname;
}

/**
 * Compares two URLs, ignoring any trailing slashes.
 *
 * @param {String} url1 URL to check.
 * @param {String} url2 URL to compare.
 * @param {Boolean} ignoreQueryStrings Whether to ignore query strings.
 * @returns {Boolean} Whether URLs match
 */
function urlMatches(url1, url2, ignoreQueryStrings = false) {
    if (typeof url1 !== 'string' || typeof url2 !== 'string') {
        return false;
    }

    if (ignoreQueryStrings) {
        url1 = new URL(url1, true).set('query', {}).href;
        url2 = new URL(url2, true).set('query', {}).href;
    }

    return url1.replace(/\/$/, '') === url2.replace(/\/$/, '');
}

/**
 * Sets open or close state of an item.
 *
 * @param {Boolean} open If the item should be open or not
 *
 * @private
 */
function toggleItem(open) {
    this.isOpen = open;
}

/**
 * Construct an anchor tag.
 *
 * @param {Object} opts Link properties.
 * @returns {ReactDOM} Link element for the specified data
 * @public
 */
function linkBuilder(opts) {
    const {
        caption,
        title,
        id,
        href,
        root = ''
    } = opts;

    if ((!caption && !title) || !href) {
        return null;
    }

    return ( <
        Link { ...opts
        }
        href = {
            normalize(root + href)
        }
        data - eid = {
            golfToEid(caption || id, {
                prefix: opts.eidPrefix,
                postfix: 'link.click'
            })
        } > {
            (title && < span > {
                    title
                } < /span>) || <FormattedHTMLMessage id={ caption } / >
            } <
            /Link>
        );
    }

    /**
     * Generate a list of links
     *
     * @param {Array} items The items to generate
     * @param {Object} options Addition configuration for the items.
     * @param {[String]} options.className Array of class names that are all applied to the li
     * @returns {Array} Generated anchor elements.
     * @public
     */
    function linkListBuilder(items = [], options = {}) {
        const {
            className,
            ...props
        } = options;
        const active = props.active || false;

        return items.map((item, i) => { // eslint-disable-line complexity
            const local = classNames(className);

            if (!item.caption && !item.title) return;

            if (active !== false) {
                if (item.id === active || item.caption === active || item.title === active || urlMatches(active, item.href)) {
                    local.push(props.activeClass || '');
                }
            }

            const onClicked = setActiveItem.bind(null, item.caption || item.id);
            const normalizedCaption = item.caption && item.caption.replace(/:/g, '_');

            return ( <
                li key = {
                    (item.caption || item.id) + i
                }
                id = {
                    normalizedCaption || item.id
                }
                className = {
                    local.filter(Boolean).join(' ')
                } > {
                    linkBuilder({ ...item,
                        ...props,
                        index: i,
                        onClicked
                    })
                } <
                /li>
            );
        }).filter(Boolean);
    }

    /**
     * Generate a column heading and links.
     *
     * @param {Object} item Column item information.
     * @param {Object} [columnClassNames] Object containing classes that can be individually applied
     * @param {Number} [index] Index of the item.
     * @param {Object} [urlArgs] Parameters to be added to item's href upon clicking.
     * @param {Boolean} [suppressTitle] Whether to suppress title.
     * @returns {ReactElement[]} Array of column items
     * @private
     */
    function trayColumnBuilder(item, columnClassNames, index, urlArgs, suppressTitle) { // eslint-disable-line max-params
        const columnItems = [];
        const classes = columnClassNames || {};
        // push the heading for the column if there is one
        if (!suppressTitle && (item.title || item.caption)) {
            columnItems.push( <
                ColumnItem key = {
                    (item.caption || item.id) + index
                }
                id = {
                    item.caption || item.id
                }
                className = {
                    classes.h5
                } > {
                    item.title || < FormattedHTMLMessage id = {
                        item.caption
                    }
                    /> } <
                    /ColumnItem>
                );
            }
            // then push the links
            if (item.children) {
                for (var i = 0; i < item.children.length; i++) {
                    const childItem = item.children[i];
                    const onClicked = setActiveItem.bind(null, (childItem.caption || childItem.id));
                    columnItems.push( <
                        ColumnItem key = {
                            (childItem.caption || childItem.id) + i
                        } > {
                            linkBuilder({
                                eidPrefix: 'uxp.hyd.product_nav',
                                ...childItem,
                                urlArgs,
                                index,
                                onClicked
                            })
                        } {
                            renderLinkFlag(childItem, classes)
                        } <
                        /ColumnItem>
                    );
                }
            }
            return columnItems;
        }

        /**
         * Generate an array of columns.
         *
         * @param {Object} item Column information.
         * @param {Object} classes Object containing classes that can be individually applied
         * @param {Object} urlArgs Parameters to be added to item's href upon clicking.
         * @returns {ReactElement[]} Array of columns or an empty array
         * @private
         */
        function trayMenuBuilder(item, classes, urlArgs) {
            if (item.children) {
                const suppressSubcategoryTitle = item.children.length === 1 && item.title && item.children[0].title === item.title;

                return item.children.map((itm, i) => {
                    return ( <
                        div key = {
                            i
                        } > {
                            trayColumnBuilder(itm, classes, i, urlArgs, suppressSubcategoryTitle)
                        } <
                        /div>
                    );
                });
            }

            return [];
        }

        /**
         * Generate TrayTitle text/link when appropriate
         *
         * @param {Object} item The item we are generating the TrayTitle content for.
         * @param {Object} urlArgs Parameters to be added to item's href upon clicking.
         * @returns {Object} TrayTitle content
         * @public
         */
        function renderTrayTitle(item, urlArgs) {
            const title = item.title || < FormattedHTMLMessage id = {
                item.caption
            }
            />;
            if (item.leftnav && typeof item.leftnav.href === 'string') {
                return ( <
                    TrayTitle >
                    <
                    Link href = {
                        item.leftnav.href
                    }
                    urlArgs = {
                        urlArgs
                    } > {
                        title
                    } <
                    /Link> <
                    /TrayTitle>
                );
            }

            return ( <
                TrayTitle > {
                    title
                } <
                /TrayTitle>
            );
        }

        /**
         * Generate a list of TrayMenus
         *
         * @param {Array} items The items to generate into trayMenus
         * @param {Object} options Addition configuration for the items.
         * @param {Object} options.classes Object containing classes that can be individually applied
         * @param {[String]} options.className Array of classes that will all be applied to the li
         * @param {Function} options.namespace The namespacing function to apply to new class names
         * @returns {Array} Generated TrayMenus.
         * @public
         */
        function trayMenusBuilder(items = [], options = {}) {
            const className = classNames(options.className).filter(Boolean).join(' ');
            const classes = options.classes || {};
            const result = [];
            const namespace = options.namespace;

            items.forEach((item, i) => { // eslint-disable-line complexity
                        if (item.children && item.children.length > 0) {
                            let learnMore, description;

                            // remove any children that dont have children
                            item.children = item.children.filter((itm) => (itm.children && itm.children.length > 0));

                            if (item.leftnav) {
                                if (item.leftnav.description) {
                                    description =
                                        ( < p >
                                            <
                                            FormattedHTMLMessage id = {
                                                item.leftnav.description
                                            }
                                            /> <
                                            /p>);
                                        }
                                    else if (item.leftnav.descriptionText) {
                                        // Literal pre-translated text
                                        description =
                                            ( < p > {
                                                    item.leftnav.descriptionText
                                                } <
                                                /p>);
                                            }
                                        if (item.leftnav.btn || item.leftnav.btnText) {
                                            learnMore =
                                                ( < Link href = {
                                                        item.leftnav.href
                                                    }
                                                    rel = 'nofollow'
                                                    urlArgs = {
                                                        options.urlArgs
                                                    }
                                                    className = {
                                                        namespace('btn', 'btn-default-light', 'learn-more', 'btn-sm')
                                                    }
                                                    data - eid = {
                                                        golfToEid(item.leftnav.btn || item.leftnav.btnText, {
                                                            prefix: 'uxp.hyd.product_nav',
                                                            postfix: 'learn_more.click'
                                                        })
                                                    } > {
                                                        item.leftnav.btnText || < FormattedHTMLMessage id = {
                                                            item.leftnav.btn
                                                        }
                                                        /> } <
                                                        /Link>);
                                                    }
                                                }

                                            result.push( <
                                                li id = {
                                                    item.caption || item.id
                                                }
                                                key = {
                                                    (item.caption || item.id) + i
                                                }
                                                className = {
                                                    className
                                                } >
                                                <
                                                TrayMenu name = {
                                                    item.title || < FormattedHTMLMessage id = {
                                                        item.caption
                                                    }
                                                    /> }
                                                    open = {
                                                        item.isOpen
                                                    }
                                                    type = 'base'
                                                    showOpenCaret = {
                                                        true
                                                    }
                                                    onToggle = {
                                                        toggleItem.bind(item)
                                                    }
                                                    data - eid = {
                                                        golfToEid(item.caption || item.id, {
                                                            prefix: 'uxp.hyd.product_nav',
                                                            postfix: 'link.click'
                                                        })
                                                    } >
                                                    <
                                                    div className = {
                                                        namespace('container')
                                                    } >
                                                    <
                                                    div className = {
                                                        namespace('row')
                                                    } >
                                                    <
                                                    div className = {
                                                        namespace('col-sm-12')
                                                    } > {
                                                        renderTrayTitle(item, options.urlArgs)
                                                    } <
                                                    /div> <
                                                    /div> <
                                                    div className = {
                                                        namespace('row')
                                                    } > {
                                                        (description || learnMore) &&
                                                        <
                                                        div className = {
                                                            namespace('col-md-4', 'first')
                                                        } > {
                                                            description
                                                        } {
                                                            learnMore
                                                        } <
                                                        /div> } <
                                                        div className = {
                                                            namespace((description || learnMore) ? 'col-md-8' : 'col-md-12', 'subnav-columns')
                                                        } >
                                                        <
                                                        Columns num = {
                                                            item.children.length
                                                        }
                                                        style = 'vertical' > {
                                                            trayMenuBuilder(item, classes, options.urlArgs)
                                                        } <
                                                        /Columns> <
                                                        /div> <
                                                        /div> <
                                                        /div> <
                                                        /TrayMenu> <
                                                        /li>
                                                    );
                                                }
                                                else if (item.caption || item.title) {
                                                    // Render a plain button
                                                    result.push( <
                                                        li id = {
                                                            item.caption || item.id
                                                        }
                                                        key = {
                                                            (item.caption || item.id) + i
                                                        }
                                                        className = {
                                                            className
                                                        } >
                                                        <
                                                        div className = {
                                                            namespace('tray-menu')
                                                        } >
                                                        <
                                                        div className = {
                                                            namespace('tray-toggle-wrapper')
                                                        } > {
                                                            linkBuilder({
                                                                ...item,
                                                                className: namespace('btn', 'tray-toggle', 'topnav-nontray-btn'),
                                                                eidPrefix: 'uxp.hyd.product_nav',
                                                                urlArgs: options.urlArgs
                                                            })
                                                        } <
                                                        /div> <
                                                        /div> <
                                                        /li>
                                                    );
                                                }
                                            });

                                        return result;
                                    }

                                    function renderLinkFlag(link, classes) {
                                        if (!link.options) {
                                            return;
                                        }

                                        const ret = [];
                                        let i = 0;

                                        if (link.options.onSale) {
                                            ret.push(renderLinkFlagInternal(classes.onSale, 'Shared:ProductNav:Flag:OnSale', i++));
                                        }
                                        if (link.options.isNew) {
                                            ret.push(renderLinkFlagInternal(classes.isNew, 'Shared:ProductNav:Flag:New', i++));
                                        }
                                        if (link.options.isFree) {
                                            ret.push(renderLinkFlagInternal(classes.isFree, 'Shared:ProductNav:Flag:TryItFree', i++));
                                        }
                                        if (link.options.isPro) {
                                            ret.push( <
                                                span className = {
                                                    classes.isPro
                                                }
                                                key = {
                                                    i++
                                                } > < /span>
                                            );
                                        }
                                        if (link.options.tout || link.options.toutText) {
                                            ret.push(renderLinkFlagInternal(classes.tout, link.options.tout || link.options.toutText, i++, !link.options.tout && link.options.toutText));
                                        }

                                        return ret;
                                    }

                                    function renderLinkFlagInternal(className, message, key, messageIsPreTranslated = false) {
                                        return ( <
                                            span key = {
                                                key
                                            } >
                                            &
                                            nbsp; <
                                            span className = {
                                                className
                                            } > - & nbsp; {
                                                messageIsPreTranslated ? < span > {
                                                    message
                                                } < /span> : <FormattedHTMLMessage id={ message } / >
                                            } <
                                            /span> <
                                            /span>
                                        );
                                    }

                                    /**
                                     * Set the localStorage activeCaption value
                                     * @param {String} caption The caption to assign in localStorage
                                     * @private
                                     */
                                    function setActiveItem(caption) {
                                        if (typeof window !== 'undefined') {
                                            window.sessionStorage.setItem('activeCaption', caption);
                                        }
                                    }

                                    /**
                                     * Default component settings
                                     *
                                     * @type {Object}
                                     * @private
                                     */
                                    const defaultComponents = {
                                        pro: true,
                                        partnersIcon: false
                                    };

                                    export {
                                        defaultComponents,
                                        linkBuilder,
                                        linkListBuilder,
                                        renderLinkFlag,
                                        setActiveItem,
                                        trayMenusBuilder,
                                        trayColumnBuilder,
                                        urlMatches,
                                        renderTrayTitle
                                    };