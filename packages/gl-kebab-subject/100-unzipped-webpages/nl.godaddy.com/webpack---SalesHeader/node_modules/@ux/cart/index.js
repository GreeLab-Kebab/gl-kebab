import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import Component from '@ux/component';
import React from 'react';
import PropTypes from 'prop-types';
import Link from '@ux/link';

//
// Get all predefined breakpoints for media-specific behavior. Doing a map will
// prevent us from adding more unminifable strings.
//
const breakpoints = Component.breakpoints.specification.map(point => point.name);

/**
 * Render the checkout link with optional text.
 *
 * @Constructor
 * @class Cart
 * @api public
 */
export class Cart extends NamespaceConsumer {
    /**
     * Add eventListeners for breakpoints.
     *
     * @api private
     */
    componentDidMount() {
        this.breakpoint(...breakpoints);
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup();
    }

    /**
     * Render the cart icon, only show the cart if the customer has items in the cart.
     * Only show the icon (no message) if mobile.
     *
     * @returns {ReactElement} Translated cart icon and optional message.
     * @api private
     */
    render() {
            const props = this.props;
            const items = typeof this.state.items === 'number' ? this.state.items : props.items;

            const messageId = items ? 'Shared:UtilityBar:Cart:ItemsInCartMessage' : 'Shared:UtilityBar:Cart:EmptyCartMessage';
            const icon = ( < span aria - label = {
                    props.messages[messageId]
                }
                className = {
                    this.namespace(
                        'app-icon',
                        'app-icon-cart',
                        this.classNames({
                            'cart-empty': !items
                        }))
                }
                />);

                if (!props.showEmpty && !items) {
                    return null;
                }

                if (props.iconOnly) {
                    return icon;
                }

                if (props.textOnly) {
                    return ( <
                        FormattedMessage id = 'Shared:UtilityBar:Cart' > {
                            stringLiteral => < Link ariaLabel = {
                                stringLiteral
                            }
                            urlArgs = {
                                props.urlArgs
                            }
                            href = {
                                props.checkout
                            }
                            data - eid = {
                                props.eid
                            }
                            className = {
                                this.classNames({
                                    [this.namespace('cart-empty')]: !items
                                }, props.className)
                            } > {
                                stringLiteral
                            } <
                            /Link> } <
                            /FormattedMessage>
                        );
                    }

                    // Show just the icon if the cart is empty or if we're in mobile
                    if ((props.showEmpty && !items) || this.isMobile) {
                        return ( <
                            Link ariaLabel = {
                                props.messages[messageId]
                            }
                            urlArgs = {
                                props.urlArgs
                            }
                            href = {
                                props.checkout
                            }
                            data - eid = {
                                props.eid
                            }
                            className = {
                                props.className
                            } > {
                                icon
                            } <
                            /Link>
                        );
                    }

                    // In non-mobile when the cart has items, show the full "Checkout Now" link
                    return ( <
                        IntlProvider locale = {
                            props.market
                        }
                        messages = {
                            props.messages
                        } >
                        <
                        Link urlArgs = {
                            props.urlArgs
                        }
                        href = {
                            props.checkout
                        }
                        data - eid = {
                            props.eid
                        }
                        className = {
                            props.className
                        } > {
                            icon
                        } <
                        FormattedMessage id = {
                            messageId
                        }
                        /> <
                        /Link> <
                        /IntlProvider>
                    );

                }
            }

            /**
             * Helper to update cart items, needs to be bound to proper scope that has state
             * on the number of items before the function can be used.
             *
             * @param {Number} items Updated cart count.
             * @param {Function} done Optional completion callback.
             * @api public
             */
            Cart.update = function update(items, done = () => {}) {
                this.setState({
                    items: parseInt(items, 10) || 0
                }, done);
            };

            /**
             * Property definitions.
             *
             * @type {Object}
             * @api public
             */
            Cart.defaultProps = {
                eid: 'uxp.hyd.app_header.header.cart.cart_link.link.click',
                market: 'en',
                items: 0,
                showEmpty: false,
                iconOnly: false,
                textOnly: false
            };

            /**
             * Property definitions.
             *
             * @type {Object}
             * @api private
             */
            Cart.propTypes = {
                ...NamespaceShape,
                /** eid to be used link click events */
                eid: PropTypes.string,
                /** Item count representing how many items are in the cart */
                items: PropTypes.number,
                /** If the customer is logged in */
                loggedIn: PropTypes.bool,
                /** Market needed for IntlProvider  */
                market: PropTypes.string,
                /** Checkout url for the cart */
                checkout: PropTypes.string.isRequired,
                /** Messages for IntlProvider */
                messages: PropTypes.object.isRequired,
                /** Show the empty cart icon, default false */
                showEmpty: PropTypes.bool,
                /** Render the icon only, no link, default false */
                iconOnly: PropTypes.bool,
                /** Show only the word `cart`, default false */
                textOnly: PropTypes.bool
            };

            export default withNamespace(Cart);