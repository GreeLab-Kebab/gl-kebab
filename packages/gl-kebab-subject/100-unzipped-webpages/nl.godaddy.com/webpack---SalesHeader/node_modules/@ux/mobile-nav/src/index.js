import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage,
    FormattedHTMLMessage
} from 'react-intl';
import {
    golf,
    eids
} from './enums';
import golfToEid from 'golf-to-eid';
import Link from '@ux/link';
import Button from '@ux/button';
import rip from 'rip-out';
import SubNavPanel from './subnav-panel';

export class MobileNav extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            ...this.state,
            selectedItem: null,
            displaySubNavPanel: false,
            open: false,
            runway: false,
            hideOnScroll: false
        };

        this.html = {};
        this.close = this.close.bind(this);
        this.goToMainMenu = this.goToMainMenu.bind(this);
        this.toggleOpen = this.toggleOpen.bind(this);
        this.killRunway = this.killRunway.bind(this);
    }

    componentDidUpdate() {
        const {
            state
        } = this;
        let subMenuHeight = '';
        if (this.subNavPanel && this.subNavPanel.element) {
            subMenuHeight = this.subNavPanel.element.clientHeight;
        }
        const fauxScreenHeight = screen.height - 60;

        if (subMenuHeight && subMenuHeight > fauxScreenHeight && !state.runway && state.displaySubNavPanel && !state.hideOnScroll) {
            this.setState({
                runway: true
            });
        } else if (!state.displaySubNavPanel && state.runway) {
            this.setState({
                runway: false
            });
        }
    }

    /**
     * close the menu by setting state.open to be false
     *
     * @private
     */
    close() {
        this.props.onClick(false);
        this.setState({
            open: false,
            runway: false,
            displaySubNavPanel: false,
            selectedItem: null
        });
        const html = this.html;
        html.className = this.classNames(html.className, {
            [this.namespace('mobile-menu-open')]: false
        }) || '';
    }

    /**
     * get rid of the runway
     *
     * @private
     */
    killRunway() {
        if (!this.state.runway) {
            return;
        }
        this.setState({
            runway: false,
            hideOnScroll: true
        });
    }

    /**
     * click function to set open/close state of menu
     *
     * @private
     */
    toggleOpen() {
        const {
            open
        } = this.state;
        this.props.onClick(!open);
        this.setState({
            open: !open
        });
    }

    /**
     * click function to set which nav item is selected
     * as well as whether to display the main headings or the subnav
     *
     * @param {Object} item The item that was just clicked on
     * @param {Object} event The click event
     * @private
     */
    onHeadingClick(item, event) {
        if (item.onClick) {
            item.onClick(event);
        }

        this.setState({
            selectedItem: item,
            displaySubNavPanel: true
        });
    }

    /**
     * handles clicking on navigation items with an onClick handler
     *
     * @param {Object} item The item that was just clicked on
     * @param {Object} event The click event
     * @private
     */
    onItemClick(item, event) {
        item.onClick(event);
        this.close();
    }

    /**
     * click function to go back to the main menu
     *
     * @private
     */
    goToMainMenu() {
        this.setState({
            displaySubNavPanel: false,
            hideOnScroll: false
        });
    }

    /**
     * Determines whether to render text as formatteHTMLMsg or as literal string
     * @param  {String}  caption   The string to render
     * @param  {Boolean} isLiteral Whether or not to render as literal string
     * overrides `literalCaptions` prop
     * @returns {Boolean|String|React.Element} false if there is nothing to render, otherwise
     * returns what should be rendered for the caption
     */
    renderCaption(caption, isLiteral = false) {
        if (!caption) {
            return false;
        } else if (isLiteral || this.props.literalCaptions) {
            return caption;
        }
        return <FormattedHTMLMessage id = {
            caption
        }
        />;

    }

    /**
     * Render a uxcore2 icon
     * @param {string} icon The classname for a uxcore2 icon
     * @returns {React.Element} A span with an icon
     * @private
     */
    renderIcon(icon) {
        if (icon) {
            return <span className = {
                this.namespace(icon, 'uxicon', 'custom-icon')
            }
            />;
        }
        return null;
    }

    /**
     * Render a heading that is a plain button with no children.
     * @param  {Object} item A navigation item that contains link data
     * @param {Number} idx The index at which the item appears in the nav array
     * @param  {String} eid Eid for click tracking
     * @param  {Boolean} active If the parent is active
     * @returns {ReactElement} Div containing a parent link
     */
    renderPlainButton(item, idx, eid, active) {
            const {
                urlArgs,
                useGradientHighlightBar
            } = this.props;
            const {
                caption,
                title,
                icon,
                id,
                href,
                dataAttrs,
                target,
                onClick
            } = item;

            const plainButton = ( <
                Link key = {
                    (caption || id) + idx
                }
                className = {
                    this.namespace(
                        this.classNames('column-heading', {
                            active
                        }))
                }
                href = {
                    href
                }
                urlArgs = {
                    urlArgs
                }
                data - eid = {
                    eid
                }
                target = {
                    target
                }
                onClick = {
                    onClick && this.onItemClick.bind(this, item)
                }
                onClicked = {
                    this.close
                } { ...dataAttrs
                } > {
                    this.renderCaption(title, true) || this.renderCaption(caption)
                } {
                    this.renderIcon(icon)
                } <
                /Link>
            );

            if (!useGradientHighlightBar) {
                return plainButton;
            }

            return ( < div className = {
                        this.namespace('column-container')
                    } > {
                        active && < div className = {
                            this.namespace('column-highlight')
                        }
                        role = 'presentation' > & nbsp; < /div> } {
                            plainButton
                        } <
                        /div>);
                    }

                    /**
                     * Render a heading button that has children
                     * @param  {Object} item A parent navigation item that has children
                     * @param {Number} idx The index at which the item appears in the nav array
                     * @param  {String} eid Eid used for click tracking
                     * @param  {Boolean} active If the parent is active
                     * @returns {ReactElement} Div containing a parent that has children
                     */
                    renderHeadingWithChildren(item, idx, eid, active) {
                        const {
                            caption,
                            title,
                            id
                        } = item;

                        const menuItem = ( <
                            div key = {
                                (caption || id) + idx
                            }
                            className = {
                                this.namespace(
                                    this.classNames('column-heading', {
                                        active
                                    }))
                            }
                            onClick = {
                                this.onHeadingClick.bind(this, item)
                            }
                            data - eid = {
                                eid
                            } > {
                                this.renderCaption(title, true) || this.renderCaption(caption)
                            } {
                                this.renderIcon(item.icon)
                            } <
                            span className = {
                                this.namespace('uxicon-chevron-right-lt', 'uxicon')
                            }
                            /> <
                            /div>
                        );

                        if (!this.props.useGradientHighlightBar) {
                            return menuItem;
                        }

                        return ( < div className = {
                                    this.namespace('column-container')
                                } > {
                                    active && < div className = {
                                        this.namespace('column-highlight')
                                    }
                                    role = 'presentation' > & nbsp; < /div> } {
                                        menuItem
                                    } <
                                    /div>);
                                }

                                /**
                                 * render top level headings for nav
                                 *
                                 * @private
                                 * @returns {ReactElement} a set of divs
                                 */
                                renderMobileHeadings() {
                                    const props = this.props;

                                    // eslint-disable-next-line complexity
                                    return props.nav.map((item, idx) => {
                                            const {
                                                caption,
                                                title,
                                                id,
                                                children,
                                                href
                                            } = item;

                                            if (caption || title) {
                                                const active = props.activeHeading &&
                                                    ((props.activeHeading.caption && ~props.activeHeading.caption.indexOf(caption)) ||
                                                        (props.activeHeading.id && ~props.activeHeading.id.indexOf(id)));

                                                const eid = item.eid ||
                                                    golfToEid(caption || id || '', {
                                                        prefix: props.eidPrefix,
                                                        postfix: 'link.click'
                                                    });

                                                // add a divider above partner programs
                                                if (props.growthnav2 && id === 'Sales:ProductNav:PartnerPrograms') {
                                                    let content;
                                                    if (children && children.length > 0) {
                                                        content = this.renderHeadingWithChildren(item, idx, eid, active);
                                                    } else if (href) {
                                                        content = this.renderPlainButton(item, idx, eid, active);
                                                    }
                                                    return ( < React.Fragment key = {
                                                            id + idx
                                                        } >
                                                        <
                                                        hr / > {
                                                            content
                                                        } <
                                                        /React.Fragment>);
                                                    }

                                                    if (children && children.length > 0) {
                                                        return this.renderHeadingWithChildren(item, idx, eid, active);
                                                    } else if (href) {
                                                        return this.renderPlainButton(item, idx, eid, active);
                                                    }
                                                }
                                            });
                                    }

                                    /**
                                     * render gray header with close button
                                     * and conditionally a back button
                                     *
                                     * @param {Boolean} showBackBtn Whether or not to show the back button
                                     * @private
                                     * @returns {ReactElement} a div for the top header
                                     */
                                    renderTopContainer(showBackBtn) {
                                        const {
                                            props
                                        } = this;
                                        return ( <
                                            div className = {
                                                this.namespace('mobile-top-container')
                                            } > {
                                                showBackBtn &&
                                                <
                                                Button onClick = {
                                                    this.goToMainMenu
                                                }
                                                design = 'tertiary'
                                                className = {
                                                    this.namespace('main-menu-btn')
                                                } > {
                                                    this.renderCaption(this.props.menuTitle)
                                                } <
                                                /Button>
                                            } {
                                                !showBackBtn && props.showMenuTitleOnHome &&
                                                    <
                                                    div className = {
                                                        this.namespace('mobile-top-container-label', 'font-primary-bold')
                                                    } > {
                                                        this.renderCaption(this.props.menuTitle)
                                                    } <
                                                    /div>
                                            } <
                                            span onClick = {
                                                this.close
                                            }
                                            className = {
                                                this.namespace('uxicon-x', 'uxicon', 'pull-right')
                                            }
                                            /> <
                                            /div>
                                        );
                                    }

                                    /**
                                     * Render array of all panels containing subnavs
                                     *
                                     * @private
                                     *
                                     * @returns {Array} div of SubNavPanels
                                     */
                                    renderSubNavPanels() {
                                        const {
                                            state,
                                            props
                                        } = this;
                                        const panels = [];
                                        const {
                                            selectedItem
                                        } = state;
                                        const {
                                            caption,
                                            title
                                        } = selectedItem || {};
                                        props.nav.forEach((navItem, i) => {
                                                if (navItem.children) {
                                                    const open = state.displaySubNavPanel && (
                                                        caption && caption === navItem.caption ||
                                                        title && title === navItem.title
                                                    );
                                                    panels.push( < SubNavPanel onClose = {
                                                            this.close
                                                        }
                                                        onBack = {
                                                            this.goToMainMenu
                                                        }
                                                        open = {
                                                            open
                                                        }
                                                        navigation = {
                                                            navItem
                                                        }
                                                        menuTitle = {
                                                            props.menuTitle
                                                        }
                                                        eidPrefix = {
                                                            props.eidPrefix
                                                        }
                                                        literalCaptions = {
                                                            props.literalCaptions
                                                        }
                                                        currentHref = {
                                                            props.currentHref
                                                        }
                                                        urlArgs = {
                                                            props.urlArgs
                                                        }
                                                        key = {
                                                            'subNavPanel' + i
                                                        }
                                                        ref = {
                                                            (r) => {
                                                                if (open) {
                                                                    this.subNavPanel = r;
                                                                }
                                                            }
                                                        }
                                                        />);
                                                    }
                                                });

                                            return panels;
                                        }

                                        /**
                                         * Render panel displaying nav headings if navigation menu is open
                                         *
                                         * @private
                                         *
                                         * @returns {ReactElement} div for the nav headings
                                         */
                                        renderHeadingsPanel() {
                                            const {
                                                state,
                                                props
                                            } = this;
                                            if (this.isBrowser) {
                                                const userAgent = window.navigator.userAgent;
                                                const iOS = userAgent.match(/iPhone|iPad/i); // iPad and iPhone user agent for Safari
                                                const mobileRegExp = /(iPad|iPhone).*WebKit(?:(?!(CriOS|FxiOS|OPiOS)).)*$/;
                                                const mobileSafariClass = mobileRegExp.test(userAgent) ? this.namespace(`mobile-safari-${iOS[0].toLowerCase()}`) : '';

                                                const html = this.html = this.target || document.documentElement;
                                                html.className = this.classNames(
                                                    html.className,
                                                    mobileSafariClass, {
                                                        [this.namespace('mobile-menu-open')]: state.open
                                                    }
                                                );
                                            }

                                            return ( <
                                                div className = {
                                                    this.namespace(
                                                        this.classNames('headings-panel', {
                                                            open: !state.displaySubNavPanel && state.open
                                                        })
                                                    )
                                                } > {
                                                    this.renderTopContainer()
                                                } <
                                                div className = {
                                                    this.namespace('mobile-wrap')
                                                } >
                                                <
                                                div className = {
                                                    this.namespace('mobile-label', 'font-primary-bold')
                                                } > {
                                                    this.renderCaption(props.menuTitle)
                                                } <
                                                /div> {
                                                    this.renderMobileHeadings()
                                                } <
                                                /div> <
                                                /div>
                                            );
                                        }

                                        /**
                                         * Render panel displaying mobile nav buttons if navigation menu is open
                                         *
                                         * @private
                                         *
                                         * @returns {ReactElement} list of buttons
                                         */
                                        renderButtons() {
                                            const {
                                                state
                                            } = this;
                                            let props = this.props;
                                            props = rip(props, 'ariaLabel');

                                            let leftIcon = this.namespace('uxicon-phone');
                                            let leftHref = props.urls.contactUs && props.urls.contactUs.href;
                                            let leftA11y = props.messages[golf.callUs];
                                            let leftEid = eids.callUs;

                                            if (props.showHomeLink) {
                                                leftIcon = this.namespace('uxicon-home');
                                                if (props.privateLabelId === 1) {
                                                    if (props.isInGoCohort) {
                                                        leftHref = props.urls.accountHome && props.urls.accountHome.href;
                                                        leftEid = 'uxp.hyd.mobile_nav.account_home.link.click';
                                                    } else {
                                                        leftHref = props.urls.products && props.urls.products.href;
                                                        leftEid = 'uxp.hyd.mobile_nav.my_products.link.click';
                                                    }
                                                } else {
                                                    leftHref = props.urls.home && props.urls.home.href;
                                                    leftEid = 'uxp.hyd.mobile_nav.home.link.click';
                                                }
                                                leftA11y = '';
                                            }

                                            return ( <
                                                ul className = {
                                                    this.namespace(
                                                        this.classNames('mobile-buttons',
                                                            'list-unstyled', {
                                                                closed: !state.open || state.displaySubNavPanel
                                                            }))
                                                } >
                                                <
                                                li >
                                                <
                                                Link ariaLabel = {
                                                    leftA11y
                                                }
                                                href = {
                                                    leftHref || '#'
                                                }
                                                data - eid = {
                                                    leftEid
                                                } >
                                                <
                                                span className = {
                                                    this.classNames(this.namespace('uxicon'), leftIcon)
                                                }
                                                aria - hidden = 'true' > < /span> <
                                                /Link> <
                                                /li> <
                                                li >
                                                <
                                                Link ariaLabel = {
                                                    props.messages[golf.myAccount]
                                                }
                                                href = {
                                                    props.urls.account && props.urls.account.href || '#'
                                                }
                                                data - eid = {
                                                    eids.myAccount
                                                } >
                                                <
                                                span className = {
                                                    this.namespace('uxicon', 'uxicon-user')
                                                }
                                                aria - hidden = 'true' > < /span> <
                                                /Link> <
                                                /li> <
                                                li >
                                                <
                                                Link ariaLabel = {
                                                    props.messages[golf.help]
                                                }
                                                href = {
                                                    props.urls.help && props.urls.help.href || '#'
                                                }
                                                data - eid = {
                                                    eids.help
                                                } >
                                                <
                                                span className = {
                                                    this.namespace('uxicon', 'uxicon-help')
                                                }
                                                aria - hidden = 'true' > < /span> <
                                                /Link> <
                                                /li> <
                                                /ul>
                                            );
                                        }

                                        /**
                                         * Render translucent background behind the navigation menu
                                         *
                                         * @private
                                         *
                                         * @returns {ReactElement} div for the background
                                         */
                                        renderBackground() {
                                            if (!this.state.open) {
                                                return null;
                                            }
                                            return ( <
                                                div onClick = {
                                                    this.close
                                                }
                                                className = {
                                                    this.namespace('mobile-bkg')
                                                }
                                                />
                                            );
                                        }

                                        render() {
                                            const {
                                                props,
                                                state
                                            } = this;

                                            let buttonTitle;
                                            if (props.useActiveHeadingAsMenuTitle && props.activeHeading) {
                                                if (props.activeHeading.caption) {
                                                    buttonTitle = this.renderCaption(props.activeHeading.caption);
                                                } else if (props.activeHeading.title) {
                                                    buttonTitle = this.renderCaption(props.activeHeading.title, true);
                                                }
                                            }
                                            if (!buttonTitle) {
                                                buttonTitle = this.renderCaption(props.menuTitle);
                                            }

                                            const trayName = ( <
                                                span className = {
                                                    this.namespace('mobile-tray-name')
                                                } > {
                                                    buttonTitle
                                                } <
                                                /span>
                                            );

                                            return ( <
                                                IntlProvider locale = {
                                                    props.market
                                                }
                                                messages = {
                                                    props.messages
                                                } >
                                                <
                                                div className = {
                                                    this.classNames(props.className, this.namespace('mobile-top-menu-item'))
                                                } >
                                                <
                                                FormattedMessage id = {
                                                    props.menuTitle
                                                } > {
                                                    text => ( <
                                                        button onClick = {
                                                            this.toggleOpen
                                                        }
                                                        className = {
                                                            this.namespace('nav-container', 'btn')
                                                        }
                                                        aria - label = {
                                                            text
                                                        }
                                                        data - eid = {
                                                            props.menuButtonEid
                                                        } >
                                                        {!props.growthnav2 && trayName
                                                        } <
                                                        /button>
                                                    )
                                                } <
                                                /FormattedMessage> {
                                                    this.renderBackground()
                                                } <
                                                div className = {
                                                    this.namespace(
                                                        this.classNames('mobile-navigation', {
                                                            open: state.open
                                                        }))
                                                }
                                                onScroll = {
                                                    this.killRunway
                                                } > {
                                                    this.renderHeadingsPanel()
                                                } {
                                                    props.showButtons && this.renderButtons()
                                                } {
                                                    this.renderSubNavPanels()
                                                } <
                                                div className = {
                                                    this.namespace(this.classNames(
                                                        'runway-container', {
                                                            show: state.runway
                                                        }))
                                                } >
                                                <
                                                span className = {
                                                    this.namespace('uxicon', 'uxicon-chevron-down-lt')
                                                }
                                                /> <
                                                span className = {
                                                    this.namespace('uxicon', 'uxicon-chevron-down-lt')
                                                }
                                                /> <
                                                span className = {
                                                    this.namespace('uxicon', 'uxicon-chevron-down-lt')
                                                }
                                                /> <
                                                /div> <
                                                /div> <
                                                /div> <
                                                /IntlProvider>
                                            );
                                        }
                                    }

                                    MobileNav.propTypes = {
                                        ...NamespaceShape,
                                        className: PropTypes.string,
                                        growthnav2: PropTypes.bool,
                                        nav: PropTypes.arrayOf(PropTypes.object).isRequired,
                                        market: PropTypes.string.isRequired,
                                        messages: PropTypes.object.isRequired,
                                        currentHref: PropTypes.string.isRequired,
                                        menuTitle: PropTypes.string,
                                        activeHeading: PropTypes.object,
                                        useActiveHeadingAsMenuTitle: PropTypes.bool,
                                        onClick: PropTypes.func,
                                        urls: PropTypes.object.isRequired,
                                        showHomeLink: PropTypes.bool,
                                        literalCaptions: PropTypes.bool,
                                        eidPrefix: PropTypes.string,
                                        useGradientHighlightBar: PropTypes.bool,
                                        showButtons: PropTypes.bool,
                                        showMenuTitleOnHome: PropTypes.bool,
                                        menuButtonEid: PropTypes.string
                                    };

                                    /**
                                     * Default property values.
                                     *
                                     * @type {Object}
                                     * @public
                                     */
                                    MobileNav.defaultProps = {
                                        eidPrefix: 'uxp.hyd.mobile_nav',
                                        growthnav2: false,
                                        menuTitle: 'Shared:MobileNav:MainMenu',
                                        market: 'en-US',
                                        currentHref: '',
                                        showHomeLink: false,
                                        literalCaptions: false,
                                        useActiveHeadingAsMenuTitle: false,
                                        useGradientHighlightBar: false,
                                        showButtons: true,
                                        showMenuTitleOnHome: false,
                                        onClick: () => {}
                                    };

                                    export default withNamespace(MobileNav);