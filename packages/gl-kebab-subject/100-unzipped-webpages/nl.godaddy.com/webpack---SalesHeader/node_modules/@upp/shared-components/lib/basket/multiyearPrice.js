'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _intlFormatter = require('@godaddy/intl-formatter');

var _stringHelper = require('../stringHelper');

var _stringHelper2 = _interopRequireDefault(_stringHelper);

var _namespaceComponent = require('@ux/namespace-component');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var MultiYearPrice = function(_NamespaceConsumer) {
    _inherits(MultiYearPrice, _NamespaceConsumer);

    function MultiYearPrice() {
        _classCallCheck(this, MultiYearPrice);

        return _possibleConstructorReturn(this, (MultiYearPrice.__proto__ || Object.getPrototypeOf(MultiYearPrice)).apply(this, arguments));
    }

    _createClass(MultiYearPrice, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                currency = _props.currency,
                itemPricing = _props.itemPricing,
                language = _props.language,
                market = _props.market,
                design = _props.design;

            if (itemPricing && itemPricing.unit && itemPricing.unit.ranges && itemPricing.unit.ranges.length > 0) {
                var curr = new _intlFormatter.Currency();
                var firstYearText = '';
                var secondYearText = '';
                for (var index = 0; index < itemPricing.unit.ranges.length; index++) {
                    var range = itemPricing.unit.ranges[index];
                    var rangePrice = curr.formatMicrounits(range.subtotal, market, currency);
                    if (range.periodMin === 1 && range.periodMax === 1 && language.firstYear) {
                        firstYearText = language.firstYear.format(rangePrice);
                    } else if (range.periodMin === 2 && _stringHelper2.default.isUndefinedOrNullOrEmpty(range.periodMax) && language.secondPlusYear) {
                        secondYearText = language.secondPlusYear.format(rangePrice);
                    }
                }

                if (firstYearText && secondYearText) {
                    if (design === 'inline') {
                        return _react2.default.createElement(
                            'span', {
                                className: this.namespace('first-year-plus')
                            },
                            firstYearText,
                            ', ',
                            secondYearText
                        );
                    }
                    return _react2.default.createElement(
                        'div', {
                            className: this.namespace('first-year-plus')
                        },
                        firstYearText,
                        _react2.default.createElement('br', null),
                        secondYearText
                    );
                }
            }
            return null;
        }
    }]);

    return MultiYearPrice;
}(_namespaceComponent.NamespaceConsumer);

MultiYearPrice.propTypes = _extends({}, _namespaceComponent.NamespaceShape, {
    currency: _propTypes2.default.string.isRequired,
    language: _propTypes2.default.object.isRequired,
    itemPricing: _propTypes2.default.object.isRequired,
    market: _propTypes2.default.string.isRequired,
    design: _propTypes2.default.string
});

exports.default = (0, _namespaceComponent.withNamespace)(MultiYearPrice);