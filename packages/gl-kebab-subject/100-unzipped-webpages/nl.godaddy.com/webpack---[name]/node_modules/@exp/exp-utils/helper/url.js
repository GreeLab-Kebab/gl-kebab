'use strict';

var browserHelper = require('./browser');
var object = require('./object');
var scrubber = require('./scrubber');
var stringHelper = require('./string');

function encodeProperties(props) {
    var result = {};
    object.map(props, function(key, value) {
        if (typeof value !== 'undefined') {
            result[key] = encodeURIComponent(value);
        }
    });
    return result;
}

// Explicitly map properties to positions in the query string
function assembleUrl(params, endpoint) {
    var delim = endpoint.indexOf('?') === -1 ? '?' : '&';
    var qs = object.stringify(params, '&', '=');
    return '' + endpoint + delim + qs;
}

function _cleanQueryStringProps(props) {
    var result = {};
    object.map(props, function(key, value) {
        var encoded = false;
        var decodedValue = value;
        // if the param value is encoded (such as a path variable),
        // decode before scrubbing
        if (decodedValue !== decodeURIComponent(value)) {
            decodedValue = decodeURIComponent(value);
            encoded = true;
        }

        var scrubbedValue = scrubber.removePII(decodedValue, 'query string');

        // if the param value was encoded, reencode
        if (encoded) {
            scrubbedValue = encodeURIComponent(scrubbedValue);
        }
        result[key] = scrubbedValue;
    });
    return result;
}

function getQueryStringParams(queryString) {
    var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '&';

    if (!queryString) {
        queryString = browserHelper.getWindow().location.search;
    }

    if (queryString === '') {
        return {};
    }

    if (stringHelper.startsWith(queryString, '?')) {
        queryString = queryString.substring(1);
    }

    // split querystring into key/value pairs
    return object.parseString(queryString, delim, '=');
}

function getQueryStringParameter(key, caseFlag) {
    var params = getQueryStringParams();

    // Look for case insensitive match
    if (caseFlag) {
        for (var param in params) {
            if ((param + '').toLowerCase() === (key + '').toLowerCase()) {
                return params[param];
            }
        }
    }

    // Default to case sensitive lookup if truthy case flag was not provided
    if (params.hasOwnProperty(key)) {
        return params[key];
    }
}

function getCleanQueryString() {
    var queryStringParams = getQueryStringParams();
    if (Object.keys(queryStringParams).length === 0) {
        return '';
    }

    // clean each property
    var cleanedParams = _cleanQueryStringProps(queryStringParams);
    return assembleUrl(encodeProperties(cleanedParams), '');
}

function getCleanUrl() {
    var cleanQs = getCleanQueryString();
    var location = browserHelper.getWindow().location;

    var url = void 0;
    if (location) {
        url = location.protocol + '//' + location.hostname + location.pathname;
    }
    if (cleanQs) {
        url = '' + url + cleanQs;
    }
    return url;
}

// Moves utm_content parameter to content parameter
// to prevent losing when GA strips utm_* parameters
function moveUtmContent(qs) {
    var removedDelim = void 0;
    if (stringHelper.startsWith(qs, '?')) {
        removedDelim = qs.substring(1);
    }

    var qsObj = object.parseString(removedDelim, '&', '=');
    if (qsObj.utm_content) {
        qs += '&ga_content=' + qsObj.utm_content;
    }

    return qs;
}

var internalExports = {};
if (process.env.NODE_ENV !== 'production') {
    internalExports = {
        _cleanQueryStringProps: _cleanQueryStringProps
    };
}

module.exports = object.merge({
    encodeProperties: encodeProperties,
    assembleUrl: assembleUrl,
    getCleanUrl: getCleanUrl,
    getCleanQueryString: getCleanQueryString,
    getQueryStringParameter: getQueryStringParameter,
    getQueryStringParams: getQueryStringParams,
    moveUtmContent: moveUtmContent
}, internalExports);