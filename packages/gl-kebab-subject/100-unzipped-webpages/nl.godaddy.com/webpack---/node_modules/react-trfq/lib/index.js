'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TrfqEvent = exports.TrfqImpression = exports.TrfqPageReq = exports.gtm = exports.default = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
}; /* eslint-disable max-params */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _objectWithoutProperties(obj, keys) {
    var target = {};
    for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
    }
    return target;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

// Get or create a global _trfq object.
function _trfq() {
    // Get the global scope to use.
    // In browsers, `this` refers to the `window` object, which serves as the global scope.
    // If `this` is falsy (e.g. in Node environments), we must fall back to the `global` scope object.
    // If even the `global` scope object is missing, fall back to an empty object.
    /* eslint-disable no-invalid-this */
    var scope = this || global || {};
    /* eslint-enable no-invalid-this */

    if (!scope._trfq) {
        scope._trfq = [];
    }

    return scope._trfq;
}

/* Make sure scope._trfq is initialized */
_trfq();

/**
 * trfq - Procedural interface for Traffic 2.
 */
var trfq = {
    /**
     * @public trfq.logEvent - Logs a Traffic 2 event with the given metadata.
     *
     * @param {String} id Traffic 2 event ID (e.g. `gce.sales.hosting.profile.login.update` (required)
     * @param {String} desc Traffic 2 event description. (e.g. `click`, `hover`, `touch`, `custom`) (required)
     * @param {Object} data Traffic 2 key-value metadata (e.g. `{ 'status': 'OK', 'foo', 42 }`).
     * @param {Event} evt Event object. Will be passed to the callback.
     * @param {Function} cb Callback to execute after logging. Called with the `evt` argument.
     * @param {Number} cbDelay Callback delay in milliseconds (passed to setTimeout). If undefined, callback is immediate.
     * @returns {Mixed} If no callback was specified, nothing is returned. If no callback delay was specified, the result of the
     * callback is returned. Otherwise, a timeout ID is returned, suitable for use with `clearTimeout`.
     */
    logEvent: function logEvent(id, desc, data, evt, cb, cbDelay) {
        function toKeyValueArray(obj) {
            return Object.keys(obj).map(function(key) {
                return [key, typeof obj[key] === 'number' ? obj[key] : String(obj[key])];
            });
        }

        var cmd = ['cmdLogPageEvent', desc, id];
        cmd.push((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data !== null ? toKeyValueArray(data) : []);

        if (evt) {
            cmd.push(evt.target, evt);
        }

        _trfq().push(cmd);

        if (typeof cb === 'function') {
            return Number.isNaN(cbDelay) || !Number.isFinite(cbDelay) ? cb(evt) : setTimeout(cb, cbDelay);
        }
    },


    /**
     * @public trfq.logImpression - Logs a Traffic 2 impression with the given ID.
     *
     * @param {String} id Traffic 2 event ID (e.g. `gce.sales.hosting.profile.login.update` (required)
     * @returns {undefined}
     */
    logImpression: function logImpression(id) {
        _trfq().push(['cmdLogImpression', id]);
    },


    /**
     * @public trfq.logPageReq - Logs a Traffic 2 virtual page request with the given path.
     *
     * @param {String} path Traffic 2 virtual path (e.g. `/virtual-page`) (required)
     * @returns {undefined}
     */
    logPageReq: function logPageReq(path) {
        _trfq().push(['cmdLogPageRequest', path]);
    }
};

/**
 * gtm - procedural API to configure Google Tag Manager. Google Tag Manager is responsible
 * for loading the Traffic2 "driver" script (e.g. tcc.combined.2.1.25c.min.js).
 */
var gtm = {
    /**
     * @public gtm.start – pushes the final 'gtm.start' event into the _gaDataLayer
     * @returns {undefined}
     */
    start: function start() {
        var w = window;
        if (w.ux && w.ux.disable && w.ux.disable.ga === true) {
            return;
        } // eslint-disable-line no-undef

        var l = '_gaDataLayer';
        w[l] = w[l] || [];
        w[l].push({
            'gtm.start': new Date().getTime(),
            event: 'gtm.js'
        });

        var gtmScript = document.createElement('script');
        var insertionPoint = document.getElementsByTagName('script')[0];
        var insertionParent = insertionPoint.parentNode;

        //
        // We hard-code "GTM-SXRF" because this is controlled by Traffic2 itself
        // by definition since it is the only script loaded by Google Tag Manager.
        //
        gtmScript.type = 'text\/javascript';
        gtmScript.async = 'true';
        gtmScript.src = w.ux && w.ux.tccUrl || 'https://www.googletagmanager.com/gtm.js?id=GTM-SXRF&l=_gaDataLayer';

        insertionParent.insertBefore(gtmScript, insertionPoint);
    },

    /**
     * @public gtm.configure – pushes any data objects in `options.data` into _gaDataLayer
     * and then pushes final 'gtm.start' event.
     *
     * @param {Object} options Google Tag Manager data options.
     * @returns {undefined}
     */
    configure: function configure(options) {
        if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
            return;
        }

        var w = window;
        var data = options.data || [];
        w._gaDataLayer = w._gaDataLayer || [];
        w._gaDataLayer = w._gaDataLayer.concat(data, w.ux && w.ux.gaconfig || []);

        w._gaq = w._gaq || [];
        if (options.domain) {
            w._gaq.push(['_setDomainName', options.domain]);
        }

        gtm.start();
    }
};

/**
 * @private fallbackRequiredProp - Creates a React prop validator with the following checks:
 * - If the prop is truthy, validate the prop with the given base validator.
 * - Otherwise, if the given fallback is truthy, validate the fallback with the base validator.
 * - If neither the prop nor the fallback is truthy, validation fails.
 *
 * @param {Function} propType Base React prop validator
 * @param {Mixed} fallback Fallback value to use
 * @returns {Function} A React prop validator as described above.
 */
function fallbackRequiredProp(propType, fallback) {
    return function requiredWithFallback(props, propName, componentName) {
        var prop = props[propName];
        if (prop) {
            return propType(props, propName, componentName);
        } else if (fallback) {
            return propType(_defineProperty({}, propName, fallback), propName, componentName);
        }

        return new Error('No prop `' + propName + '`supplied to `' + componentName + '` and no fallback was found. ' + 'Validation failed.');
    };
}

/**
 * @public TrfqEvent - Higher-order React component for Traffic 2 event logging.
 *
 * @param {React.Component} Component React component to wrap.
 * @param {String} id Event identifier to log (e.g. `gce.sales.hosting.profile.login.update`)
 * @param {String} on Name of event on which the logging should occur (e.g. `mouseDown`, `submit`) (default: `click`)
 * @param {String} desc Event description (e.g. `click`, `hover`, `touch`, `custom`) (default: same as `on`)
 * @param {Mixed} data Key-value metadata about the event (e.g. `{ "status": "OK", "foo": "bar" }` (optional)
 * @param {Number} delay Delay in number of milliseconds to use with `setTimeout` for calling the component's existing event
 * handler (for the event specified by `on`). Useful for ensuring logging finishes in case the event would normally trigger a page
 * load. (optional)
 * @returns {React.Component} A React component wrapped with Traffic 2 event logging, with the following attributes available:
 * - `{String} trfqId` Event identifier to log (overrides `id`)
 * - `{String} trfqOn` Name of event on which the logging should occur (overrides `on`)
 * - `{String} trfqDesc` Event description (overrides `desc`)
 * - `{Mixed} trfqData` Key-value metadata (overrides `data`)
 * - `{Number} trfqDelay` Existing handler delay (overrides `delay`)
 */
function TrfqEvent(Component, id) {
    var on = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'click';
    var desc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : on;
    var data = arguments[4];
    var delay = arguments[5];

    return function(_React$Component) {
        _inherits(TrfqEventComponent, _React$Component);

        function TrfqEventComponent() {
            _classCallCheck(this, TrfqEventComponent);

            return _possibleConstructorReturn(this, (TrfqEventComponent.__proto__ || Object.getPrototypeOf(TrfqEventComponent)).apply(this, arguments));
        }

        _createClass(TrfqEventComponent, [{
            key: 'render',
            value: function render() {
                var _props = this.props,
                    _props$trfqId = _props.trfqId,
                    trfqId = _props$trfqId === undefined ? id : _props$trfqId,
                    _props$trfqOn = _props.trfqOn,
                    trfqOn = _props$trfqOn === undefined ? on : _props$trfqOn,
                    _props$trfqDesc = _props.trfqDesc,
                    trfqDesc = _props$trfqDesc === undefined ? desc : _props$trfqDesc,
                    _props$trfqData = _props.trfqData,
                    trfqData = _props$trfqData === undefined ? data : _props$trfqData,
                    _props$trfqDelay = _props.trfqDelay,
                    trfqDelay = _props$trfqDelay === undefined ? delay : _props$trfqDelay,
                    props = _objectWithoutProperties(_props, ['trfqId', 'trfqOn', 'trfqDesc', 'trfqData', 'trfqDelay']);

                // First compute the (React) event to handle from
                // the name provided to the higher-order component.


                var eventName = 'on' + trfqOn.charAt(0).toUpperCase() + trfqOn.slice(1);

                // Store a reference to the existing event handler, and overwrite it
                // with an interceptor to log the event.
                var currHandler = props[eventName];
                props[eventName] = function trfqEventHandler(evt) {
                    trfq.logEvent(trfqId, trfqDesc, trfqData, evt, currHandler, trfqDelay);
                };

                return _react2.default.createElement(Component, props);
            }
        }], [{
            key: 'propTypes',
            get: function get() {
                var string = _propTypes2.default.string,
                    number = _propTypes2.default.number,
                    object = _propTypes2.default.object;

                return {
                    trfqId: fallbackRequiredProp(string, id),
                    trfqOn: fallbackRequiredProp(string, on),
                    trfqDesc: fallbackRequiredProp(string, desc),
                    trfqData: object,
                    trfqDelay: number
                };
            }
        }]);

        return TrfqEventComponent;
    }(_react2.default.Component);
}

/**
 * @public TrfqImpression - Higher-order React component for Traffic 2 impression logging upon `componentWillMount`.
 *
 * @param {React.Component} Component The component to wrap (required)
 * @param {String} id Event identifier to log (e.g. `gce.sales.hosting.profile.login.update`)
 * @returns {React.Component} A React component wrapped with Traffic 2 impression logging, with the following attribute available:
 * - `{String} trfqId` Event identifier to log (overrides `id`)
 */
function TrfqImpression(Component, id) {
    return function(_React$Component2) {
        _inherits(TrfqImpressionComponent, _React$Component2);

        function TrfqImpressionComponent() {
            _classCallCheck(this, TrfqImpressionComponent);

            return _possibleConstructorReturn(this, (TrfqImpressionComponent.__proto__ || Object.getPrototypeOf(TrfqImpressionComponent)).apply(this, arguments));
        }

        _createClass(TrfqImpressionComponent, [{
            key: 'componentWillMount',


            /**
             * componentWillMount - Logs a Traffic 2 impression when the component is about to mount.
             */
            value: function componentWillMount() {
                var _props$trfqId2 = this.props.trfqId,
                    trfqId = _props$trfqId2 === undefined ? id : _props$trfqId2;

                trfq.logImpression(trfqId);
            }
        }, {
            key: 'render',
            value: function render() {
                // Don't pass along trfq props
                var props = _objectWithoutProperties(this.props, []);

                delete props.trfqId;
                return _react2.default.createElement(Component, props);
            }
        }], [{
            key: 'propTypes',
            get: function get() {
                var string = _propTypes2.default.string;

                return {
                    trfqId: fallbackRequiredProp(string, id)
                };
            }
        }]);

        return TrfqImpressionComponent;
    }(_react2.default.Component);
}

/**
 * TrfqPageReq - Higher-order React component for Traffic 2 page request logging upon `componentWillMount`.
 *
 * @param {React.Component} Component The component to wrap (required)
 * @param {String} path Virtual path to log (e.g. `/virtual-page`)
 * @returns {React.Component} A React component wrapped with Traffic 2 page request logging, with the following attribute
 * available:
 * - `{String} trfqPath` Virtual path (overrides `path`)
 */
function TrfqPageReq(Component, path) {
    return function(_React$Component3) {
        _inherits(TrfqPageReqComponent, _React$Component3);

        function TrfqPageReqComponent() {
            _classCallCheck(this, TrfqPageReqComponent);

            return _possibleConstructorReturn(this, (TrfqPageReqComponent.__proto__ || Object.getPrototypeOf(TrfqPageReqComponent)).apply(this, arguments));
        }

        _createClass(TrfqPageReqComponent, [{
            key: 'componentWillMount',


            /**
             * componentWillMount - Logs a Traffic 2 virtual page request when the component is about to mount.
             */
            value: function componentWillMount() {
                var _props$trfqPath = this.props.trfqPath,
                    trfqPath = _props$trfqPath === undefined ? path : _props$trfqPath;

                trfq.logPageReq(trfqPath);
            }
        }, {
            key: 'render',
            value: function render() {
                // Don't pass along trfq props
                var props = _objectWithoutProperties(this.props, []);

                delete props.trfqPath;
                return _react2.default.createElement(Component, props);
            }
        }], [{
            key: 'propTypes',
            get: function get() {
                var string = _propTypes2.default.string;

                return {
                    trfqPath: fallbackRequiredProp(string, path)
                };
            }
        }]);

        return TrfqPageReqComponent;
    }(_react2.default.Component);
}

//
// Keep references to non-default exports on `trfq`
// for non ES6 module run-time scenarios.
//
trfq.gtm = gtm;
trfq.TrfqPageReq = TrfqPageReq;
trfq.TrfqImpression = TrfqImpression;
trfq.TrfqEvent = TrfqEvent;

exports.default = trfq;
exports.gtm = gtm;
exports.TrfqPageReq = TrfqPageReq;
exports.TrfqImpression = TrfqImpression;
exports.TrfqEvent = TrfqEvent;


// WEBPACK FOOTER //
// ./node_modules/react-trfq/lib/index.js