import {
    palette
} from '@ux/inline-styles';
import vars from './definitions';

/**
 * Circle size configurations needed for Svg calculation.
 *
 * @type {Object}
 * @private
 */
const sizes = {
    sm: {
        width: parseInt(vars.uxSpinnerSmSize, 10),
        strokeWidth: vars.uxSpinnerSmStrokeWidth
    },
    md: {
        width: parseInt(vars.uxSpinnerMdSize, 10),
        strokeWidth: vars.uxSpinnerMdStrokeWidth
    },
    lg: {
        width: parseInt(vars.uxSpinnerLgSize, 10),
        strokeWidth: vars.uxSpinnerLgStrokeWidth
    }
};

/**
 * Generate the various of styles of the spinner.
 *
 * @param {String} size Size of the spinner.
 * @param {String} shade Shade of color we want to use.
 * @returns {Object} Design styles and sizes.
 * @private
 */
export default function design(size, shade) {
    const colors = {
        light: {
            circle: palette('white'),
            path: palette('primary')
        },
        primary: {
            circle: palette('gray', 'light'),
            path: palette('primary')
        },
        dark: {
            circle: palette('white', 'base', 'contrast'),
            path: palette('white')
        }
    };

    const color = colors[shade];

    switch (size) {
        case 'small':
        case 'sm':
            size = sizes.sm;
            break;

        case 'large':
        case 'lg':
            size = sizes.lg;
            break;

        default:
            size = sizes.md;
    }

    return {
        size: size,

        path: {
            strokeWidth: size.strokeWidth,
            strokeLinecap: 'round',
            stroke: color.path,
            fill: 'none'
        },

        circle: {
            strokeWidth: size.strokeWidth,
            strokeLinecap: 'round',
            stroke: color.circle,
            fill: 'none'
        }
    };
}



// WEBPACK FOOTER //
// ./node_modules/@ux/spinner/design.js