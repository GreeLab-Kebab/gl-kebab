import PropTypes from 'prop-types';
import rip from 'rip-out';
import React from 'react';
import Base from './form';

/**
 * Form component for rendering UXCore smart forms.
 *
 * @displayName Form (Web)
 * @class Form
 * @public
 */
export default class Form extends Base {
    /**
     * Figure out if the form contains children elements.
     *
     * @param {array} children React children.
     * @returns {boolean} Indication if the children contain a upload field.
     * @private
     */
    uploader(children) {
        return React.Children.toArray(children).some(child => {
            if (!child.type || !child.props) return false;

            if (child.type === 'input' && child.props.type === 'file') {
                return true;
            }

            return this.uploader(child.props.children);
        });
    }

    /**
     * Return the encType of the form based on method and children.
     *
     * @param {string} method Uppercased RESTful method.
     * @returns {string} Encoding.
     * @private
     */
    encType(method) {
        return method === 'POST' && this.uploader(this.props.children) ?
            'multipart/form-data' :
            'application/x-www-form-urlencoded';
    }

    /**
     * Render the form element.
     *
     * @returns {ReactElement} The rendered template.
     * @public
     */
    render() {
            const {
                onSubmit,
                inline,
                className,
                encType,
                ...props
            } = this.props;
            const formprops = rip(props, 'onValidChange');
            const method = props.method.toUpperCase();
            const attributes = {
                method,
                encType: encType || this.encType(method),
                className: this.classNames(className, {
                    'form-inline': inline
                }),
                onSubmit: event => {
                    //
                    // Prevent form submission if the form does not validate
                    //
                    if (this.state.valid === false) {
                        event.preventDefault();
                    } else if (onSubmit) {
                        onSubmit(event);
                    }
                }
            };

            return super.render({
                    children: < form { ...formprops
                    } { ...attributes
                    }
                    /> });
                }
            }

            /**
             * Default properties.
             *
             * @type {Object}
             * @private
             */
            Form.defaultProps = {
                ...Base.defaultProps,
                method: 'POST'
            };

            /**
             * PropType validation
             *
             * @type {Object}
             * @private
             */
            Form.propTypes = {
                ...Base.propTypes,
                /** HTTP method to use, defaults to POST */
                method: PropTypes.string,
                /** Encoding used for form-data */
                encType: PropTypes.string,
                /** Classes applied to the form */
                className: PropTypes.string
            };



            // WEBPACK FOOTER //
            // ./node_modules/@ux/form/index.js