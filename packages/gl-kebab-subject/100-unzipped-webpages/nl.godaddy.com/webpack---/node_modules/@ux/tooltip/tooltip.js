import {
    NamespaceConsumer
} from '@ux/namespace-component';
import PropTypes from 'prop-types';

/**
 * Tooltip base class.
 * This is shared functionality between both web and native components.
 *
 * @displayName TooltipBase
 * @class TooltipBase
 * @public
 */
export default class TooltipBase extends NamespaceConsumer {
    /**
     * Getter to return a handler to toggle the tooltip. If no tooltip instance
     * is available, it will be opened. Otherwise it will be closed.
     *
     * Propagation cannot be stopped here as other tooltips need to be closed with
     * the same click event.
     *
     * @param {Event} event React SyntheticClick event.
     * @public
     */
    get toggle() {
        return event => {
            event.preventDefault();

            this[this.tooltip ? 'close' : 'open'](event);
        };
    }

    /**
     * Getter to return a handler that closes the tooltip and calls the `onDismiss`
     * property.
     *
     * This function is supposed to be called only when the user clicks the
     * `close` button, representing that the user had a clear intent to close
     * the tooltip.
     *
     * @private
     */
    get dismiss() {
        return event => {
            event.preventDefault();

            this.close();
            this.props.onDismiss && this.props.onDismiss();
        };
    }

    /**
     * Check if the component needs to be re-rendered.
     * If `props.open` has changed, it will open or close the tooltip as needed.
     *
     * @param {Object} prevProps values before the component update.
     * @private
     */
    componentDidUpdate(prevProps) {
        const {
            open
        } = this.props;

        if (open !== prevProps.open) {
            if (open) {
                this.open();
            } else {
                this.close();
            }
        }
    }

    /**
     * Open the tooltip if `props.open` is true.
     *
     * @private
     */
    componentDidMount() {
        if (this.props.open) {
            this.open();
        }
    }

    /**
     * Render the component.
     *
     * @returns {ReactElement} div element with Tooltip.
     * @public
     */
    render() {
        // NOTE: This is just here to get docs to generate
        return super.render();
    }
}

/**
 * Default prop values.
 *
 * @enum {Object} defaultProps
 * @public
 */
TooltipBase.defaultProps = {
    open: false,
    tabIndex: 0
};

/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @public
 */
TooltipBase.propTypes = {
    /** Children to use as the tooltip anchor */
    'children': PropTypes.node,
    /** Tooltip message content */
    'message': PropTypes.node,
    /** Content for the tooltip title */
    'title': PropTypes.node,
    /** Text content for the tooltip anchor */
    'text': PropTypes.node,
    /** Flag for if the tooltip should open at start */
    'open': PropTypes.bool,
    /** Handler for when a tooltip is closed */
    'onClose': PropTypes.func,
    /** Handler for when a tooltip is opened */
    'onOpen': PropTypes.func,
    /** Handler for when a tooltip is closed explicitly by the user */
    'onDismiss': PropTypes.func,
    /** The accessibility tab index value */
    'tabIndex': PropTypes.number,
    /** The eid to identify click origin */
    'data-eid': PropTypes.string,
    /** The aria-label to identify the button */
    'aria-label': PropTypes.string
};



// WEBPACK FOOTER //
// ./node_modules/@ux/tooltip/tooltip.js