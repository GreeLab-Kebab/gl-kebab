import React from 'react';
import Component from '@ux/component';
import ReactDOM from 'react-dom';
import Content from './tooltip-content';


/**
 * Render the tooltip content in a portal.
 *
 * @param {Object} props Content properties.
 * @returns {ReactElement} Div containing title.
 * @private
 */
export default class TooltipPortal extends Component {
    constructor(props) {
        super(props);
        this.state = {
            ...this.state,
            inDOM: false
        };
        this.tooltip = document.createElement('div');
    }

    componentDidMount() {
        // The portal element is inserted in the DOM tree after
        // the Modal's children are mounted, meaning that children
        // will be mounted on a detached DOM node. If a child
        // component requires to be attached to the DOM tree
        // immediately when mounted, for example to measure a
        // DOM node, or uses 'autoFocus' in a descendant, add
        // state to Modal and only render the children when Modal
        // is inserted in the DOM tree.
        document.body.appendChild(this.tooltip);
        this.setState({
            inDOM: true
        });
    }

    componentWillUnmount() {
        document.body.removeChild(this.tooltip);
    }


    render() {
        return this.state.inDOM && ReactDOM.createPortal( <
            React.Fragment >
            <
            Content { ...this.props
            }
            hideClose = {
                this.props.openOnHover && this.props.hideClose
            }
            /> <
            /React.Fragment>,
            this.tooltip
        );
    }
}

/**
 * Property types definition.
 *
 * @enum {Object} propTypes
 * @private
 */
TooltipPortal.propTypes = {
    ...Content.propTypes
};



// WEBPACK FOOTER //
// ./node_modules/@ux/tooltip/tooltip-portal.js