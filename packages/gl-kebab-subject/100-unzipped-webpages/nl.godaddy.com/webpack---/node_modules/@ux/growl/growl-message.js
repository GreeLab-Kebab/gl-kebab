import {
    NamespaceConsumer,
    withNamespace,
    NamespaceShape
} from '@ux/namespace-component';
import PropTypes from 'prop-types';
import React from 'react';

/**
 * Mappings of icon name to className.
 *
 * @type {object}
 * @private
 */
const ICONS = {
    success: 'uxicon-ok',
    warning: 'uxicon-information',
    error: 'uxicon-alert'
};

/**
 * Component for a message.
 *
 * @displayName Growl Message
 * @class GrowlMessage
 * @public
 */
export class GrowlMessage extends NamespaceConsumer {
    render() {
        const props = this.props;
        let iconElement;

        if (props.icon in ICONS) {
            iconElement = ( <
                div className = {
                    this.namespace('uxicon', ICONS[props.icon])
                }
                aria - hidden = 'true'
                aria - label = {
                    props.icon
                }
                />
            );
        }

        const content = typeof props.content === 'function' ? props.content(props) : props.content;

        return ( <
            div id = {
                props.id
            }
            className = {
                this.namespace('ux-growl-msg')
            }
            onMouseEnter = {
                props.onMouseEnter
            }
            onMouseLeave = {
                props.onMouseLeave
            } >
            <
            div className = {
                this.namespace('ux-growl-msg-content')
            } >
            <
            button type = 'button'
            data - action = 'close'
            aria - label = 'Close'
            className = {
                this.namespace('ux-growl-msg-close close')
            }
            onClick = {
                props.onClose
            }
            onKeyDown = {
                props.onCloseButtonKeyDown
            } >
            <
            /button> {
                iconElement
            } <
            div className = {
                this.namespace('ux-growl-msg-title')
            }
            role = 'heading'
            aria - level = '1' > {
                props.title
            } < /div> <
            div className = {
                this.namespace('ux-growl-msg-text')
            } > {
                content
            } < /div> <
            /div> <
            /div>
        );
    }
}

/**
 * PropType validation.
 *
 * @type {Object}
 * @public
 */
GrowlMessage.propTypes = {
    ...NamespaceShape,

    /** the unique id of the Message  */
    id: PropTypes.string.isRequired,
    /** The title of the message  */
    title: PropTypes.node.isRequired,
    /** The message content as either a valid node or function. */
    content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,
    /** The icon for the message valid options: none, success, warning, error */
    icon: PropTypes.oneOf(['none', ...Object.keys(ICONS)]).isRequired,
    /** callback function for when the user closes the message */
    onClose: PropTypes.func.isRequired,
    /** callback function for when mouse enteres the message dom node */
    onMouseEnter: PropTypes.func,
    /** callback function for when mouse leaves the message dom node */
    onMouseLeave: PropTypes.func,
    /** passthrough callback function from button when keydown event happens on button */
    onCloseButtonKeyDown: PropTypes.func
};

/**
 * PropType defaults.
 *
 * @type {Object}
 * @private
 */
GrowlMessage.defaultProps = {
    icon: 'none'
};

export default withNamespace(GrowlMessage);



// WEBPACK FOOTER //
// ./node_modules/@ux/growl/growl-message.js