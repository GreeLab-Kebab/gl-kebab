import validateComponents from 'react-component-validator';
import Component from '@ux/component';
import React from 'react';
import PropTypes from 'prop-types';

//
// Import all child components.
//
import TabContent from './tab-content';
import TabIndex from './tab-index';
import Tab from './tab';

/**
 * Display content as tabs.
 *
 * @class Tabs
 * @displayName Tabs
 * @public
 */
class Tabs extends Component {
    constructor() {
        super(...arguments);

        this.state = {
            ...this.state,
            selected: 0
        };
    }

    /**
     * Default implementation of tab selection logic. This method can be provided
     * as property and will receive arguments as specified below.
     *
     * @name change
     * @memberof Tabs
     * @returns {Function} Click event handler
     * @public
     */
    get change() {
        return (index, event) => {
            event.preventDefault();

            this.debug('Tab %d selected, changing selected state', index);
            this.setState({
                selected: index
            });
        };
    }

    /**
     * Return selected tab, prefer props over state.
     *
     * @returns {Number} Index of selected tab
     * @private
     */
    get selected() {
        return 'selected' in this.props ? this.props.selected : this.state.selected;
    }

    /**
     * Extract TabIndex child from all childs.
     *
     * @name navigation
     * @memberof Tabs
     * @param {React.DOM[]} childs - React elements
     * @returns {React.DOM[]} React elements
     * @private
     */
    navigation(childs) {
        const tabIndex = childs.filter(child => child.type === TabIndex)[0];
        if (!tabIndex) {
            return null;
        }

        const contentIds = childs.filter(child => child.type === TabContent)
            .map(child => child.props.id);

        return React.cloneElement(tabIndex, {
            selected: this.selected,
            change: this.props.change || this.change,
            contentIds
        });
    }

    /**
     * Gets the tab ID for a given child index
     * @param {React.DOM[]} childs Array of children tabs
     * @param {number} idx Index of child to get tab ID for
     * @returns {number} ID of the child at given index
     */
    getTabId(childs, idx) {
        const tabIndex = childs.filter(child => child.type === TabIndex)[0];
        if (!tabIndex) {
            return;
        }

        const tabs = React.Children.toArray(tabIndex.props.children).filter(child => child.type === Tab);
        return tabs[idx] && tabs[idx].props && tabs[idx].props.id;
    }

    /**
     * Extract TabContent children from all childs. The double filter is required to
     * ensure the length of the childs array matches the length of the TabIndexes.
     *
     * @name content
     * @memberof Tabs
     * @param {React.DOM[]} childs - React elements
     * @returns {React.DOM[]} React elements
     * @private
     */
    content(childs) {
        const selectedTab = this.getTabId(childs, this.selected);
        const content = childs.filter(child => child.type === TabContent)[this.selected];

        if (!content) {
            return null;
        }

        return React.cloneElement(content, {
            'aria-labelledby': selectedTab
        });
    }

    /**
     * Render the Tabs Component.
     *
     * @returns {React.DOM} div element with TabIndex and TabContent as children
     * @private
     */
    render() {
        const props = this.props;
        const children = React.Children.toArray(props.children);

        return ( <
            div className = {
                props.className
            } > {
                this.navigation(children)
            } {
                this.content(children)
            } <
            /div>
        );
    }
}

/**
 * Optional properties: selected and change. Also validate the type of children
 * that are passed.
 *
 * @enum {Object} expected types of properties.
 * @public
 */
Tabs.propTypes = {
    /** Tab index that should be selected */
    selected: PropTypes.number,
    /** Function called when selected tab is changed */
    change: PropTypes.func,
    /** Child tabs or tab contents */
    children: validateComponents([TabIndex, TabContent]),
    /** Classes to apply to Tabs */
    className: PropTypes.string
};

//
// Attach childs to the main Component for availability without ES6 imports.
//
Tabs.TabContent = TabContent;
Tabs.TabIndex = TabIndex;
Tabs.Tab = Tab;

//
// Export the Class and related children.
//
export {
    Tabs as
    default,
    TabContent,
    TabIndex,
    Tab
};



// WEBPACK FOOTER //
// ./node_modules/@ux/tabs/index.js