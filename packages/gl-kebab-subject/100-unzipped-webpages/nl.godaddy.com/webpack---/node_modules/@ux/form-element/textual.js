import {
    NamespaceConsumer,
    withNamespace,
    NamespaceShape
} from '@ux/namespace-component';
import {
    propTypes,
    defaultProps
} from './enums.js';
import Fieldset from '@ux/fieldset';
import Icon from '@ux/icon';
import React from 'react';

/**
 * Renders an input element according to the design specifications.
 *
 * @displayName Textual Input (Web)
 *
 * @class Textual
 * @private
 */
export class Textual extends NamespaceConsumer {
    /**
     * Render the actual component.
     *
     * @returns {React.DOM} The Component.
     * @private
     */
    render() {
        const props = this.props;
        const grid = props.grid;
        const length = props.value.length;
        const className = this.classNames(
            props.hideLabel && 'sr-only',
            grid.label,
            this.namespace(
                this.classNames({
                    'form-control-label': !!grid.label
                })
            )
        );

        const hasClassName = this.namespace(this.classNames({
            'has-danger': props.hadInput && props.validates === false
        }));

        return ( <
            Fieldset proxy = {!!props.proxy
            }
            className = {
                hasClassName
            } > {
                (props.label || props.required) &&
                <
                label htmlFor = {
                    props.id
                } // eslint-disable-line jsx-a11y/label-has-for
                ref = {
                    label => {
                        props.elements.label = label;
                    }
                }
                className = {
                    className
                }
                id = {
                    'label-' + props.id
                } >
                {
                    props.label
                } {
                    props.required
                } <
                /label>
            } {
                props.button
            } {
                props.input
            } {
                props.clearable && !!length &&
                    <
                    button className = {
                        this.namespace('form-element-clear')
                    }
                onClick = {
                    props.clearable
                }
                aria - label = 'clear_field' >
                    <
                    Icon name = 'delete-fill'
                aria - hidden = 'true' / >
                    <
                    /button>
            } {
                props.notice
            } {
                props.error
            } <
            /Fieldset>
        );
    }
}

/**
 * PropType validation and defaultProperties. Extend default set of properties with web-only input
 * properties.
 *
 * @type {Object}
 * @private
 */
Textual.defaultProps = defaultProps.input;
Textual.propTypes = {
    ...propTypes.input,
    ...NamespaceShape
};

export default withNamespace(Textual);



// WEBPACK FOOTER //
// ./node_modules/@ux/form-element/textual.js