import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import React, {
    Component
} from 'react';
import PropTypes from 'prop-types';
import Button from '@ux/button';
import rip from 'rip-out';

/**
 * Create a triple dot icon.
 *
 * @function TripleDot
 * @returns {React.ReactElement} tripledot element
 * @private
 */
const TripleDot = withNamespace(({
        namespace
    }) =>
    <
    div className = {
        namespace('uxicon', 'uxicon-ellipses')
    } > < /div>
);

/**
 * Create two buttons rendered as split dropdown.
 *
 * @function DropdownSplit
 * @returns {React.ReactElement} split button element
 * @private
 */
const DropdownSplit = withNamespace(({
        type,
        toggle,
        namespace,
        ...other
    }) =>
    <
    div className = {
        namespace('btn-group')
    } >
    <
    Button { ...other
    }
    design = {
        type
    }
    className = {
        namespace('dropdown-split')
    }
    /> <
    Button design = {
        type === 'custom' ? 'primary' : type
    }
    onClick = {
        toggle
    }
    className = {
        namespace('dropdown-toggle', 'dropdown-toggle-split', 'btn-dropdown')
    } >
    <
    /Button> <
    /div>
);

/**
 * Type property of split dropdown.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownSplit.propTypes = {
    ...NamespaceShape,
    toggle: PropTypes.func,
    type: PropTypes.string
};

/**
 * Create button control that optionally renders split buttons.
 *
 * @class DropdownButton
 * @private
 */
class DropdownButton extends NamespaceConsumer {
    render() {
        const props = rip(this.props, 'toggleIcon', 'hasPlaceholder');
        const {
            type,
            className,
            toggle,
            split,
            ...other
        } = props;

        if (split) {
            return <DropdownSplit type = {
                type
            }
            toggle = {
                toggle
            } { ...other
            }
            />;
        }

        return <Button { ...other
        }
        design = {
            type
        }
        onClick = {
            toggle
        }
        className = {
            this.classNames(className, props.namespace('dropdown-toggle', 'btn-dropdown'))
        }
        />;
    }
}

/**
 * Toggle and split properties of the button.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownButton.propTypes = {
    ...NamespaceShape,
    toggle: PropTypes.func,
    split: PropTypes.bool,
    disabled: PropTypes.bool,
    hasPlaceholder: PropTypes.bool
};

/**
 * Create select control.
 *
 * @class DropdownSelect
 * @private
 */
class DropdownSelect extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.onKeyDown = this.onKeyDown.bind(this);
        this.keycodes = {
            Space: function(type) {
                return type !== 'multiselect';
            },
            Enter: 'toggle',
            Escape: 'keydown',
            ArrowUp: 'keydown',
            ArrowDown: 'keydown'
        };
    }

    /**
     * Triggers toggle on keypress of enter or spacebar
     *
     * @param {SyntheticEvent} e React Keyboard event.
     * @private
     */
    onKeyDown(e) {
        //
        // IE11 does not include "code" and provides a different value for "key"
        // than other browsers. e.g.:
        //
        //   - IE11:    { "key": "Spacebar", "keyCode": 32, "which": 32 }
        //   - Chrome:  { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
        //   - Firefox: { "code": "Space", "key": " ", "keyCode": 32, "which": 32 }
        //   - Safari:  { "keyCode": 32, "which": 32 }
        //
        // Thankfully React normalizes these into `e.key` in their SyntheticEvent
        // See: https://facebook.github.io/react/docs/events.html#keyboard-events
        //
        const key = e.key;
        const accepts = this.keycodes[key];
        if (accepts) {
            e.preventDefault();
            this.props.onKeyDown(e);

            if (accepts === 'toggle' || (typeof accepts === 'function' &&
                    accepts(this.props.type))) {
                this.props.toggle(e);
            }
        }
    }

    render() {
        const props = this.props;
        let eventHandlers = {};
        if (!props.disabled) {
            eventHandlers = {
                onClick: props.toggle,
                onKeyDown: this.onKeyDown
            };
        }

        return ( <
            div aria - label = 'dropdown'
            aria - disabled = {
                props.disabled
            } { ...eventHandlers
            }
            tabIndex = {
                props.tabIndex || 0
            }
            className = {
                this.classNames(
                    this.namespace('form-control'), {
                        'form-control-lg': props.size === 'large'
                    }, {
                        'form-control-sm': props.size === 'small'
                    }, {
                        placeholder: props.hasPlaceholder
                    }
                )
            } > {
                props.type !== 'tripledot' && props.type !== 'custom' && props.toggleIcon !== 'clock' &&
                <
                div className = {
                    this.namespace('dropdown-toggle')
                }
                aria - label = 'dropdown toggle' / >
            } {
                props.type === 'select' && props.toggleIcon === 'clock' &&
                    <
                    div className = {
                        this.namespace('uxicon', 'uxicon-clock')
                    }
                aria - label = 'timepicker toggle' / >
            } <
            div className = {
                this.namespace('dropdown-text')
            } > {
                props.children
            } <
            /div> <
            /div>
        );
    }
}

/**
 * Toggle property of the control.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownSelect.propTypes = {
    ...NamespaceShape,
    tabIndex: PropTypes.number,
    toggle: PropTypes.func,
    disabled: PropTypes.bool,
    onKeyDown: PropTypes.func,
    toggleIcon: PropTypes.oneOf(['clock', 'dropdown']),
    hasPlaceholder: PropTypes.bool,
    size: PropTypes.oneOf(['large', 'small', 'default'])
};


/**
 * DropdownControl creates a select or button dropdown. Each control gets different
 * properties.
 *
 * @class DropdownControl
 * @displayName DropdownControl (Web)
 * @public
 */
class DropdownControl extends Component {
    render() {
        const props = this.props;
        switch (props.type) {
            case 'select':
            case 'multiselect':
                return <DropdownSelect { ...props
                }
                />;
            case 'tripledot':
                return <DropdownSelect { ...props
                } > < TripleDot / > < /DropdownSelect>;
            case 'custom':
                return <DropdownSelect { ...props
                } > {
                    props.content
                } < /DropdownSelect>;
            case 'button':
            default:
                return <DropdownButton { ...props
                }
                />;
        }
    }
}

/**
 * Do not split the button by default.
 *
 * @enum {Object} defaultProps
 * @public
 */
DropdownControl.defaultProps = {
    type: 'button',
    split: false
};

/**
 * Type and split properties of the control.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownControl.propTypes = {
    /** Namespace Consumer props */
    ...NamespaceShape,
    /** Type of dropdown control */
    type: PropTypes.string,
    /** Boolean whether the dropdown button is split */
    split: PropTypes.bool,
    /** Boolean whether the dropdown button is disabled */
    disabled: PropTypes.bool,
    /** Icon shown for toggling */
    toggleIcon: PropTypes.oneOf(['clock', 'dropdown']),
    /** Boolean whether the placeholder text is provided */
    hasPlaceholder: PropTypes.bool
};

export default withNamespace(DropdownControl);



// WEBPACK FOOTER //
// ./node_modules/@ux/dropdown/dropdown-control.js