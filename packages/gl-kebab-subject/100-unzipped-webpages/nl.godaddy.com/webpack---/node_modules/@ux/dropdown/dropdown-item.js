import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import React, {
    Component
} from 'react';
import PropTypes from 'prop-types';
import rip from 'rip-out';
import shallowEqual from 'shallowequal';

/**
 * Create input checkbox element, which is used for the multiselect.
 *
 * @class CheckboxItem
 * @displayName CheckboxItem (Web)
 * @public
 */
class CheckboxItem extends Component {
    render() {
        const props = this.props;
        return ( <
            label className = {
                props.className
            }
            onChange = {
                props.onChange
            }
            ref = {
                r => {
                    this.componentRef = r;
                }
            } >
            <
            input onChange = {
                function() {}
            }
            role = 'menuitemcheckbox'
            type = 'checkbox'
            tabIndex = '-1'
            name = {
                props.name
            }
            value = {
                props.value
            }
            checked = {
                props.isSelected
            }
            aria - checked = {
                props.isSelected
            }
            /> { props.children } <
            /label>
        );
    }
}

/**
 * PropType validation for CheckboxItem.
 *
 * @enum {Object} propTypes
 * @public
 */
CheckboxItem.propTypes = {
    /** Boolean for whether dropdown item is selected */
    isSelected: PropTypes.bool,
    /** Name of the checkbox control */
    name: PropTypes.string,
    /** Value of the checkbox control */
    value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number
    ]),
    /** onChange event handler */
    onChange: PropTypes.func,
    /** Index for the dropdown item */
    itemIndex: PropTypes.number,
    /** CSS ClassName to apply */
    className: PropTypes.string,
    /** Child elements */
    children: PropTypes.node
};

/**
 * Create an item, which receive a checkbox element if the type is multiselect.
 *
 * @class DropdownItem
 * @displayName DropdownItem (Web)
 * @public
 */
class DropdownItem extends NamespaceConsumer {
    /**
     * Get reference to the dropdown item (either DropdownItem or CheckboxItem)
     * @returns {Object} Dropdown Item reference
     */
    getRef() {
        if (this.componentRef instanceof CheckboxItem) {
            return this.componentRef.componentRef;
        }
        return this.componentRef;
    }

    shouldComponentUpdate(nextProps) {
        return !shallowEqual(this.props, nextProps);
    }

    render() {
        const props = this.props;
        const {
            isSelected,
            type,
            disabled,
            ...other
        } = props;
        const className = this.classNames(
            other.className,
            this.namespace(
                this.classNames('dropdown-item', {
                    active: props.active,
                    disabled
                })
            )
        );

        if (type === 'multiselect') {
            return <CheckboxItem { ...props
            }
            isSelected = {
                isSelected
            }
            ref = {
                r => {
                    this.componentRef = r;
                }
            }
            className = {
                className
            }
            />;
        }

        const itemProps = rip(other, 'active', 'namespace', 'isSelected');

        return React.createElement(itemProps.href ? 'a' : 'span', {
            ...itemProps,
            disabled,
            className,
            'ref': r => {
                this.componentRef = r;
            },
            /* eslint-disable-line quote-props */
            'role': 'menuitem',
            'aria-disabled': disabled
        });
    }
}

/**
 * PropType validation for DropdownItem.
 *
 * @enum {Object} propTypes
 * @public
 */
DropdownItem.propTypes = {
    /** Namespace Consumer props */
    ...NamespaceShape,
    /** Boolean for whether dropdown item is disabled */
    disabled: PropTypes.bool,
    /** Boolean for whether dropdown item is active */
    active: PropTypes.bool,
    /** Type of dropdown item */
    type: PropTypes.string,
    /** Url for dropdown item when clicked */
    href: PropTypes.string,
    /** Boolean for whether dropdown item is selected */
    isSelected: PropTypes.bool
};

export default withNamespace(DropdownItem);



// WEBPACK FOOTER //
// ./node_modules/@ux/dropdown/dropdown-item.js