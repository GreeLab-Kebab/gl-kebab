import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import React from 'react';
import PropTypes from 'prop-types';
import DropdownDivider from './dropdown-divider';
import DropdownHeader from './dropdown-header';
import selectableItem from './selectable-item';

const alignLeft = 'dropdown-menu-left';
const alignRight = 'dropdown-menu-right';
export const alignmentTypes = {
    left: 'left',
    right: 'right',
    preferLeft: 'preferLeft',
    preferRight: 'preferRight'
};

export const autoAlignments = {
    [alignmentTypes.preferLeft]: true,
    [alignmentTypes.preferRight]: true
};
const defaultAlignmentClassName = {
    [alignmentTypes.left]: alignLeft,
    [alignmentTypes.right]: alignRight,
    [alignmentTypes.preferLeft]: alignLeft,
    [alignmentTypes.preferRight]: alignRight
};

const alignmentValues = Object.keys(alignmentTypes).map(key => alignmentTypes[key]);
export const menuAlignmentPropType = PropTypes.oneOf(alignmentValues);

/**
 * DropdownMenu renders a wrapping div to handle menu alignment (left or right)
 * and wires up all children by cloning them with additional properties.
 *
 * @class DropdownMenu
 * @displayName DropdownMenu (Web)
 * @private
 */
class DropdownMenu extends NamespaceConsumer {
    constructor() {
        super(...arguments);
        this.onKeyDown = this.onKeyDown.bind(this);
    }

    /**
     * Return DropdownItems of the menu. Dividers and Headers will be ignored. If the
     * dropdown is of type (multi)selected the DropdownItem will be enhanced with
     * additional properties and event handlers.
     *
     * @returns {Array} React elements.
     * @private
     */
    children() {
        const props = this.props;
        let items = 0;
        return React.Children.map(props.children, (item) => {
            return item.type !== DropdownDivider && item.type !== DropdownHeader ?
                selectableItem(this, item, items++) :
                item;
        });
    }

    onKeyDown(e) {
        if (e.key && (e.key === 'Escape' || e.key === 'Esc' || e.key === 'Enter' || e.key === 'Return')) {
            this.props.toggle();
        }
    }

    /**
     * Render Dropdown menu.
     *
     * @returns {ReactElement} div element with DropdownItems.
     * @private
     */
    render() {
        const {
            menuAlignment = alignmentTypes.left,
                alignmentOverride, enableFullscreen,
                ...props
        } = this.props;
        const alignMenuClass = defaultAlignmentClassName[alignmentOverride] || defaultAlignmentClassName[menuAlignment] || alignLeft;
        const autoAlign = autoAlignments[menuAlignment] ? 'dropdown-menu-autoalign' : null;
        const mobileFullscreen = enableFullscreen ? 'full-screen' : null;

        return ( <
            div className = {
                this.namespace('dropdown-menu', alignMenuClass, autoAlign, mobileFullscreen)
            }
            ref = {
                r => this.wrapper = r
            }
            role = 'menu' >
            <
            div className = {
                this.namespace('dropdown-overlay')
            }
            onClick = {
                props.toggle
            }
            onKeyDown = {
                props.toggle
            }
            role = 'button'
            tabIndex = {-1
            }
            /> <
            div className = {
                this.namespace('dropdown-menu-background')
            } >
            <
            button type = 'button'
            className = {
                this.namespace('close')
            }
            onClick = {
                props.toggle
            }
            aria - label = 'Close' > < /button> <
            div className = 'dropdown-list' > {
                this.children()
            } <
            /div> <
            /div> <
            /div>
        );
    }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */
DropdownMenu.propTypes = {
    /** Namespace Consumer props */
    ...NamespaceShape,
    /** Force alignment of dropdown menu */
    alignmentOverride: PropTypes.oneOf([alignmentTypes.left, alignmentTypes.right]),
    /** Specify alignment of dropdown menu (when possible) */
    menuAlignment: menuAlignmentPropType,
    /** Boolean whether the dropdown menu is full screen for mobile devices */
    enableFullscreen: PropTypes.bool,
    /** onChange event handler */
    onChange: PropTypes.func,
    /** onKeyDown event handler */
    onKeyDown: PropTypes.func,
    /** Array of selected dropdown item indexes */
    selected: PropTypes.array,
    /** Function that toggles the menu open and closed */
    toggle: PropTypes.func,
    /** Type of dropdown items in the menu */
    type: PropTypes.string
};

/**
 * Default props for DropdownMenu.
 *
 * @enum {Object} defaultProps
 * @public
 */
DropdownMenu.defaultProps = {
    menuAlignment: alignmentTypes.left,
    toggle: () => {},
    selected: [],
    type: 'button'
};

export default withNamespace(DropdownMenu);



// WEBPACK FOOTER //
// ./node_modules/@ux/dropdown/dropdown-menu.js