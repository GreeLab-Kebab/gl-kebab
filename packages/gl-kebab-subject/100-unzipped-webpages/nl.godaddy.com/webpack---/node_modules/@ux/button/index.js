import {
    NamespaceConsumer,
    withNamespace,
    NamespaceShape
} from '@ux/namespace-component';
import PropTypes from 'prop-types';
import React from 'react';
import rip from 'rip-out';

//
// Valid HTML Button types.
//
const buttonTypes = ['button', 'reset', 'submit'];
/**
 * Display a button from a set of predefined types.
 *
 * @displayName Button (Web)
 * @class Button
 * @public
 */
export class Button extends NamespaceConsumer {
    componentDidMount() {
        const {
            design
        } = this.props;
        if (process.env.NODE_ENV !== 'production' && (design === 'canvas' || design === 'purchase')) {
            const replacement = design === 'canvas' ? `"default" or "defaultLight"` : `"brand"`;
            console.warn(`<Button design="${design}"> is deprecated and will be removed ` +
                `in the next major version of '@ux/button'. Please use ${replacement} instead.`);
        }
    }

    /**
     * Get the right type for the button from a passed in type.
     * @param {string} props - Props of the button
     * @returns {string} Element type for the button
     * @public
     */
    static getElementType(props) {
        return props.href ? 'a' : 'button';
    }

    /**
     * Get the right type for the button from a passed in type.
     *
     * @param {String} type - Type of button
     * @param {String} elementType - Returns <button>, <a>, or null
     * @returns {String} Classname for the button
     * @public
     */
    static getType(type, elementType) {
        if (elementType === 'a') {
            return null;
        }
        type = type.toLowerCase();

        return ~buttonTypes.indexOf(type) ? type : buttonTypes[0];
    }

    /**
     * Get the right classes for the button from a type. If we use a unknown type.
     * since by default it will use 'button' styling, it means don't use any styling.
     *
     * @param {String} design - Type of button
     * @returns {String} Classnames for the button
     * @public
     */
    static getDesign(design) {
        const buttonDesign = Button.designs[design] || '';
        return ['btn'].concat(buttonDesign.split(' ')).filter(Boolean);
    }

    /**
     * Render the button element with predefined classes and restricted designs.
     *
     * @returns {ReactElement} Button element.
     * @private
     */
    render() {
        let props = this.props;
        const {
            size,
            design,
            ariaLabel,
            tabIndex
        } = props;

        const elementType = Button.getElementType(props);
        const type = Button.getType(props.type, elementType);
        const ariaLabelText = ariaLabel;
        const id = this.namespace(props.id);
        const className = this.classNames(
            this.namespace(
                this.classNames(...Button.getDesign(design), {
                    'btn-lg': size === 'large'
                }, {
                    'btn-sm': size === 'small'
                }, {
                    'btn-pill': size === 'pill'
                }, {
                    'btn-square': !!props.square || (size === 'square')
                }, {
                    disabled: !!props.disabled
                })),
            props.className
        );

        //
        // Remove all unwanted props from props.
        //
        props = rip(props, 'id', 'type', 'className', 'design', 'namespace', 'onPress', 'square', 'ariaLabel', 'size');

        return React.createElement(elementType, {
            ...props,
            className,
            id,
            type,
            'tabIndex': props.disabled ? -1 : tabIndex,
            'aria-label': ariaLabelText
        }, props.children);
    }
}

const designs = {
    addon: 'btn-addon',
    base: '',
    button: 'btn-primary',
    canvas: 'btn-canvas',
    content: 'btn-primary btn-tertiary',
    contentPurchase: 'btn-purchase btn-tertiary',
    contentLight: 'btn-default-light-secondary btn-tertiary',
    danger: 'btn-danger',
    default: 'btn-default',
    defaultDark: 'btn-default-dark',
    defaultLight: 'btn-default-light',
    defaultLightSecondary: 'btn-default-light-secondary',
    defaultPrimary: 'btn-default-primary',
    defaultPurchase: 'btn-default-purchase',
    defaultBrand: 'btn-default-purchase', // TODO: we ned to define a `btn-default-brand` so that we can fully remove purchase
    defaultInfo: 'btn-default-info',
    defaultWarning: 'btn-default-warning',
    defaultDanger: 'btn-default-danger',
    defaultSuccess: 'btn-default-success',
    defaultFeature: 'btn-default-feature',
    info: 'btn-info',
    link: 'btn-link',
    primary: 'btn-primary',
    purchase: 'btn-purchase',
    brand: 'btn-purchase', // TODO: we ned to define a `btn-brand` so that we can fully remove purchase
    submit: 'btn-primary',
    success: 'btn-success',
    tertiary: 'btn-tertiary',
    tertiaryInline: 'btn-tertiary-inline',
    warning: 'btn-warning',
    feature: 'btn-feature',
    toggle: 'btn-content btn-toggle'
};

/**
 * List of button classNames used to render each button.
 *
 * @enum {Object} classNames
 */
Button.designs = designs;

Button.defaultProps = {
    type: 'button',
    design: 'button',
    tabIndex: 0
};

Button.propTypes = {
    ...NamespaceShape,

    /** Contents of a Button */
    children: PropTypes.node,
    /** Sets the disabled state of a button */
    disabled: PropTypes.bool,
    /** Classes applied to a button */
    className: PropTypes.string,
    /** Applies square styles to a button */
    square: PropTypes.bool,
    /** Button type */
    type: PropTypes.string,
    /** Apples a design style to a button */
    design: PropTypes.oneOf(Object.keys(designs)),
    /** Applies size styles to a button */
    size: PropTypes.string,
    /** Click handler for a button */
    onClick: PropTypes.func,
    /** Press handler for a button */
    onPress: PropTypes.func,
    /** Index for tab order */
    tabIndex: PropTypes.number,
    /** Uri for where a button links to, which turns a button into an <a> tag */
    href: PropTypes.string,
    /** Label for a11y support */
    ariaLabel: PropTypes.string
};

export default withNamespace(Button);



// WEBPACK FOOTER //
// ./node_modules/@ux/button/index.js