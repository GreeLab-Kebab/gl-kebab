import Spinner from '@ux/spinner';
import Overlay from './overlay';
import React from 'react';

/**
 * MessageOverlay Component.
 *
 * @displayName Message Overlay (Web)
 * @class MessageOverlay
 * @public
 */
export default class MessageOverlay extends Overlay {
    constructor() {
        super(...arguments);

        this.updateDimensions = this.updateDimensions.bind(this);
    }

    /**
     * The component did mount in the parent container. Store the initial
     * minHeight styling of the parent.
     *
     * @private
     */
    componentDidMount() {
        this.parentMinHeight = getComputedStyle(this.overlay).getPropertyValue('min-height');

        this.on('resize', this.updateDimensions);
        this.updateDimensions();
    }

    /**
     * Remove event listeners and restore the initial minHeight of the parent.
     *
     * @private
     */
    componentWillUnmount() {
        this.overlay.style.minHeight = this.parentMinHeight;

        this.off('resize', this.updateDimensions);
    }

    /**
     * When the window resizes we need to make sure we can still see everything
     * Note: 12 pixels margin around the message container minimum
     *
     * @private
     */
    updateDimensions() {
        if (!this.props.show) return;

        this.setState({
            minHeight: this.message.getBoundingClientRect().height
        });
    }

    /**
     * When the overlay is clicked, do not let the event bubble
     *
     * @param {SyntheticEvent} event - React event wrapper for the user event
     * @private
     */
    onClickOverlay(event) {
        event.preventDefault();
        event.stopPropagation();
    }

    /**
     * Render the message overlay.
     *
     * @returns {ReactElement} the entire message overlay if props.show
     * @public
     */
    renderMessage() {
        const props = this.props;

        if (!props.show) return;

        return ( <
            div className = 'ux-overlay'
            onClick = {
                this.onClickOverlay
            } >
            <
            div ref = {
                message => {
                    this.message = message;
                }
            }
            className = 'ux-message' > {
                props.progress && < Spinner className = 'ux-message-spinner'
                size = 'sm' / >
            } {
                props.message
            } <
            /div> <
            /div>
        );
    }

    /**
     * Render the react element for the message overlay
     *
     * @returns {ReactElement} the entire component
     * @public
     */
    render() {
        const {
            children,
            show,
            wrapperStyle
        } = this.props;
        const style = {
            minHeight: show ? this.state.minHeight : this.parentMinHeight,
            ...wrapperStyle
        };

        return ( <
            div style = {
                style
            }
            className = 'ux-overlay-wrapper'
            ref = {
                el => {
                    this.overlay = el;
                }
            } > {
                children
            } {
                this.renderMessage()
            } <
            /div>
        );
    }
}



// WEBPACK FOOTER //
// ./node_modules/@ux/message-overlay/index.js