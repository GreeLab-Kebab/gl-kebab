import PropTypes from 'prop-types';
import React from 'react';
import Base from './base';

/**
 * UXCore based Stars. Stars will always start with
 * an initial state given by the `rating` and `count` props, isHovering and hovered index(default is 0)
 *
 * @constructor
 */
export default class Stars extends Base {
    constructor(props) {
        super(props);

        this.onInputKeyDown = this.onInputKeyDown.bind(this);

        this.state = {
            ...this.state,
            isHovering: false,
            hovered: props.rating
        };
    }

    /**
     * Gets className based on index for either hovering or rating star.
     *
     * @param {number} index of Star to retrieve className for.
     * @returns {string} 'checked' or 'unchecked' class name.
     * @private
     */
    _getClassName(index) {
        const {
            isHovering,
            hovered,
            rating
        } = this.state;
        const value = isHovering ? hovered : rating;
        return index <= value ? 'checked' : 'unchecked';
    }

    /**
     * Sets state with isHovering and hovered index.
     *
     * @param {Event} evt Mouse Event.
     * @param {Number} i Selected index.
     * @private
     */
    handleMouseOver(evt, i) {
        this.setState({
            isHovering: true,
            hovered: i
        });
    }

    /**
     * Sets state with isHovering(false) and hovered index.
     *
     * @private
     */
    handleMouseOut() {
        this.setState({
            isHovering: false,
            hovered: 0
        });
    }

    /**
     * Handles the keyboard events to increment or decrement this instance.
     * @param  {Event} event Keyboard input event from the browser.
     */
    onInputKeyDown(event) {
        const {
            count,
            hovered
        } = this.state;
        const key = event.key;
        const safelistKeys = [
            '+',
            '-',
            'ArrowUp',
            'ArrowLeft',
            'ArrowRight',
            'ArrowDown',
            'Enter'
        ];

        event.preventDefault();

        if (~safelistKeys.indexOf(key)) {
            event.stopPropagation();

            if (key !== 'Enter') {
                const isIncrementing = (key === 'ArrowUp' || key === 'ArrowRight' || key === '+');
                const incrementedHoverIndex = isIncrementing ? hovered + 1 : hovered - 1;

                if ((incrementedHoverIndex >= 0) && (incrementedHoverIndex <= count)) {
                    this.setState({
                        hovered: incrementedHoverIndex
                    });
                }

            } else {
                this.setState({
                    rating: hovered
                });
            }
        }
    }

    /**
     * Returns an array of stars (with classNames) based on rating index or hovered index.
     *
     * @returns {Array} Rendered stars.
     * @private
     */
    renderStars() {
        const stars = [];

        for (let i = 1; i <= this.state.count; i++) {
            const starIndexString = (i + this.props.startTabIndex).toString();

            stars.push( <
                span role = 'button'
                key = {
                    i
                }
                onKeyDown = {
                    this.onInputKeyDown
                }
                tabIndex = {
                    starIndexString
                }
                onClick = {
                    this.generateOnClick(this.props.onRatingClick, i)
                }
                className = {
                    this._getClassName(i)
                }
                onMouseEnter = {
                    evt => {
                        this.handleMouseOver(evt, i);
                    }
                }
                onMouseLeave = {
                    evt => {
                        this.handleMouseOut(evt, i);
                    }
                } >
                <
                /span>
            );
        }

        return stars;
    }

    /**
     * Render the Stars Component.
     *
     * @returns {ReactElement} Stars element.
     * @private
     */
    render() {
        const {
            rating,
            count
        } = this.state;

        return ( <
            div className = {
                'ux-stars'
            }
            role = 'slider'
            tabIndex = '0'
            aria - valuenow = {
                rating
            }
            aria - valuemin = {
                this.props.rating
            }
            aria - valuemax = {
                count
            }
            aria - valuetext = {
                `${ rating } out of ${ count } stars`
            } >
            <
            p className = {
                'font-primary-bold'
            } > {
                this.props.title
            } <
            /p> <
            span className = {
                'ux-stars-rating'
            } > {
                this.renderStars()
            } <
            /span> <
            span className = {
                'ux-stars-numbers font-primary-bold'
            } > {
                this.renderText()
            } <
            /span> <
            /div>
        );
    }
}

Stars.propTypes = {
    ...Base.propTypes,
    /** Function to be called when a star is clicked. Callback gets the number of the clicked star on passed in.*/
    onRatingClick: PropTypes.func.isRequired,
    /** Title of the star rating */
    title: PropTypes.string,
    /** Tab index of the first star (used to generate tabIndexes for the rest of the stars) */
    startTabIndex: PropTypes.number,
    /** Tab index for whole React Element*/
    tabIndex: PropTypes.number
};

Stars.defaultProps = {
    ...Base.defaultProps,
    title: '',
    tabIndex: 0,
    startTabIndex: 0
};



// WEBPACK FOOTER //
// ./node_modules/@ux/stars/index.js