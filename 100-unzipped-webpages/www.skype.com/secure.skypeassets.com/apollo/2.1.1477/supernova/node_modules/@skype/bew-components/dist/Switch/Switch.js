"use strict";

var __extends = this && this.__extends || function() {
    var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
            __proto__: []
        }
        instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b) {
                if (b.hasOwnProperty(p)) d[p] = b[p];
            }
        };

        return _extendStatics(d, b);
    };

    return function(d, b) {
        _extendStatics(d, b);

        function __() {
            this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();

Object.defineProperty(exports, "__esModule", {
    value: true
});

var classNames = require("classnames/bind");

var React = require("react");

var styles = require("./Switch.css");

var cx = classNames.bind(styles);

var Switch =
    /** @class */
    function(_super) {
        __extends(Switch, _super);

        function Switch() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.handleKeyPress = function(e) {
                // it should react only to space key: https://webaim.org/techniques/keyboard/
                if (e.key === ' ') {
                    e.preventDefault();

                    if (_this.props.onChange) {
                        _this.props.onChange(e);
                    }
                }
            };

            return _this;
        }

        Switch.prototype.render = function() {
            return React.createElement("label", {
                id: this.props.id,
                className: cx('switch'),
                "aria-label": this.props.ariaLabel,
                "aria-describedby": this.props.ariaDescribedBy,
                role: 'switch',
                "aria-checked": this.props.isOn,
                tabIndex: this.props.disabled ? undefined : 0,
                onKeyPress: this.handleKeyPress
            }, React.createElement("input", {
                type: 'checkbox',
                checked: this.props.isOn,
                disabled: this.props.disabled,
                onChange: this.props.onChange
            }), React.createElement("div", {
                className: cx('slider')
            }));
        };

        return Switch;
    }(React.Component);

exports.Switch = Switch;
Switch['defaultProps'] = {
    disabled: false
};