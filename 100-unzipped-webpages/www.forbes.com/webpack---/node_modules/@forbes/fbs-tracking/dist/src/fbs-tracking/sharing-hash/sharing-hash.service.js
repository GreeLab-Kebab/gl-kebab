var SharingHashService = /** @class */ (function() {
    function SharingHashService() {
        this.hash = '';
    }
    /**
     * Get the parent half of the current hash.
     * @returns {string} The parent half of the hash, or the empty string if the page started without a hash.
     */
    SharingHashService.prototype.getParentHash = function() {
        return this.hash.slice(0, 12) !== '2715e4857a0b' ? this.hash.slice(0, 12) : '';
    };
    SharingHashService.prototype.getChildHash = function() {
        return this.hash.slice(12);
    };
    SharingHashService.prototype.getHash = function() {
        return this.hash;
    };
    SharingHashService.prototype.setHash = function() {
        var hash = this.harvestSharingHashTree(location.hash.slice(1));
        history.replaceState(history.state || null, '', "" + location.pathname + location.search + "#" + hash.slice(12));
    };
    /**
     * Extracts sharing hash tree data from current hash in url
     * @param hash The url hash, without the leading '#' character
     **/
    SharingHashService.prototype.harvestSharingHashTree = function(hash) {
        var newHash;
        // Hash can be 12 or 24 characters depending on when it was generated - urls were shortened to only show 12 characters on 1/21/16 build.
        // Fastpixel call still sends full 24 character data.
        if (hash && (hash.length === 12 || hash.length === 24)) {
            hash = hash.slice(hash.length - 12);
        } else {
            var parentHash = this.hash31('WhereDidYouComeFromWhereDidYouGo').toString(16),
                childHash = this.hash31('SomethingSomethingCottonEyedJoe').toString(16);
            hash = ("" + parentHash + childHash).slice(0, 12);
        }
        newHash = (((Math.floor(Math.random() * 4096) << 20) | (+new Date() & 0xFFFFF)) & 0x7FFFFFFF).toString(16);
        newHash += this.pad(this.hash31(location.protocol + "//" + location.host + location.pathname).toString(16), 4, '0');
        newHash += this.pad(newHash, 4, '0');
        newHash = this.pad(newHash, 12, '0').slice(0, 12);
        this.hash = hash += newHash;
        return hash;
    };
    /**
     * Generates 31 bit hash from a given string
     **/
    SharingHashService.prototype.hash31 = function(input) {
        var hash = 2147483647,
            pointer = input.length;
        while (pointer--) {
            hash = ((hash << 5) - hash + input.charCodeAt(pointer)) & 0x7FFFFFFF;
        }
        return hash;
    };
    /**
     * Pad string to certain length
     * E.G. pad('3', 5, '0') creates '00003'
     *      pad('3', 5, '0', true) creates '30000'
     *      pad('5', 3, '-') creates '--5'
     *      pad('5', 1, '-', true) creates '5'
     */
    SharingHashService.prototype.pad = function(input, limit, padStr, direction) {
        input = '' + input;
        while (input.length < limit) {
            input = (direction) ? input + padStr : padStr + input;
        }
        return input;
    };
    return SharingHashService;
}());
export {
    SharingHashService
};
//# sourceMappingURL=sharing-hash.service.js.map


//////////////////
// WEBPACK FOOTER
// ./node_modules/@forbes/fbs-tracking/dist/src/fbs-tracking/sharing-hash/sharing-hash.service.js
// module id = 268
// module chunks = 16