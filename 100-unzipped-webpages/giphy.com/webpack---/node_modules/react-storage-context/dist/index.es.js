import React, {
    PureComponent,
    createContext
} from 'react';

var classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
};

var createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }

    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();







var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
};



var inherits = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var StorageContext = createContext({
    session: {},
    local: {},
    saveLocal: function saveLocal() {},
    saveSession: function saveSession() {}
});

var Consumer = StorageContext.Consumer;

/**
 * HoC providing the storage context values as props
 */
var withStorageContext = function withStorageContext(WrappedComponent) {
    return function(props) {
        return React.createElement(
            StorageContext.Consumer,
            null,
            function(context) {
                return React.createElement(WrappedComponent, _extends({}, props, context));
            }
        );
    };
};

var parse = function parse() {
    var storage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return JSON.parse(storage) || {};
};
var retrieve = function retrieve(id, isSession) {
    try {
        return parse(isSession ? sessionStorage.getItem(id) : localStorage.getItem(id));
    } catch (error) {
        console.error('Error getting ' + (isSession ? 'session' : 'local') + ' storage for ' + id);
    }
    return {};
};
var save = function save(id, state, isSession) {
    try {
        var stringy = JSON.stringify(state);
        isSession ? sessionStorage.setItem(id, stringy) : localStorage.setItem(id, stringy);
    } catch (error) {
        console.error('Error setting ' + (isSession ? 'session' : 'local') + ' storage for ' + id);
    }
};

var StorageWrapper = function StorageWrapper(id) {
    return function(WrappedComponent) {
        return function(_PureComponent) {
            inherits(StorageManager, _PureComponent);

            function StorageManager() {
                var _ref;

                var _temp, _this, _ret;

                classCallCheck(this, StorageManager);

                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StorageManager.__proto__ || Object.getPrototypeOf(StorageManager)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                    session: {}, // session storage goes here
                    local: {} // local storage goes here
                }, _this.saveLocal = function(newState) {
                    var local = _this.state.local;

                    var allLocal = _extends({}, local, newState);
                    _this.setState({
                        local: allLocal
                    });
                    save(id, allLocal);
                }, _this.saveSession = function(newState) {
                    var session = _this.state.session;

                    var allSession = _extends({}, session, newState);
                    _this.setState({
                        session: allSession,
                        isSession: true
                    });
                    save(id, allSession, true);
                }, _temp), possibleConstructorReturn(_this, _ret);
            }

            createClass(StorageManager, [{
                key: 'componentWillMount',
                value: function componentWillMount() {
                    if (!id) {
                        console.error('id must be specified for StorageContext');
                    }
                    this.setState({
                        local: retrieve(id),
                        session: retrieve(id, true)
                    });
                }
            }, {
                key: 'render',
                value: function render() {
                    var _state = this.state,
                        session = _state.session,
                        local = _state.local;

                    return React.createElement(
                        StorageContext.Provider, {
                            value: {
                                session: session,
                                local: local,
                                saveLocal: this.saveLocal,
                                saveSession: this.saveSession
                            }
                        },
                        React.createElement(WrappedComponent, this.props)
                    );
                }
            }]);
            return StorageManager;
        }(PureComponent);
    };
};

export {
    Consumer,
    withStorageContext
};
export default StorageWrapper;