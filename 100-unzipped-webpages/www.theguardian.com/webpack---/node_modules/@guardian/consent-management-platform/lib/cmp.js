"use strict";
var __assign = (this && this.__assign) || function() {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var Cookies = require("js-cookie");
var consent_string_1 = require("consent-string");
var config_1 = require("./config");
var cookies_1 = require("./cookies");
var cmpIsReady = false;
var buildGuPurposeRegister = function() {
    var purposes = config_1.GU_PURPOSE_LIST.purposes;
    var purposeRegister = purposes.reduce(function(register, purpose) {
        var _a;
        if (purpose.alwaysEnabled) {
            return register;
        }
        return __assign({}, register, (_a = {}, _a[purpose.eventId] = {
            state: null,
            callbacks: [],
        }, _a));
    }, {});
    return purposeRegister;
};
var guPurposeRegister = buildGuPurposeRegister();
var iabPurposeRegister = {
    state: {
        1: null,
        2: null,
        3: null,
        4: null,
        5: null,
    },
    callbacks: [],
};
var triggerConsentNotification = function() {
    // Iterate over guPurposeRegister callbacks
    Object.keys(guPurposeRegister).forEach(function(key) {
        var guPurpose = guPurposeRegister[key];
        guPurpose.callbacks.forEach(function(callback) {
            return callback(guPurpose.state);
        });
    });
    // Iterate over iabPurposeRegister callbacks
    iabPurposeRegister.callbacks.forEach(function(callback) {
        callback(iabPurposeRegister.state);
    });
};
var getIabStateFromCookie = function() {
    var cookie = cookies_1.readIabCookie();
    if (!cookie) {
        return null;
    }
    var iabState = __assign({}, iabPurposeRegister.state);
    var iabData = new consent_string_1.ConsentString(cookie);
    Object.keys(iabState).forEach(function(key) {
        var purposeId = parseInt(key, 10);
        iabState[purposeId] = iabData.isPurposeAllowed(purposeId);
    });
    return iabState;
};
var getGuTkStateFromCookie = function() {
    var cookie = Cookies.get(config_1.GU_AD_CONSENT_COOKIE);
    var iabState = __assign({}, iabPurposeRegister.state);
    var adConsentState = null;
    if (cookie) {
        var cookieParsed = cookie.split('.')[0];
        if (cookieParsed === '1') {
            adConsentState = true;
        }
        if (cookieParsed === '0') {
            adConsentState = false;
        }
    }
    Object.keys(iabState).forEach(function(key) {
        iabState[parseInt(key, 10)] = adConsentState;
    });
    return iabState;
};
var setStateFromCookies = function() {
    /**
     * These state assignments are temporary
     * and will eventually be replaced by values
     * read from the CMP cookie.
     * */
    guPurposeRegister.functional.state = true;
    guPurposeRegister.performance.state = true;
    iabPurposeRegister.state =
        getIabStateFromCookie() || getGuTkStateFromCookie();
    triggerConsentNotification();
};
var checkCmpReady = function() {
    if (cmpIsReady) {
        return;
    }
    setStateFromCookies();
    cmpIsReady = true;
};
exports.updateStateOnSave = function(latestIabState) {
    iabPurposeRegister.state = latestIabState;
    triggerConsentNotification();
};
exports.onIabConsentNotification = function(callback) {
    checkCmpReady();
    callback(iabPurposeRegister.state);
    iabPurposeRegister.callbacks.push(callback);
};
exports.onGuConsentNotification = function(purposeName, callback) {
    checkCmpReady();
    var guPurpose = guPurposeRegister[purposeName];
    if (guPurpose) {
        callback(guPurpose.state);
        guPurpose.callbacks.push(callback);
    }
};
// Exposed for testing
exports._ = {
    updateStateOnSave: exports.updateStateOnSave,
    resetCmp: function() {
        cmpIsReady = false;
        // reset guPurposeRegister
        Object.keys(guPurposeRegister).forEach(function(key) {
            var guPurpose = guPurposeRegister[key];
            guPurpose.state = null;
            guPurpose.callbacks = [];
        });
        // reset iabPurposeRegister
        iabPurposeRegister.state = {
            1: null,
            2: null,
            3: null,
            4: null,
            5: null,
        };
        iabPurposeRegister.callbacks = [];
    },
};