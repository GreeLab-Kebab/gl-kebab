/**
 * Checks for screen orientation
 * @return {String} `portrait` or '`landscape`
 */
function getScreenOrientation(agent) {
    const userScreen = (agent && agent.screen) ? agent.screen : screen;
    const userWindow = (agent && agent.window) ? agent.window : window;
    if (userScreen.orientation && userScreen.orientation.type) {
        return userScreen.orientation.type.replace('-primary', '');
    } else if (typeof userWindow.orientation === 'number') {
        if (Math.abs(userWindow.orientation) === 90) {
            return 'landscape';
        } else {
            return 'portrait';
        }
    } else if (userWindow.matchMedia) {
        if (userWindow.matchMedia('(orientation: portrait)').matches) {
            return 'portrait';
        } else if (userWindow.matchMedia('(orientation: landscape)').matches) {
            return 'landscape';
        }
    }
    return 'landscape';
}

/**
 * Checks browser user agent to detect ipad device
 * @return {Boolean} `true` if ipad device detected, `false` otherwise
 */
function isIOSIPadAgent(agent) {
    const device = agent ? agent.toLowerCase() : navigator.userAgent.toLowerCase();

    if (device.match(/ipad/)) {
        return true;
    }

    return false;
}

/**
 * Checks browser user agent to detect iphone|ipod device
 * @return {Boolean} `true` if iphone|ipod device detected, `false` otherwise
 */
function isIOSMobileAgent(agent) {
    const device = agent ? agent.toLowerCase() : navigator.userAgent.toLowerCase();

    if (device.match(/iphone|ipod/)) {
        return true;
    }

    return false;
}

/**
 * Checks browser user agent to detect iOS device.
 * @return {Boolean} `true` if iOS device detected, `false` otherwise
 */
function isIOSAgent(agent) {

    if (isIOSIPadAgent(agent) || isIOSMobileAgent(agent)) {
        return true;
    }

    return false;
}

/**
 * Checks browser user agent to detect if safari user
 * @return {Boolean}
 */
function isSafariAgent(agent) {
    // Safari 3.0+ "[object HTMLElementConstructor]"
    return /constructor/i.test(window.HTMLElement) || ((p) => {
        return p.toString() === '[object SafariRemoteNotification]';
    })(agent || !window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification)); // eslint-disable-line no-undef
}

/**
 * Checks browser user agent to detect if user came from Google Search App
 * @return {Boolean} `true` if GSA detected, `false` otherwise
 */
function isGSAAgent(agent) {
    const device = agent ? agent.toLowerCase() : navigator.userAgent.toLowerCase();

    if (device.match(/gsa/)) {
        return true;
    }

    return false;
}

function isAndroidAgent(agent) {
    const device = agent ? agent.toLowerCase() : navigator.userAgent.toLowerCase();

    if (device.match(/android/)) {
        return true;
    }

    return false;
}

export {
    getScreenOrientation,
    isIOSIPadAgent,
    isIOSMobileAgent,
    isIOSAgent,
    isSafariAgent,
    isGSAAgent,
    isAndroidAgent
};