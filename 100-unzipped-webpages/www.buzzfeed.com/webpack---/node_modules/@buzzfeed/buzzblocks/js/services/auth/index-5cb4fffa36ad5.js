/* global BZFD */

import cookies from '../cookies';
import ajax from '../ajax';

const infoKey = () => BZFD.Config.bfwInfoCookie;

// This is an incomplete implementation of verifiying permission key against ACL
// @FIXME ACL _should not_ be hardcoded
// @see https://github.com/buzzfeed/buzzfeed/blob/master/static/js/public/acl.js#L246-L274
const ACL = {
    'general_admin': [4, 0],
    'bento_suggest_all': [116, 1],
    'bento_suggest_edition': [115, 2],
    'bento_user': [115, 3],
    'freelance_contributors': [129, 1],
};

export default {
    isLoggedIn() {
        return !!cookies.get(infoKey());
    },

    signout() {
        return ajax.post('/buzzfeed/_admin_user', {
                data: {
                    action: 'logout'
                },
                // WebApp's auth controller requires x-requested-with header
                params: {
                    headers: {
                        'x-requested-with': 'XMLHttpRequest',
                        'content-type': 'application/x-www-form-urlencoded'
                    }
                }
            })
            .then(() => {
                cookies.remove(infoKey());
            });
    },

    /**
     * Retrieves user's information.
     * @returns {object}
     */
    getUserInfo() {
        const rawCookie = decodeURIComponent(cookies.get(infoKey(), {}));

        const infoObj = {};

        var attribs = rawCookie.split('&');

        // handle special case of image with crop data
        var imageIdx = attribs.findIndex(function(v) {
            return v.match('^image=');
        });
        if (imageIdx !== -1 && attribs[imageIdx + 1] && attribs[imageIdx + 1].match('^crop=')) {
            var cropData = attribs.splice(imageIdx + 1, 1);
            attribs[imageIdx] += '&' + cropData;
        }

        attribs.forEach(chunk => {
            const items = chunk.split('=');
            const key = items.shift();
            const value = items.join('=');
            infoObj[key] = decodeURIComponent(value);
        });

        return infoObj;
    },

    /**
     * Check if current user is admin
     * @returns {boolean} - `true` if user has one of admin permissions, otherwise - `false`
     */

    isAdmin() {
        const userInfo = this.getUserInfo();
        return !!(
            userInfo.p_admin ||
            userInfo.p_editor_admin ||
            userInfo.p_developer_admin ||
            userInfo.p_partner_admin
        );
    },

    // This is an incomplete implementation of verifiying permission key against ACL
    // @FIXME ACL _should not_ be hardcoded
    // @see https://github.com/buzzfeed/buzzfeed/blob/master/static/js/public/acl.js#L246-L274
    // @returns {Boolean} - whether user has permission for a supplied ACL entry name
    userCan(aclName) {
        const permissionKey = this.getUserInfo()['permission_key'];
        if (!permissionKey) {
            return false;
        }

        const [nibble, bit] = ACL[aclName];
        const activeNibble = permissionKey.substr(permissionKey.length - (nibble + 1), 1);

        return (parseInt(activeNibble, 16) & (1 << bit)) > 0;
    }

};