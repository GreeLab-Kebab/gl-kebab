/* global BZFD */
/**
 * Taken from bpager service
 */

import dom from '../dom';
import util from '../util/standalone';
import templateEngine from '../template-engine';
import solid from '../solid/standalone';

const linkedSubbuzz = (function() {
    var subParam = util.getQueryParams().sub;
    return subParam ? parseInt(subParam.split('_')[1], 10) : null;
}());

/**
 * Helper to get the value of <meta> tag content by property attribute.
 * @param {String} propName - property attribute value.
 * @memberOf service:sharing
 * @return {String} - value of the <meta> content.
 */
function _getMetaTagValue(propName) {
    var metaContent;
    var retVal = '';
    var metaTag = dom.find(document.head, `meta[property="${propName}"]`);
    if (metaTag.length > 0) {
        metaContent = dom.getAttr(metaTag[0], 'content');
        if (metaContent) {
            retVal = metaContent;
        }
    }
    return retVal;
}


/**
 * Retrieve current page's query params.
 * @returns {Object}
 */
function _getQueryParams() {
    return (function(a) {
        if (a === '') {
            return {};
        }
        var b = {};
        for (var i = 0; i < a.length; ++i) {
            var p = a[i].split('=', 2);
            if (p.length === 1) {
                b[p[0]] = '';
            } else {
                b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, ' '));
            }
        }
        return b;
    })(window.location.search.substr(1).split('&'));
}

export default {
    /**
     * Gets the url for sharing.
     * @return {String} - base URL of the document.
     */
    getUrl() {
        let canonicalPath;
        if ('canonical_path' in BZFD.Context.page) {
            canonicalPath = BZFD.Context.page.canonical_path;
        } else if (BZFD.Context.buzz) {
            canonicalPath = BZFD.Context.buzz.canonical_path;
        }
        canonicalPath = canonicalPath || '';
        var url = location.origin + canonicalPath;
        var queryParams = _getQueryParams();
        if (queryParams['bfsource']) {
            var prefix = '?';
            if (url.includes('?')) {
                prefix = '&';
            }
            url = `${url}${prefix}bfsource=${queryParams['bfsource']}`;
        }
        return url;
    },
    /**
     * Gets the canonical url for fb comments and the likes.
     * @return {String} - canonical URL.
     */
    getCanonicalUrl() {
        var canonicalLink = document.querySelector('link[rel="canonical"]');
        return canonicalLink ? canonicalLink.href : this.getUrl();
    },
    /**
     * Gets post author.
     * @return {String} - post author.
     */
    getAuthor() {
        return _getMetaTagValue('author').replace(/,$/g, '');
    },
    /**
     * Gets title.
     * @return {String} - platform if available
     * @return {String} - title.
     */
    getTitle(platform) {
        var title = BZFD.Context.page.title || document.title;
        if (platform && BZFD.Context.page.promotions[platform]) {
            return BZFD.Context.page.promotions[platform].title || title;
        }
        return title;
    },
    /**
     * Gets page description.
     * @return {String} - platform if available
     * @return {String} - page description.
     */
    getDescription(platform) {
        var description = BZFD.Context.page.description;
        if (platform && BZFD.Context.page.promotions[platform]) {
            return BZFD.Context.page.promotions[platform].description || description;
        }
        return description;
    },
    /**
     * Gets post caption.
     * @return {String} - post caption
     */
    getCaption() {
        var caption = document.domain;
        var author = this.getAuthor();
        if (author) {
            caption += ` | By ${author}`;
        }
        return caption;
    },
    /**
     * Gets page default image.
     * @return {String} - platform image src if available
     * @return {String} - image src.
     */
    getPicture(platform) {
        var picture = BZFD.Context.page.picture;
        if (platform && BZFD.Context.page.promotions[platform]) {
            return BZFD.Context.page.promotions[platform].picture || picture;
        }
        return picture;
    },
    /**
     * Returns aggregated common share data
     * @returns {Object} object with all available common share data
     */
    getAll() {
        return {
            url: this.getUrl(),
            author: this.getAuthor(),
            title: this.getTitle(),
            description: this.getDescription(),
            caption: this.getCaption(),
            picture: this.getPicture(),
        };
    },
    /**
     * Render sharing message using default and additional sharing data
     * @param {String} message - sharing string with with mustache syntax
     * @param {Object} data - sharing data which will be merged with default one
     * @param {Object} [compilationOptions] - additional options for compilation step
     * (like `delimiters` etc)
     * @returns {String} rendered sharing message
     *
     */
    renderString(message, data, compilationOptions) {
        var extendedData = util.extend({}, this.getAll(), data || {});
        return templateEngine.renderString(message, extendedData, compilationOptions);
    },
    /**
     * Checks if the subbuzz id is presented in "?sub" URL parameter
     * @param {Number} id - subbuzz id to check.
     * @return {Boolean} - whether id is presented.
     */
    isLinkedSubbuzz(id) {
        return linkedSubbuzz !== null && linkedSubbuzz === id;
    },
    /**
     * Returns share data for a specific subbuzz element.
     * @param {HTMLElement} element - target subbuzz element.
     * @param {String} id - subbuzz id. Used to construct share url.
     * @return {{text: String, url: String, media: String}} - subbuzz share data.
     */
    getSubbuzzShareData(element, id) {
        let urlWithoutHash = util.removeHash(this.getUrl());
        // URL param updates the page og:image tag to the subbuzz image so it appears in off-site shares
        // see https://github.com/buzzfeed/mono/pull/23721
        const shareMetaUpdatedUrl = util.addQueryParam(urlWithoutHash, 'sub', '0_' + id) + '#' + id;
        const subbuzzTitle = dom.getText(element, '.js-subbuzz__title-text').trim();
        return {
            text: subbuzzTitle || this.getTitle().trim(),
            url: urlWithoutHash + '#' + id,
            shareMetaUpdatedUrl,
            fbUrl: shareMetaUpdatedUrl,
            media: this.getSubbuzzMedia(element) || this.getPicture(),
            subbuzzTitle
        };
    },
    /**
     * Returns share data for a specific quiz result.
     * @param {Integer} id - subbuzz id. Used to construct share url.
     * @param {Integer} resultId - quiz result id. Used to construct share url.
     * @return {Object} - {url: String, fbUrl: String} - subbuzz share data.
     */
    getQuizResultShareData(id, resultId) {
        let urlWithoutHash = util.removeHash(this.getUrl());
        // URL param updates the page og:image tag to the correct quiz result image so it appears in off-site shares
        // see https://github.com/buzzfeed/mono/pull/23721
        const shareMetaUpdatedUrl = util.addQueryParam(urlWithoutHash, 'quiz_result', id + '_' + resultId) + '#' + id;
        return {
            url: urlWithoutHash + '#' + id,
            shareMetaUpdatedUrl,
            fbUrl: shareMetaUpdatedUrl,
        };
    },

    /**
     * Finds media (image or gif) element in subbuzz and returns its source.
     * @param {HTMLElement} element - subbuzz element.
     * @return {String} - media element source.
     */
    getSubbuzzMedia(element) {
        var mediaEl = dom.findOne(element, '.js-progressive-image');
        if (!mediaEl) {
            return '';
        }

        var mediaSrc = dom.getAttr(mediaEl, 'data-src');
        var gifSrc = dom.getAttr(mediaEl, 'data-gif-src');
        // xs/sm breakpoint render mobile image, md/lg breakpoint render standard image
        if (solid.isAny(['xs', 'sm'])) {
            mediaSrc = dom.getAttr(mediaEl, 'data-mobile-src') || mediaSrc;
            gifSrc = dom.getAttr(mediaEl, 'data-mobile-gif-src') || gifSrc;
        }

        return gifSrc || mediaSrc;
    }
};