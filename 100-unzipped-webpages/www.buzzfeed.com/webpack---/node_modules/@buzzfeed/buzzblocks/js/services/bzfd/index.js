/*global BZFD*/
import {
    set,
    pick
} from 'lodash';
/**
 * Finds the closest parent that matches a selector.
 * @see https://github.com/ForbesLindesay/closest
 */
import closest from 'closest';

/**
 * Return buzzModule context of element, if available
 * @param {HTMLElement} element - element that may have context
 * @returns {Boolean} - `true` if the current page is a post page, `false` otherwise
 */
function getElementContext(element) {
    let context = null;
    try {
        const buzzModule = closest(element, '.js-buzz', true);
        if (buzzModule) {
            const moduleConfig = JSON.parse(buzzModule.querySelector('script').textContent);
            context = moduleConfig.context;
        }
    } catch (e) {
        // pass
    }
    return context;
}

const service = {
    /**
     * @returns {Boolean} - `true` if the current page is a post page, `false` otherwise
     */
    get isBPage() {
        try {
            return ('buzz' in BZFD.Context);
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current bpage includes hasQuiz, `false` otherwise
     */
    get hasQuiz() {
        try {
            return BZFD.Context.page.hasQuiz;
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current bpage is a listicle, `false` otherwise
     */
    get hasList() {
        try {
            return BZFD.Context.buzz.format.type.match(/list/);
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current page is a feedpager service, `false` otherwise
     */
    get isFeedPage() {
        // BZFD.Context.feedpager can be bool, not only if exists
        return !!window.FEEDPAGER || !!BZFD.Context.feedpager;
    },

    // alias isFeedPage to make less ambiguous
    get isFeedpager() {
        return service.isFeedPage;
    },

    /**
     * @returns {Boolean} - `true` if the current page is a feed page of some sort (not necessarily on feedpager service)
     */

    get isFeed() {
        return !!BZFD.Context.isFeed;
    },

    /**
     * @returns {Boolean} - `true` if the current page is a homepage, `false` otherwise
     */
    get isHomePage() {
        // BZFD.Context.homepage can be bool, not only if exists
        return !!BZFD.Context.homepage || service.pageName === 'home';
    },

    /**
     * @returns {Boolean} - `true` if the current page is serviced by buzzblocks, `false` otherwise
     */
    get isBuzzblocks() {
        try {
            return BZFD.Config.service === 'buzzblocks';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current environment is dev, `false` otherwise
     */
    get isDev() {
        try {
            return BZFD.Config.env === 'dev';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current environment is stage, `false` otherwise
     */
    get isStage() {
        try {
            return BZFD.Config.env === 'stage';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current environment is prod, `false` otherwise
     */
    get isProd() {
        try {
            return BZFD.Config.env === 'prod';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current bpage includes "important safety information", `false` otherwise
     */
    get isPharmaceutical() {
        return service.author === 'emdserono';
    },

    /**
     * @returns {String} - author of the current bpage or user feed, or null by default
     */
    get author() {
        try {
            return service.isBPage ? BZFD.Context.buzz.username : BZFD.Context.page.username;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {String} - name of the current page, or null by default
     */
    get pageName() {
        try {
            return BZFD.Context.page.name;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {String} - category of the current page, or null by default
     */
    get pageCategory() {
        try {
            return BZFD.Context.page.category;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {String} - vertical of the current page, or null by default
     */
    get pageVertical() {
        try {
            return BZFD.Context.page.vertical;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {Object} - classification of the current page, or empty object by default
     */
    get pageClassification() {
        try {
            return BZFD.Context.page.classification || {};
        } catch (e) {
            return {};
        }
    },

    /**
     * @return {Object} - returns localizatoin object w/o `translations` object
     */
    get localization() {
        try {
            return pick(BZFD.Context.page.localization, ['country', 'language', 'locale']);
        } catch (e) {
            return {};
        }
    },

    /**
     * @returns {Object} - all classifications of the current page, or empty object by default
     */
    get allPageClassifications() {
        try {
            return BZFD.Context.page.allClassifications || {};
        } catch (e) {
            return {};
        }
    },

    /**
     * @returns {Array} - all "sections" of the current page, or empty array by default
     */
    get allPageSections() {
        try {
            return BZFD.Context.page.allClassifications.sections || [];
        } catch (e) {
            return [];
        }
    },

    /**
     * @returns {Array} - all "editions" of the current page, or empty array by default
     */
    get allPageEditions() {
        try {
            return BZFD.Context.page.allClassifications.editions || [];
        } catch (e) {
            return [];
        }
    },

    /**
     * @returns {String?} - filter of the current feed page
     */
    get pageFilter() {
        try {
            return BZFD.Context.page.filter;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {Object} - filter settings
     */
    get pageFilters() {
        try {
            return BZFD.Context.page.filters || {};
        } catch (e) {
            return {};
        }
    },

    /**
     * @returns {String|null} - main filter of the feed
     */
    get pageMainFilter() {
        try {
            const filters = BZFD.Context.page.filters;
            let main;
            for (let name in filters) {
                if (filters[name].is_main) {
                    main = name;
                    break;
                }
            }
            return main || null;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {Boolean} - true if bpage is wide post
     */
    get isWidePost() {
        try {
            return ('buzz' in BZFD.Context) && BZFD.Context.page.width === 'wide';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {String} - Facebook API App Id of the current page, or null by default
     */
    get facebookApiAppId() {
        try {
            return BZFD.Config.facebookApi.appId;
        } catch (e) {
            return null;
        }
    },

    /**
     * @returns {String} - Facebook API version, or null by default
     */
    get facebookApiVersion() {
        try {
            return BZFD.Config.facebookApi.version;
        } catch (e) {
            return 'v2.9';
        }
    },

    /**
     * @returns {Boolean} - `true` if the current bpage is in the `news` vertical
     */
    get isNewsPost() {
        try {
            return BZFD.Context.page.vertical === 'news';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {String} - buzz type, default 'article'
     */
    get buzzType() {
        let type = 'article';
        if (service.hasQuiz) {
            type = 'quiz';
        } else if (service.hasList) {
            type = 'list';
        }
        return type;
    },

    /**
     * @returns {Array} - list of post tags
     */
    get buzzTags() {
        try {
            return BZFD.Context.buzz.tags;
        } catch (e) {
            return [];
        }
    },

    /**
     * @returns {Object} - post flags
     */
    get buzzFlags() {
        try {
            return BZFD.Context.buzz.flags;
        } catch (e) {
            return {};
        }
    },

    /**
     * @returns {String} - page locale, or `en_US` by default
     */
    get locale() {
        try {
            return BZFD.Context.page.localization.locale;
        } catch (e) {
            return 'en_US';
        }
    },

    /**
     * @returns {Boolean} - `true` if the current context has translation, `false` otherwise
     */
    get hasTranslations() {
        try {
            return !!BZFD.Context.page.localization.translations;
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {String} - webRoot, or empty string by default
     */
    get webRoot() {
        try {
            return BZFD.Config.webRoot;
        } catch (e) {
            return '';
        }
    },

    /**
     * @returns {Array} - prebid ad units, or empty array by default
     */
    get prebidUnits() {
        try {
            BZFD.Config.ads.prebidUnits.length; // eslint-disable-line no-unused-expressions
        } catch (e) {
            set(window, 'BZFD.Config.ads.prebidUnits', []);
        }
        return BZFD.Config.ads.prebidUnits;
    },

    /**
     * @returns {Array} - array of possible sizes for programmatic ads
     * @throws {Error} if `BZFD.Config.ads` is not defined
     */
    get programmaticSizes() {
        try {
            return BZFD.Config.ads.programmaticSizes;
        } catch (e) {
            throw new Error(
                '`BZFD.Config.ads` is not defined, which may cause ads to work incorrectly; ' +
                'use `bf_ads.get_ads_config` to make the config'
            );
        }
    },

    /**
     * @return {String} - destination label (if available)
     */
    get contextDestination() {
        let buzzDestination;
        let pageDestination;

        try {
            buzzDestination = BZFD.Context.buzz.destination;
        } catch (e) {
            buzzDestination = null;
        }

        try {
            pageDestination = BZFD.Context.page.destination;
        } catch (e) {
            pageDestination = null;
        }

        return buzzDestination || pageDestination || 'buzzfeed';
    },

    /**
     * Shopping - Commerce pages
     * @returns {Boolean} - `true` if the current page is a Shopping page, `false` otherwise
     */
    get isShopping() {
        try {
            return service.allPageSections.indexOf('Shopping') !== -1;
        } catch (e) {
            return false;
        }
    },

    /**
     * As/Is - asis.co / buzzfeed.com/asis
     * @returns {Boolean} - `true` if the current page is a As/Is Destination page, `false` otherwise
     */
    get isAsIs() {
        try {
            return (service.isBPage && (/^(As\/?Is)/im).test(service.pageClassification.section)) ||
                service.pageName === 'asis';
        } catch (e) {
            return false;
        }
    },

    /**
     * BFO - BuzzFeed Original
     * @returns {Boolean} - `true` if the current page is a BFO Destination page, `false` otherwise
     */
    get isBFO() {
        try {
            return service.contextDestination === 'buzzfeed';
        } catch (e) {
            return false;
        }
    },

    /**
     * BFN - buzzfeednews.com
     * @returns {Boolean} - `true` if the current page is a BFN Destination page, `false` otherwise
     */
    get isBFN() {
        try {
            return service.contextDestination === 'buzzfeed_news';
        } catch (e) {
            return false;
        }
    },

    /**
     * @returns {Boolean} - `true` if the current page is a As/Is Destination page, `false` otherwise
     */
    get buzzId() {
        try {
            return BZFD.Context.buzz.id;
        } catch (e) {
            return '';
        }
    },

    /**
     * Use element context when determining whether isAdPost instead of global BZFD variable
     * This is useful on infinite posts where the context may change
     * @param {HTMLElement} element - element that may have context
     * @returns {Boolean} - `true` if the current buzz module is an ad post, `false` otherwise
     */
    isAdPost(element) {
        // try to extract isAdPost from parent buzz module
        try {
            const context = getElementContext(element);
            return !!context.buzz.flags.ad;
        } catch (e) {
            // pass
        }
        // try to extract isAdPost from global BZFD variable
        try {
            return !!BZFD.Context.buzz.flags.ad;
        } catch (e) {
            return false;
        }
    }
};

export default service;