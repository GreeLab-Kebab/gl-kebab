import ajax from '../ajax';
import imageConverter from '../image-converter';

export const HLS_CONTENT_TYPE = 'application/vnd.apple.mpegurl';

const CONTENT_TYPE_PRIORITY = [
    HLS_CONTENT_TYPE, // HLS
    'video/mp4' // MP4
];

const VPS_HOST_MAP = {
    dev: 'https://video-player.dev.buzzfeed.io',
    stage: 'https://video-player-stage.buzzfeed.com',
    prod: 'https://video-player.buzzfeed.com'
};

/*
 * Finds the closest rendition that is wider than the player's width
 * or defaults to the largest possible rendition.
 * @param {number} playerWidth - our best guess of the rendered player width
 * @param {Object[]} renditions - list of renditions to filter
 * @returns {Object} the best fit rendition
 */
function getBestResolutionRendition(playerWidth, renditions) {
    // Sort by width, then height
    const renditionsByResolution = renditions
        .sort((a, b) => a.width - b.width || a.height - b.height);

    // Select best fit
    return renditionsByResolution.filter(({
            width
        }) => width >= playerWidth)[0] ||
        renditionsByResolution[renditionsByResolution.length - 1];
}

/*
 * Returns an array of the closest-fit renditions for each content type, in priority order
 * @param {number} playerWidth - our best guess of the rendered player width
 * @param {Object[]} renditions - the full renditions from the response
 * @returns {Object[]} the renditions ordered by content type
 */
export function getOrderedRenditions(playerWidth, renditions) {
    return CONTENT_TYPE_PRIORITY.reduce((acc, type) => {
        const bestRendition = getBestResolutionRendition(
            playerWidth,
            renditions.filter(({
                content_type
            }) => content_type === type) //eslint-disable-line camelcase
        );
        return bestRendition ? acc.concat([bestRendition]) : acc;
    }, []);
}

/*
 * Fetches renditions and metadata for a Buzzfeed video
 * You must provide either a videoId or a transcoderPath
 * @param {String} [env=window.BZFD.Config.env] - the environment
 * @param {number} [videoId] - optional videoId of the video
 * @param {String} [transcoderPath] - optional transcoderPath of the video
 * @returns {Object}
 */
export function getVideoInfo({
    env = window.BZFD.Config.env,
    videoId,
    transcoderPath
}) {
    const host = VPS_HOST_MAP[env];
    const key = videoId ? 'video_id' : 'transcoder_path';
    const val = videoId ? videoId : transcoderPath;
    return ajax.get(`${host}/v1/data?${key}=${val}`);
}

/*
 * Returns the poster URL for a rendition, including image optimisation params.
 * @param {Object} rendition - the video rendition
 * @returns {String} the URL
 */
export function getPosterUrl(url, width) {
    const imageOpts = {};
    if (!url) {
        return '';
    }
    if (width) {
        // Round up to the nearest 100px to increase the cache-hit rate
        const roundedWidth = Math.ceil(width / 100) * 100;
        imageOpts.downsize = `${roundedWidth}:*`;
    }
    return imageConverter.generate(url, imageOpts);
}