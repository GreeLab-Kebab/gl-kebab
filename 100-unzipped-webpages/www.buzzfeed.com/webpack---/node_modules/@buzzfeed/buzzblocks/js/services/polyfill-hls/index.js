const STORAGE = localStorage;
const LAST_HLS_LEVEL = 'lastHlsLevel';

/*
 * Tests if the current browser is supported by hls.js
 * This is taken from the hls.js library.
 * @see https://github.com/video-dev/hls.js/blob/master/src/hls.js#L27
 * @returns {boolean}
 */
export function supportsHlsPolyfill() {
    window.MediaSource = window.MediaSource || window.WebKitMediaSource;
    return (window.MediaSource &&
        typeof window.MediaSource.isTypeSupported === 'function' &&
        window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'));
}

/*
 * Tests if the current browser supported HLS natively
 * @returns {boolean}
 */
export function supportsHlsNatively() {
    const support = document.createElement('video').canPlayType('application/vnd.apple.mpegURL');
    return support === 'probably' || support === 'maybe';
}

/*
 * Fetches the hls.js Library
 * @returns {Promise}
 */
export function loadHlsPolyfillLib() {
    return import ( /* webpackChunkName: "hls" */ 'hls.js/dist/hls.light.js');
}

/*
 * Save a hls level to localStorage
 * @param {Number} level - the new level
 */
function saveHlsLevel(level) {
    STORAGE.setItem(LAST_HLS_LEVEL, level);
}

/*
 * Loads hls.js and runs it on the provided video element
 * @param {Element} video - the video element
 * @param {String} source - the HLS video source
 * @param {boolean} [preload=true] - whether the video should preload data
 * @returns {Promise}
 */
export function polyfillHls({
    video,
    source,
    preload = true
}) {
    // Attempt to start at the last known good hls level if we have one
    // else auto-choose start level based on bandwidth on first segment download (-1)
    const lastKnownLevel = Number.parseInt(STORAGE.getItem(LAST_HLS_LEVEL), 10);
    const startLevel = Number.isInteger(lastKnownLevel) ? lastKnownLevel : -1;
    const hlsConfig = {
        capLevelToPlayerSize: true,
        startLevel
    };
    let hls;

    //Disable eslint as this inner function was failing and it's outside the scope of my card
    /* eslint-disable */
    // if preload is off, we want to manually start loading on first play
    if (!preload) {
        hlsConfig.autoStartLoad = false;

        function startLoadingHlsJs() {
            hls.startLoad();
            video.removeEventListener('play', startLoadingHlsJs);
        }
        video.addEventListener('play', startLoadingHlsJs);
    }
    /* eslint-enable */
    return loadHlsPolyfillLib()
        .then(Hls => {
            return new Promise((resolve, reject) => {
                hls = new Hls(hlsConfig);
                hls.on(Hls.Events.MANIFEST_PARSED, resolve.bind(this, hls));
                hls.on(Hls.Events.ERROR, reject);
                hls.on(Hls.Events.LEVEL_SWITCHED, (event, {
                    level
                }) => saveHlsLevel(level));
                hls.loadSource(source);
                hls.attachMedia(video);
            });
        });
}