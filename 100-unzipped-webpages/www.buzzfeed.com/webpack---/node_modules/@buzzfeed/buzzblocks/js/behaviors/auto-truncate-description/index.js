import {
    Application
} from 't3js';
import dom from '../../services/dom';

Application.addBehavior('auto-truncate-description', function(context) {
    'use strict';

    //-----------------------------------------------------------
    // Private
    //-----------------------------------------------------------
    var _element;
    var _cardDescriptionElement;
    var _cardDescriptionText;
    var _maxDescriptionCountLines;

    /**
     * Updates text on element
     *
     * @param {HTMLElement} el - normalized dom element
     * @param {String} elText - simple text string
     * @return {void}
     */
    function _restoreText(el, elText) {
        dom.setText(el, elText);
    }

    /**
     * Truncates text by count lines
     * Expects that dom element should have: text, height and line-height
     *
     * @param {HTMLElement} el - normalized dom element
     * @param {Integer} maxCountLines - max count line for text in element
     * @param {Integer} isCuted - special flag for detect string was cuted or not
     * @return {void}
     */
    function _truncateTextByCountLines(el, maxCountLines, isCuted) {
        var elText;
        var elHeight;
        var elLineHeight;
        var countLines;
        var lineLength;
        var tmpLineLength;
        var lastSpaceIndex;

        elHeight = parseInt(dom.getStyle(el, 'height'), 10);
        elLineHeight = parseInt(dom.getStyle(el, 'line-height'), 10);
        elText = dom.getText(el);

        if (!elHeight || !elLineHeight || !elText || !elText.length) {
            return;
        }

        countLines = elHeight / elLineHeight;

        if (!isCuted && countLines <= maxCountLines) {
            return;
            //If text too big we need to remove most of unused text
        } else if (countLines > maxCountLines * 1.5) {
            lineLength = parseInt(elText.length / countLines, 10);
            tmpLineLength = maxCountLines * lineLength + parseInt(lineLength * 0.5, 10);

            if (elText.indexOf(' ', tmpLineLength) !== -1) {
                tmpLineLength = elText.indexOf(' ', tmpLineLength);
            }

            if (elText.length > tmpLineLength) {
                elText = elText.substring(0, tmpLineLength);
                dom.setText(el, elText);

                return _truncateTextByCountLines(el, maxCountLines, 1); // eslint-disable-line
            }
        }

        //Removing text by word
        dom.setText(el, elText + '...');
        elHeight = parseInt(dom.getStyle(el, 'height'), 10);
        elLineHeight = parseInt(dom.getStyle(el, 'line-height'), 10);
        countLines = elHeight / elLineHeight;

        if (countLines <= maxCountLines) {
            return;
        } else {
            lastSpaceIndex = elText.lastIndexOf(' ');
            elText = elText.substring(0, lastSpaceIndex);
            dom.setText(el, elText);

            return _truncateTextByCountLines(el, maxCountLines, 2); // eslint-disable-line
        }
    }

    /**
     * Waits for all styles will be aplied to html element.
     * After height became a stable runs function _truncateTextByCountLines()
     *
     * @param {HTMLElement} el - normalized dom element
     * @param {Integer} prevElHeight - element height
     * @return {void}
     */
    function _waitForStartTruncating(el, prevElHeight) {
        var curElHeight = parseInt(dom.getStyle(el, 'height'), 10);

        if (curElHeight !== prevElHeight) {
            setTimeout(function() {
                _waitForStartTruncating(el, curElHeight);
            }, 250);
        } else {
            _truncateTextByCountLines(el, _maxDescriptionCountLines, 0);

            dom.on(window, 'resize', function() {
                _restoreText(el, _cardDescriptionText);
                _truncateTextByCountLines(el, _maxDescriptionCountLines, 0);
            });
        }
    }

    //-----------------------------------------------------------
    // Public
    //-----------------------------------------------------------

    var behavior = {};

    /**
     * Behavior's initialization logic
     * @ignore
     * @returns {void}
     */
    behavior.init = function() {
        _element = context.getElement();
        _cardDescriptionElement = dom.find(_element, '.js-card__description')[0];
        _maxDescriptionCountLines = context.getConfig('maxDescriptionCountLines') || 2;

        if (_cardDescriptionElement) {
            _cardDescriptionText = dom.getText(_cardDescriptionElement);

            if (_cardDescriptionText) {
                _waitForStartTruncating(_cardDescriptionElement, null);
            }
        }
    };

    /**
     * Cleanup
     * @ignore
     * @returns {void}
     */
    behavior.destroy = function() {
        _element = null;
        _cardDescriptionElement = null;
        _cardDescriptionText = null;
        _maxDescriptionCountLines = null;
    };

    return behavior;
});
export const name = 'auto-truncate-description';