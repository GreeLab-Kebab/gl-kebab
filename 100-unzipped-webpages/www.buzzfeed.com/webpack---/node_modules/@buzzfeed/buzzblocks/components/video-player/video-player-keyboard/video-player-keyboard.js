import {
    requestFullscreen
} from '../../../js/services/polyfill-fullscreen/index';

const singleFrame = 0.04; // Approximates a frame based on 25fps

/**
 * Starts keyboard event listeners to control the player
 * @param {VideoPlayer} videoPlayer - the VideoPlayer to bind controls to
 */
export default function videoKeyboardControls(videoPlayer) {
    videoPlayer.element.addEventListener('click', () => {
        videoPlayer.container.classList.remove('video-player-skin--keyboard');
        videoPlayer.container.querySelector('.js-play-button').focus();
    });

    videoPlayer.container.addEventListener('keydown', event => keyboardBindings(event, videoPlayer));
}

/**
 * Calls <video> methods to control the video based
 * on keyboard events.
 * @param {Event} event - the keypress event
 * @param {VideoPlayer} videoPlayer - the VideoPlayer to bind controls to
 */
export function keyboardBindings(event, videoPlayer) {
    switch (event.keyCode) {
        // <Tab> - Activate :focus outline forever
        case 9:
            videoPlayer.container.classList.add('video-player-skin--keyboard');
            return false;
            // 'k' - Toggle play/pause
        case 75:
            videoPlayer.element.paused ? videoPlayer.element.play() : videoPlayer.element.pause();
            break;
            // '-' - Reduce volume by 5%
        case 189:
            videoPlayer.element.volume = videoPlayer.element.volume - 0.05;
            break;
            // '+' - Increase volume by 5%
        case 187:
            videoPlayer.element.volume = videoPlayer.element.volume + 0.05;
            break;
            // 'm' - Toggle muted/unmuted
        case 77:
            videoPlayer.element.muted = !videoPlayer.element.muted;
            break;
            // 'f' - Attempt to start full-screen mode
        case 70:
            requestFullscreen(videoPlayer.element);
            break;
            // <End> - Jump to the end of the video
        case 35:
            videoPlayer.element.pause();
            videoPlayer.element.currentTime = videoPlayer.element.duration - 1; // Don't freeze up playlist
            break;
            // <Home> - Jump to the start of the video
        case 36:
            videoPlayer.element.currentTime = 0;
            break;
            // ';' - Decrease playback rate
        case 186:
            if (videoPlayer.element.playbackRate >= 0.1) {
                videoPlayer.element.playbackRate = videoPlayer.element.playbackRate - 0.5;
            }
            break;
            // ''' - Increase playback rate
        case 222:
            if (videoPlayer.element.playbackRate < 10) {
                videoPlayer.element.playbackRate = videoPlayer.element.playbackRate + 0.5;
            }
            break;
            // 'j' - Jump back by 10 seconds
        case 74:
            videoPlayer.element.currentTime = videoPlayer.element.currentTime - 10;
            break;
            // 'l' - Jump forward by 10 seconds
        case 76:
            videoPlayer.element.currentTime = videoPlayer.element.currentTime + 10;
            break;
            // ',' - Move backward by one frame (approximation at 25fps)
        case 188:
            videoPlayer.element.pause();
            videoPlayer.element.currentTime = videoPlayer.element.currentTime - singleFrame;
            break;
            // '.' - Move forward by one frame (approximation at 25fps)
        case 190:
            videoPlayer.element.pause();
            videoPlayer.element.currentTime = videoPlayer.element.currentTime + singleFrame;
            break;
        default:
            return false;
    }

    event.preventDefault();
    return false;
}