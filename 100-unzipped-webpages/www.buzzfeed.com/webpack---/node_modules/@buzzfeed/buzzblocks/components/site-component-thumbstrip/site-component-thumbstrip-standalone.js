import {
    Application
} from 't3js';
import {
    throttle
} from 'lodash';
import SiteComponentList from '../site-component-list/site-component-list';
import dom from '../../js/services/dom';
import prepareTemplate from '../../js/services/nunjucks-env';
import thumbstripTemplate from './site-component-thumbstrip.html';
const template = prepareTemplate(thumbstripTemplate);

/**
 * Extends from the SiteComponentList and adds in some functionality for paging
 * through an animated, full-width slider.
 *
 * Example usage:
 *
 *  <div data-module="site-component-thumbstrip">
 *    <script type="text/x-config">
 *      {
 *        "unit": "thumbstrip",
 *        "unitType": "thumbstrip",
 *        "unitName": "headline/thumbstrip",
 *        "subUnit": "thumbstrip_bottom",
 *        "loadXsmall": true,
 *        "loadSmall": true,
 *        "loadMedium": true,
 *        "loadLarge": true
 *      }
 *    </script>
 *  </div>
 */
class SiteComponentThumbstrip extends SiteComponentList {
    /**
     * init is called when each instance of this module is instantiated
     * @override
     */
    init() {
        this.buzzes = [];
        this.itemWidth = 120;
        this.loadMoreOnScroll = true;
        this.scrollListenerAdded = false;
        this.renderTemplate();

        this.scrollingList = this.element.querySelector('ol');
        this.againButton = this.element.querySelector('[data-type="again"]');
        this.moreButton = this.element.querySelector('[data-type="more"]');

        // set the minimum page size to 25
        this.config.pageSize = Math.max(this.config.pageSize, 25);

        super.init();
    }

    /**
     * addScrollListener will bind a custom onscroll as a horizontal scroll listener
     * @override
     */
    addScrollListener() {
        if (!this.scrollListenerAdded) {
            this.scrollingList.addEventListener('scroll', throttle(this.onscroll, 0).bind(this));
            this.scrollListenerAdded = true;
        } else {
            console.error('trying to add new scroll listener');
        }
    }

    /**
     * This will not actually remove the scroll listener, just will set a flag to
     * alter the behaviour, essentially indicating to stop fetching content
     * @override
     */
    removeScrollListener() {
        this.loadMoreOnScroll = false;
    }

    /**
     * Returns the template contents
     * @returns {string} template
     * @override
     */
    loadTemplate() {
        return template;
    }

    /**
     * Renders the actual template, called from promise
     * @param {Object} data - Data from an XHR to the site_component_api
     * @override
     */
    renderTemplate(data = []) {
        let shouldInsertAd = this.config.ad &&
            this.config.ad.adPos &&
            data.length > 5 &&
            this.loadedPageNumber === 1;
        if (shouldInsertAd) {
            data.splice(1, 0, this.config.ad);
        }
        const buzzes = data.map((item, index) => ({ ...item,
            ...{
                unit: this.config.unit,
                unitType: this.config.unitType,
                unitName: this.config.unitName,
                sub_unit: this.config.subUnit,
                number: (this.loadedPageNumber - 1) * this.config.pageSize + index + 1,
                params: this.config.params,
                position: index,
            }
        }));

        this.buzzes = this.buzzes.concat(buzzes);
        let rendered = template.render({
            buzzes: buzzes,
            page: this.loadedPageNumber,
            ...this.config
        });
        let html = dom.stringToHTML(rendered.trim())[0];

        if (!this.loadedPageNumber) {
            this.element.innerHTML = '';
            this.element.appendChild(html);
            return;
        }

        let cards = html.querySelector('ol').children;
        [...cards].forEach(card => {
            this.scrollingList.appendChild(card);
        });
        this.onscroll();

        if (shouldInsertAd) {
            const adId = `BF_WIDGET_${this.config.ad.wid}`;
            const adEl = document.getElementById(adId);
            Application.start(adEl);
        }
    }

    /**
     * onclick handles actions for the two buttons (more and again)
     */
    onclick(ev, elem, elemType) {
        // if the 'more' button is pressed then we'll scroll one browser width to
        // the right. If there are more pages to fetch then we'll also trigger
        // that before we scroll
        if (elemType === 'more') {
            let scroll = () => {
                this.scrollingList.scrollLeft += (this.screenWidth() - this.itemWidth);
            };
            if (this.loadMoreOnScroll) {
                this.loadPage().then(scroll);
            } else {
                scroll();
            }
        }

        // if the user presses again then we'll take them to the start
        if (elemType === 'again') {
            this.scrollingList.scrollLeft = 0;
        }
    }

    /**
     * returns the screen width
     * @return number
     */
    screenWidth() {
        return window.outerWidth ? window.outerWidth : screen.width;
    }

    /**
     * onscroll handles actions for when we scroll to toggle between more and
     * again buttons
     */
    onscroll() {
        let maxScroll = this.scrollingList.scrollWidth;
        let scrollRight = this.scrollingList.scrollLeft + this.screenWidth();

        // if we're fully scrolled
        if (scrollRight >= maxScroll) {
            // if there are no more items to fetch then we'll show the 'again' button
            if (!this.loadMoreOnScroll) {
                this.moreButton.classList.add('js-hidden');
                this.againButton.classList.remove('js-hidden');
                return;
            }
            if (!this.isPageLoading) {
                this.loadPage();
            }
        }

        // show the 'more' button
        this.moreButton.classList.remove('js-hidden');
        this.againButton.classList.add('js-hidden');
    }
}

export default SiteComponentThumbstrip;