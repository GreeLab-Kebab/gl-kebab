import {
    Application
} from 't3js';
import dom from '../../js/services/dom';
import ajax from '../../js/services/ajax';
import captcha from '../../js/services/captcha';
import globalEvents from '../../js/services/global-events';
import validate from '../../js/services/validate';
import template from './newsletter-signup-fe.html';
import localization from '../../js/services/localization';
import abeagle from '../../js/services/abeagle';
import bzfd from '../../js/services/bzfd';

/**
 * @param {Object} context - T3 module's context
 * @returns {void}
 */
Application.addModule('newsletter-signup', function(context) {
    'use strict';
    //-----------------------------------------------------------
    // Globals
    //-----------------------------------------------------------

    //-----------------------------------------------------------
    // Private
    //-----------------------------------------------------------
    var _config;
    var _element = context.getElement();
    var _processing = false;
    var _checkedCategories = [];

    //main module elements
    var _elements = {
        form: null,
        fieldset: null,
        errorMessage: null,
        successMessage: null,
        emailField: null,
        spinner: null,
        categories: null,
        successText: null,
        source: null,
    };

    //-----------------------------------------------------------
    // Public
    //-----------------------------------------------------------

    /**
     * Newsletter module with signup form
     * @exports module:newsletter
     */
    var _module = {};

    /**
     * Tracks `signup/email-success` event for each selected category
     * We will track `category_id` if user select only one, or `all` if user select more then one category
     * @returns {void}
     */
    _module.trackSuccessCategories = function() {
        var categories = _module.getCategoriesData('id');
        var categoriesStr = categories.length > 1 ? 'all' : categories[0];
        _module.track('signup/email-success', categoriesStr);
    };

    /**
     * Returns array with value of field for selected newsletter categories
     * @param {String} field - field name
     * @returns {Array}
     */
    _module.getCategoriesData = function(field) {
        var categories = [];
        if (!field) {
            return categories;
        }
        _checkedCategories.forEach(function(item) {
            if (typeof item[field] !== 'undefined' && item[field]) {
                categories.push(item[field]);
            }
        });
        return categories;
    };

    /**
     * Updates success message if can be selected more then one newsletter category
     * @returns {void}
     */
    _module.updateSuccessMessage = function() {
        var categoriesName = [];
        var categoriesStr = '';
        var delimiter = ', ';
        var quantityPrefix = '';
        var successText = dom.getText(_elements.successText);
        if (_elements.categories.length > 1) {
            categoriesName = _module.getCategoriesData('name');
            if (categoriesName.length === 2) {
                delimiter = ' and ';
            }
            if (categoriesName.length > 1) {
                quantityPrefix = 's';
            }
            categoriesStr = categoriesName.join(delimiter);
            successText = successText.replace('{{quantity_prefix}}', quantityPrefix);
            successText = successText.replace('{{categories}}', categoriesStr);
            dom.setText(_elements.successText, successText);
        }
    };

    /**
     * Checks selected newsletter categories
     * @returns {void}
     */
    _module.getCheckedCategories = function() {
        var categories = [];
        _elements.categories.forEach(function(item) {
            if (item.checked && item.value) {
                categories.push({
                    id: item.value,
                    name: dom.getData(item, 'category-name') || ''
                });
            }
        });
        _checkedCategories = categories;
    };

    /**
     * Return form data
     * @returns {Object} - {{email: {String}, category: {Array}}}
     */
    _module.getFormData = function() {
        _module.getCheckedCategories();
        return {
            email: _elements.emailField.value,
            category: _module.getCategoriesData('id'),
            source: dom.getText(_elements.source),
        };
    };

    //errors state object
    //is public for Jasmine testing
    _module._errors = {
        email: 0,
        category: 0,
        server: 0,
    };

    /**
     * AJAX fail handler
     * @returns {void}
     */
    _module._onSubscribeFail = function() {
        _module.track('signup/email-error');
        ++_module._errors.server;
        _module.showErrors();
        _module.autofocus();
    };

    /**
     * AJAX success handler
     * @param {String} response - AJAX response text
     * @returns {void}
     */
    _module._onSubscribeDone = function(response) {
        //@todo might make sense to use `JSON.parse` and check `response` property
        //taken from static/js/public/email_signup.js for consistency
        if (response.indexOf('an error occurred') !== -1) {
            _module._onSubscribeFail();
        } else {
            _module.trackSuccessCategories();
            _module.updateSuccessMessage();
            _module.showSuccess();
        }
    };

    /**
     * Shows spinner
     * @returns {void}
     */
    _module._showSpinner = function() {
        dom.removeClass(_elements.spinner, 'js-hidden');
        dom.addClass(_elements.fieldset, 'newsletter__fieldset--loading');
        dom.addClass(_element, 'newsletter--loading');
    };

    /**
     * Hides spinner
     * @returns {void}
     */
    _module._hideSpinner = function() {
        dom.addClass(_elements.spinner, 'js-hidden');
        dom.removeClass(_elements.fieldset, 'newsletter__fieldset--loading');
        dom.removeClass(_element, 'newsletter--loading');
    };

    /**
     * Hides success message
     * @returns {void}
     */
    _module.hideSuccess = function() {
        dom.removeClass(_element, 'newsletter--success');
    };

    /**
     * Show success message
     * @returns {void}
     */
    _module.showSuccess = function() {
        dom.addClass(_element, 'newsletter--success');
        _elements.successMessage.focus();
    };

    /**
     * Hides error message and resets errors object
     * @returns {void}
     */
    _module.hideErrors = function() {
        dom.removeClass(_elements.fieldset, 'form-fieldset--error');
        dom.removeClass(_element, 'newsletter--error');
        _module._errors = {
            email: 0,
            category: 0,
            server: 0,
        };
    };

    _module.autofocus = function() {
        if (_module._errors.email > 0) {
            _elements.emailField.focus();
        } else if (_module._errors.category > 0) {
            _elements.categories[0].focus();
        }
    };

    /**
     * Show error message according to `_errors` object state
     * @returns {void}
     */
    _module.showErrors = function() {
        var messages = '';
        var error_el = false;
        var ariaDescribedby = false;
        if (_module._errors.email > 0) {
            messages += _module._errorMessages.email;
            error_el = _elements.emailField;
        }

        if (_module._errors.category > 0) {
            messages += _module._errorMessages.category;
            error_el = _elements.categories[0];
        }

        if (_module._errors.server > 0) {
            messages += _module._errorMessages.general;
        }
        dom.setHTML(_elements.errorMessage, messages);
        dom.addClass(_elements.fieldset, 'form-fieldset--error');
        dom.addClass(_element, 'newsletter--error');
        if (error_el) {
            ariaDescribedby = error_el.getAttribute('aria-describedby');
            _elements.errorMessage.setAttribute('id', ariaDescribedby);
        }
    };

    /**
     * Validates subscription data
     * @param {Object} data - data to be validated
     * @param {String} data.email - entered email address
     * @param {String} data.category - category to subscribe to
     * @returns {Promise}
     */
    _module.isValid = function(data) {
        if (!validate.email(data.email)) {
            ++_module._errors.email;
            return Promise.reject('Invalid email');
        }

        if (!data.category.length) {
            ++_module._errors.category;
            return Promise.reject(`Parameter 'category' is required`);
        }

        return captcha.init()
            .then(() => captcha.validate())
            .then((token) => Object.assign(data, {
                'g-recaptcha-response': token
            }));
    };

    /**
     * Send AJAX reqest to subscribe entered email
     * @param {Object} data - params to be sent
     * @returns {Promise}
     */
    _module.subscribe = function(data) {
        data.category = data.category.join(',');
        data.referrer = document.referrer;
        _module._showSpinner();
        return ajax.post('/newsletter/v3/subscriptions', {
                //fails with "json" type
                type: 'text',
                data
            })
            .then(_module._onSubscribeDone)
            .catch(_module._onSubscribeFail)
            .then(_module._hideSpinner);
    };

    /**
     * Handler for newsletter submit
     * Validates data and try to subscribe entered email
     * @returns {Promise}
     */
    _module.onSubmit = function() {
        if (_processing) {
            return Promise.resolve();
        }
        var data = _module.getFormData();

        _module.hideErrors();
        _module.hideSuccess();
        _processing = true;
        _module._showSpinner();
        return _module.isValid(data)
            .then(function(validated) {
                _processing = false;
                _module.subscribe(validated);
            })
            .catch(function() {
                _processing = false;
                _module.track('signup/validation-error');
                _module._hideSpinner();
                _module.showErrors();
                _module.autofocus();
            });
    };

    /**
     * Click handler
     * @param {String} ev - event name.
     * @param {HTMLElement} elem - event data.
     * @param {String} elemType - data-type attribute of the element.
     * @return {void}
     */
    _module.onclick = function(ev, elem, elemType) {
        if (elemType === 'email-submit') {
            ev.preventDefault();
            _module.onSubmit();
        }
    };

    /**
     * Track newsletter event
     * @todo implement `bfa`
     * @param {String} action - action to track
     * @param {String} label - additional label for track event
     * @returns {void}
     */
    _module.track = function(action, label) {
        var bfa = window.bfa;
        if (!bfa) {
            return;
        }
        bfa('track/' + action, {
            n: action,
            d: label || _config['newsletter'].gtrackLabel,
            l: _config['newsletter'].gtrackCat,
        });
    };

    _module.render = function() {
        return abeagle.getExperimentVariant('OOA11Y-159-shopping-newsletter')
            .then((variant) => {
                if (bzfd.pageName === 'shopping' || bzfd.isShopping) {
                    if (variant === 'variant1') {
                        _config['newsletter']['text_color'] = 'text-white';
                    } else if (variant === 'variant2') {
                        _config['newsletter']['text_color'] = 'text-pink';
                        _config['newsletter']['button_class_override'] = false;

                    }
                    dom.addClass(_element, 'newsletter--shopping-' + variant);
                }

                let html = template.render({
                    config: _config['newsletter'],
                    title_tag: _config['newsletter'].titleTag || 'h4',
                    id: _element.id,
                });
                _element.innerHTML = html;
            }).catch(abeagle.defaultErrorHandler);
    };

    /**
     * Module's initialization logic
     * @ignore
     * @returns {void}
     */
    _module.init = function() {
        _config = context.getConfig();
        return _module.render().then(function() {
            _elements.fieldset = dom.find(_element, '.js-newsletter__fieldset')[0];
            _elements.errorMessage = dom.find(_element, '.js-newsletter__error-message')[0];
            _elements.successMessage = dom.find(_element, '.js-newsletter__success-message')[0];
            _elements.emailField = dom.find(_element, '.js-newsletter__email-field')[0];
            _elements.spinner = dom.find(_element, '.js-newsletter__spinner')[0];
            _elements.categories = dom.find(_element, '.js-newsletter__category');
            _elements.successText = dom.find(_element, '.js-newsletter__success-text')[0];
            _elements.source = dom.find(_element, '.js-newsletter__source')[0];

            //module error messages
            //is public for Jasmine testing
            _module._errorMessages = {
                'email': localization.getTranslation('ENTER_VALID_EMAIL'),
                'general': localization.getTranslation('SORRY_SOMETHING_WRONG'),
                'category': _config['newsletter']['category_error']
            };

            Application.broadcast(
                globalEvents.componentLoaded, {
                    id: _element.id,
                    idxInParent: _config.idxInParent
                }
            );

            const onObserved = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        // We can disconnect because we're only watching one entry
                        observer.disconnect();
                        _element.classList.add('is-visible');
                    }
                });
            };

            const observer = new IntersectionObserver(onObserved, {
                rootMargin: `${window.innerHeight}px`,
            });
            observer.observe(_element);
        });
    };

    /**
     * Cleanup
     * @ignore
     * @returns {void}
     */
    _module.destroy = function() {
        _elements = {};
    };

    return _module;
});