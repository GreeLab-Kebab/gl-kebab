import {
    Application
} from 't3js';
import scrollListener from '../../js/services/scroll-listener';
import dom from '../../js/services/dom';

Application.addModule('back-to-top', function(context) {
    'use strict';

    var module = {};
    var _element;
    var _html;
    var _scrollListenerId;
    var _minimalScrollDistance;
    var _scrollToTopTimeout;
    var _scrollToContentTimeout;
    var _isPointingDown = false;
    var _parentElement;
    var _contentElement;
    var _padding;


    //-----------------------------------------------------------
    // Private
    //-----------------------------------------------------------

    /**
     * Toggles button to point downwards
     * or hides it (if gotocontent is disabled)
     */
    function _setButtonDownward() {
        dom.removeClass(_element, 'back-to-top--upward');
        if (dom.hasAttr(_element, 'data-gotocontent')) {
            _pointButtonDownward();
        } else {
            _hideButton();
        }
        _isPointingDown = true;
    }

    /**
     * Makes button point downward (helper function)
     */
    function _pointButtonDownward() {
        dom.addClass(_element, 'back-to-top--go-to-content');
    }

    /**
     * Toggles button to point upwards
     */
    function _setButtonUpward() {
        dom.removeClass(_element, 'js-hidden back-to-top--go-to-content');
        dom.addClass(_element, 'back-to-top--upward');
        _isPointingDown = false;
    }

    /**
     * Hides button
     */
    function _hideButton() {
        dom.addClass(_element, 'js-hidden');
    }

    /**
     * Returns minimal scroll distance to reach content
     * @returns {Number}
     */
    function _getMinimalScrollDistance() {
        _contentElement = dom.findOne(document, dom.getData(_element, 'content'));
        var distance = -parseInt(_padding, 10) + _contentElement.getBoundingClientRect().top;
        if (distance < 0) {
            distance = 0;
        }
        return distance;
    }

    /**
     * Add scroll listener to show/hide element
     * when user scrolled to the bottom/top of the page
     * @returns {void}
     * @private
     */
    function _addScrollListener() {
        var parent = (_parentElement === window) ? null : _parentElement;

        _scrollListenerId = scrollListener.add({
            throttleTimeout: 0,
            parent: parent,
            callback: (function() {
                return function() {
                    var currentTop = getScrollTop();

                    if ((currentTop < _minimalScrollDistance && !_isPointingDown)) {
                        _setButtonDownward();
                    } else if (currentTop >= _minimalScrollDistance && _isPointingDown) {
                        _setButtonUpward();
                    }
                };
            })(),
        });
    }

    /**
     * Remove scroll listener handler
     * @returns {void}
     */
    function _removeScrollListener() {
        scrollListener.remove(_scrollListenerId);
        _scrollListenerId = null;
    }

    /**
     * Returns top scroll offset
     * @returns {number}
     */
    function getScrollTop() {
        var scrollTop;
        if (_parentElement !== window) {
            scrollTop = _parentElement.scrollTop;
        } else {
            scrollTop = (window.pageYOffset || _html.scrollTop) - (_html.clientTop || 0);
        }

        return scrollTop;
    }

    /**
     * Scrolls to top of the page
     * @returns {void}
     * @private
     */
    function _scrollToTop() {
        var parentElement = _parentElement || window;
        if (!('scrollBy' in parentElement) && parentElement === window) {
            parentElement.scrollTo(0, 0);
            _minimalScrollDistance = _getMinimalScrollDistance();
            return;
        }

        var scrollTop = getScrollTop();
        if (scrollTop !== 0) {
            if (parentElement !== window) {
                parentElement.scrollTop -= 150;
            } else {
                window.scrollBy(0, -150);
            }
            _scrollToTopTimeout = setTimeout(_scrollToTop, 10);
        } else {
            clearTimeout(_scrollToTopTimeout);
            _minimalScrollDistance = _getMinimalScrollDistance();
            _setButtonDownward();
        }
    }

    /**
     * Scrolls to first occcurrence of designated content top
     * @returns {void}
     * @private
     */
    function _scrollToContent() {
        var parentElement = _parentElement || window;
        if (_contentElement) {
            var scrollTop = getScrollTop();
            if (!('scrollBy' in window)) {
                if (parentElement !== window) {
                    parentElement.scrollTop = _minimalScrollDistance;
                } else {
                    window.scrollTo(0, _minimalScrollDistance);
                }
            } else if (scrollTop < _minimalScrollDistance) {
                var scrollDiff = _minimalScrollDistance - scrollTop;
                var scrollIncrement = 20;
                var scrollAmount = (scrollDiff / scrollIncrement > 1) ?
                    scrollIncrement : scrollDiff;

                if (parentElement !== window) {
                    parentElement.scrollTop += scrollAmount;
                } else {
                    window.scrollBy(0, scrollAmount);
                }
                _scrollToContentTimeout = setTimeout(_scrollToContent, 10);
            } else {
                clearTimeout(_scrollToContentTimeout);
            }
        } else {
            dom.addClass(_element, 'js-hidden');
        }
    }

    //-----------------------------------------------------------
    // Public
    //-----------------------------------------------------------

    /**
     * Module initialization logic
     * @ignore
     * @returns {void}
     */
    module.init = function() {
        _element = context.getElement();
        _html = document.documentElement;
        _isPointingDown = false;
        _parentElement = dom.getData(_element, 'parent') === 'window' ? window :
            dom.findOne(document, dom.getData(_element, 'parent'));
        _padding = dom.getData(_element, 'padding') || 0;
        _minimalScrollDistance = _getMinimalScrollDistance();

        _addScrollListener();

        var currentTop = getScrollTop();
        if (currentTop < _minimalScrollDistance) {
            _setButtonDownward();
        } else if (currentTop >= _minimalScrollDistance) {
            _setButtonUpward();
        }
    };

    /**
     * Cleanup
     * @ignore
     * @returns {void}
     */
    module.destroy = function() {
        _element = null;
        _html = null;
        _minimalScrollDistance = null;
        _scrollToTopTimeout = null;

        _removeScrollListener();
    };

    /**
     * Handles onclick event.
     * @param {Event} ev - normalized DOM event.
     * @param {HTMLElement} elem - clicked element.
     * @param {String} elemType - data-type attribute of the element.
     * @returns {void}
     */
    module.onclick = function(ev, elem, elemType) {
        ev.preventDefault();
        if (elemType === 'to-top') {
            if (_isPointingDown) {
                _minimalScrollDistance = _getMinimalScrollDistance();
                _scrollToContent();
                _setButtonUpward();
            } else {
                _scrollToTop();
                _setButtonDownward();
            }
        }
    };

    return module;
});