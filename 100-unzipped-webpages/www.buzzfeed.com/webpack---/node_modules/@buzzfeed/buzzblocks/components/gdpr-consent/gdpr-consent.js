import {
    Application
} from 't3js';
import util from '../../js/services/util';
import cookies from '../../js/services/cookies';
import gdpr from '../../js/services/gdpr';

const TrackingModules = [
    'ComscoreIntegration',
    'FacebookIntegration',
    'LotameIntegration',
    'NielsenIntegration',
    'pinterestIntegration',
    'QuantcastIntegration',
    'SailthruIntegration',
    'skimlinks',
];

class GDPR {

    /**
     * @constructor
     */
    constructor() {
        this.showedConsent = cookies.get('euconsent') || false;
        this.eventHandlers = {};
        this.result = null;
        this.eventHandlers['get-gdpr-result'] = this.fireGdprResult.bind(this);
        this.messages = util.getKeys(this.eventHandlers);
        this.onmessage = util.getMessageHandler(this.eventHandlers);
    }
    /**
     * @init
     */
    init() {
        // enable tracking for not EU users
        if (!gdpr.needsConsent) {
            this.enableTracking(TrackingModules);
        }
        this.quantcastInit();
    }

    enableTracking(modules) {
        window.bfa('general/settings/update', {
            'approvedModules': modules
        });
        Application.broadcast('gdpr', {
            'approvedModules': modules
        });
    }

    fireGdprResult() {
        gdpr.getVendorConsents()
            .then(({
                success,
                data
            }) => {
                // User is not from UE
                if (typeof data.purposeConsents[1] === 'undefined' && typeof data.purposeConsents[5] === 'undefined') {
                    this.enableTracking(TrackingModules);
                    // User approve tracking
                } else if (success && data.purposeConsents[1] && data.purposeConsents[5]) {
                    this.enableTracking(TrackingModules);
                }
            })
            .catch((err) => console.log('>>> promise err', err));
    }

    gdprCallback() {
        Application.broadcast('gdpr-callback-result');
        if (gdpr.needsConsent) {
            this.fireGdprResult();
            if (!this.showedConsent) {
                Promise.all([gdpr.getVendorConsents(), gdpr.getPublisherConsents()]).then((response) => {
                    let trackingData = '';
                    if (response[0].success && response[1].success) {
                        trackingData += 'bf_inf' + (response[1].data.standardPurposeConsents[1] ? '1' : '0');
                        trackingData += ',bf_per' + (response[1].data.standardPurposeConsents[2] ? '1' : '0');
                        trackingData += ',bf_ad' + (response[1].data.standardPurposeConsents[3] ? '1' : '0');
                        trackingData += ',bf_con' + (response[1].data.standardPurposeConsents[4] ? '1' : '0');
                        trackingData += ',ven_inf' + (response[0].data.purposeConsents[1] ? '1' : '0');
                        trackingData += ',ven_per' + (response[0].data.purposeConsents[2] ? '1' : '0');
                        trackingData += ',ven_ad' + (response[0].data.purposeConsents[3] ? '1' : '0');
                        trackingData += ',ven_con' + (response[0].data.purposeConsents[4] ? '1' : '0');
                        trackingData += ',ven_meas' + (response[0].data.purposeConsents[5] ? '1' : '0');
                        this.track('response:accept', trackingData);
                        this.showedConsent = true;
                    }
                });
            }
        } else {
            this.enableTracking(TrackingModules);
        }
    }
    track(action, data) {
        let trackData = {
            l: 'gdpr',
            n: action,
        };
        if (data) {
            trackData.opt = {
                'dimension20': data
            };
        }

        window.bfa('track/gdpr/' + action, trackData);
    }
    /**
     * @quantcastInit
     */
    quantcastInit() {
        if (!this.showedConsent && gdpr.needsConsent) {
            this.track('impression');
        }
        gdpr.init()
            .then(() => gdpr.cmpCall('setConsentUiCallback', this.gdprCallback.bind(this)));
    }
}

Application.addModule('gdpr-consent', context => new GDPR(context));
export default {
    GDPR
};