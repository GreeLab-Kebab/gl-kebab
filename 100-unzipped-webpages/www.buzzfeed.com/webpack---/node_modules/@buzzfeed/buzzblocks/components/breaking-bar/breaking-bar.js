import {
    Application
} from 't3js';
import dom from '../../js/services/dom';
import apiService from '../../js/services/component-api';
import template from './breaking-bar-fe.html';
import speedtrack from '../../js/services/performance';
import bzfd from '../../js/services/bzfd';

class BreakingBar {
    /**
     * @param {Object} context - the t3 Context
     */
    constructor(context) {
        this.element = context.getElement();
        this.config = context.getConfig();
    }

    getData() {
        return new Promise((resolve, reject) => {
            apiService
                .get('breaking-bar', {
                    service: document.documentElement.getAttribute('data-app') || '',
                    origin: BZFD.Config.webRoot
                })
                .then(data => {
                    if (data) {
                        if (data.breaking_url) {
                            data['breaking_link_internal'] = this.isInternalLink(data.breaking_url);
                        }
                        if (bzfd.hasTranslations) {
                            data['i18n'] = BZFD.Context.page.localization.translations;
                        }
                        return resolve(data);
                    } else {
                        return reject('No breaking bar data');
                    }
                })
                .catch(e => {
                    return reject(e);
                });
        });
    }

    /**
     * Checks whether link is internal. Adds proper icon.
     * @param {Boolean} returns true if link is internal
     */
    isInternalLink(link) {
        var reLink = new RegExp('^https?://[a-zA-Z]*?.buzzfeed.com');
        return reLink.test(link);
    }

    /**
     * Renders the actual template, called from promise
     * @param {Object} data - Data from an XHR to the site_component_api
     */
    renderTemplate(data) {
        dom.append(this.element, template.render(data));
    }

    /**
     * Code that runs when this module has been loaded
     * We need other modules to be aware of the breaking-bar.
     */
    loadComplete() {
        setTimeout(() => {
            Application.broadcast('breaking-bar-loaded');
        }, 0);
        speedtrack.mark('mark_breaking_bar_loaded');
    }

    /**
     * Code that runs when this module does not load
     * We need other modules to be aware of the breaking-bar.
     */
    loadFailed() {
        setTimeout(() => {
            Application.broadcast('breaking-bar-noload');
        }, 0);
    }


    init() {
        if (this.config.enabled_fe) {
            this.getData()
                .then(this.renderTemplate.bind(this))
                .then(this.loadComplete)
                .catch(this.loadFailed);
        } else {
            this.loadFailed();
        }
    }

}

export default BreakingBar;

Application.addModule('breaking-bar', ctx => new BreakingBar(ctx));