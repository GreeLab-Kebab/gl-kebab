import {
    constant as c
} from "lodash";
import {
    uuid4
} from "@buzzfeed/bf-utils";

const numberOrNull = val => Number.isFinite(Number(val)) ? Number(val) : null;

export const contentLayer = ({
        pageType,
        pageId
    }) =>
    () => [
        ["page_url", ({
            data
        }) => data.page.uri.href || document.location.href],
        ["page_edition", "data.page.country"],
        ["context_page_type", c(pageType)],
        ["context_page_id", ({
            data
        }) => numberOrNull(data.page.id || pageId)],
        ["target_content_id", ({
            data
        }) => numberOrNull(data.target_content_id || data.obj_id || data.id)],
    ];

export const formatLayer = () => [
    ["content_meta", c(null)],
    ["target_content_type", ({
        data
    }) => {
        return data.target_content_type ||
            (data.obj_type === "post" ? "buzz" : (data.obj_type || data.type));
    }],
];

export const NoDLayer = () => [
    ["platform", c("web")],
    ["destination", c("buzzfeed")],
    ["referrer_url", ({
        data
    }) => data.user.referrer || document.referrer]
];

export const unitLayer = () => [
    ["unit_identifier", "data.unit_identifier"],
    ["position_in_unit", ({
        data
    }) => numberOrNull(data.position_in_unit || data.position || data.p)],
    ["unit_name", "data.unit_name"],
    ["sub_position", ({
        data
    }) => numberOrNull(data.sub_position || data.sub_p)],
    ["data_source", ({
        data
    }) => decodeURIComponent(data.data_source || data.dataSource)],
    ["algo_version", c(null)],
    ["variation_id", ({
        data
    }) => data.variation_id || data.variationId],
    ["treatment", "data.treatment"],
];

export const userLayer = ({
        eventType,
        type = `web_${eventType}`
    }) =>
    () => [
        ["type", c(type)],
        ["event_type", c(eventType)],
        ["uuid", uuid4],
        ["viewport_size", c(JSON.stringify({
            width: window.screen.width,
            height: window.screen.height
        }))],
        ["client_ts", () => Date.now()],
    ];

/**
 * Helper to apply layers to a mapping
 * @param {Object} params - options
 * @param {Object} params.mapping - mapping to add layers to
 * @param {Array} [params.layers] - layers to be applied
 * @return {Object} - mapping
 * ------
 * Each layer is a function, which returns a list of tuples where:
 *  * first item is a key of the event being sent
 *  * second item is the value for the key
 * ------
 * The value in turn can be of several types:
 *  * constant
 *  * JSON path to the value of the event object (i.e. "data.page.url")
 *  * a function which accepts event object as the only argument and returns a constant
 */
export const applyLayers = ({
    mapping,
    layers = []
}) => {
    layers.forEach(layer => {
        layer().forEach(([mapToKey, mapFromValue]) => {
            mapping.addMapTo(mapToKey).mapFrom(mapFromValue);
        });
    });
    return mapping;
};