import {
    defaultsDeep,
    isEqual
} from "lodash";

const projectId = "a2a5c7f9-3fa0-4182-889a-15aa61acf59b";
const apiKey = "dc7cae83-2bc8-40f8-b7f0-6a097fbcfc20";
const scriptUrl = `https://cdn.permutive.com/${projectId}-web.js`;

const defaultSettings = {
    enabled: Promise.resolve(false), // should be disabled by default
};

const decodeEntities = (obj) => {
    switch (typeof obj) {
        case "string":
            const txt = document.createElement("textarea");
            txt.innerHTML = obj;
            return txt.value;
        case "object":
            let empty = true;
            const stripped = Array.isArray(obj) ? [] : {};
            for (let key in obj) {
                empty = false;
                stripped[key] = decodeEntities(obj[key]);
            }
            return empty ? undefined : stripped;
    }
    return obj;
}

class PermutiveIntegration {
    constructor(sandbox) {
        this.sandbox = sandbox;
        this.configureSandbox();
        this.settings = defaultsDeep(sandbox.settings || {}, defaultSettings);

        // Init needs to be a top level property to satisfy BFA registration
        this.init = () => {
            this.inited = true;
            this.sandbox.moduleInited.dispatch();
            this.activate();
        }
    }

    /**
     * Set window.permutive as our analytics tracker
     * Note: code provided by permutive
     * @returns {object} The value of window.permutive
     */
    get tracker() {
        if (!window.permutive) {
            window.permutive = {
                q: [],
                config: {
                    projectId: projectId,
                    apiKey: apiKey,
                    environment: "production",
                },
            };
            const fns = [
                "addon", "identify", "track", "trigger", "query", "segment", "segments", "ready",
                "on", "once", "user", "consent"
            ];
            for (let f of fns) {
                window.permutive[f] = (...args) => window.permutive.q.push({
                    functionName: f,
                    arguments: args
                });
            }
        }
        return window.permutive;
    }

    /**
     * Init permutive scripts to track page view
     * @returns {void}
     */
    activate() {
        if (this.active || !this.inited || !this.page || !this.user) {
            return;
        }
        const checkEnabled = this.settings.enabled;
        if (Promise.resolve(checkEnabled) !== checkEnabled) {
            sandbox.log.warn(sandbox.moduleId + " enabled setting should be a promise.");
            return;
        }
        this.active = true;
        checkEnabled.then((isOn) => {
            if (!isOn) {
                return;
            }
            this.enabled = true;
            this.identifyUser(this.user);
            this.trackPage(this.transformPageMeta());
            this.sandbox.domi.onDomReady(() => this.sandbox.domi.loadScript({
                src: scriptUrl
            }));
            this.sandbox.moduleActive.dispatch();
        });
    }

    /**
     * Init permutive scripts to track page view
     * @returns {void}
     */
    configureSandbox() {
        this.sandbox.onPageReady(() => {
            this.page = this.sandbox.getPageInfo();
            this.activate();
        });

        this.sandbox.onUserReady(() => {
            this.user = this.sandbox.getUserInfo();
            this.activate();
        });

        this.sandbox.onUserChanged(() => {
            this.user = this.sandbox.getUserInfo();
            this.identifyUser(this.user);
        });

        this.sandbox.subOn("track/page/view", () => this.onPageView());
        this.sandbox.subOn("track/quiz/answer", ({
            data
        }) => this.onQuizAnswer(data));
        this.sandbox.subOn("track/bfp/quiz-answer", ({
            data
        }) => this.onQuizAnswer(data));
        this.sandbox.subOn("track/quiz/complete", ({
            data
        }) => this.onQuizComplete(data));
        this.sandbox.subOn("track/bfp/quiz-complete", ({
            data
        }) => this.onQuizComplete(data));
        this.sandbox.subOn("track/click/Exit-Link", ({
            data
        }) => this.onAffiliateLinkClick(data));
    }

    /**
     * Convert pageview event data and track
     * @returns {void}
     */
    onPageView() {
        const pageData = this.sandbox.getPageInfo();
        if (!pageData || isEqual(this.page, pageData)) {
            return;
        }
        this.page = pageData;
        this.trackPage(this.transformPageMeta());
    }

    /**
     * Convert QuizAnswer event data and track custom event
     * @param {object} data - event data
     * @returns {void}
     */
    onQuizAnswer(data) {
        const page = this.page || {};
        const post = page.post || {};
        const dataObj = decodeEntities({
            bf_buzzid: post.id, // eslint-disable-line camelcase
            quizId: data.quizId,
            questionId: data.questionId,
            itemId: data.answerId,
            answerText: data.answerValue || "",
        });
        this.trackEvent("QuizAnswer", dataObj);
    }

    /**
     * Convert quizcomplete event data and track custom event
     * @param {object} data - event data
     * @returns {void}
     */
    onQuizComplete(data) {
        const page = this.page || {};
        const post = page.post || {};
        const dataObj = decodeEntities({
            bf_buzzid: post.id, // eslint-disable-line camelcase
            quizId: data.quizId,
            resultImageAlt: data.resultImageAlt,
            resultDescription: data.resultDescription,
            resultId: data.itemId || data.resultId,
            resultText: data.resultText,
            resultTitle: data.resultTitle,
        });
        this.trackEvent("QuizComplete", dataObj);
    }

    /**
     * Convert affiliate link click event data and track custom event
     * @param {object} data - event data
     * @returns {void}
     */
    onAffiliateLinkClick(data) {
        if (!("affiliate" in data)) {
            return;
        }
        const dataObj = decodeEntities({
            affiliate: data.affiliate,
            campaign: data.campaign,
            href: data.url,
            name: data.anchorDesc,
            price: data.price,
            redirectUrl: data.redirectUrl,
        });
        this.trackEvent("AffiliateLinkClick", dataObj);
    }

    /**
     * Convert page data into the form required by schema set in permutive dashboard
     * @returns {object} The page data in format required by schema
     */
    transformPageMeta() {
        const page = this.page || {};
        const post = page.post || {};
        const pageMeta = {
            page: {
                meta: {
                    bf_buzzid: post.id, // eslint-disable-line camelcase
                    bf_userid: post.authorId, // eslint-disable-line camelcase
                    type: page.hasQuiz ? "quiz" : (post.format ? post.format.type : "feed"),
                    section: (page.name === "section" ? page.section : undefined) || page.category || page.name,
                    publisher: page.destination || "buzzfeed",
                    title: post.title,
                    description: page.description,
                    author: post.author,
                    tags: post.tags,
                    platform: "web",
                    edition: page.country ? page.country.replace(/.*-/, "") : undefined,
                    categories: page.sections,
                    badges: post.badges ? post.badges.map(badge => badge.name) : undefined,
                }
            }
        };
        return decodeEntities(pageMeta);
    }

    /**
     * Identify user
     * @param {object} userInfo - user info provided during bfa setup
     * @returns {void}
     */
    identifyUser(userInfo) {
        if (!this.enabled) {
            return;
        }
        if (userInfo && userInfo.clientId) {
            const userIdentity = "" + userInfo.clientId;
            this.tracker.identify(userIdentity);
            this.logEvent({
                clientId: userIdentity
            }, "user", "identify");
        }
    }

    /**
     * Track page view
     * @param {object} pageData - transformed page data in form of permutive schema
     * @returns {void}
     */
    trackPage(pageData) {
        if (!this.enabled) {
            return;
        }
        this.tracker.addon("web", pageData);
        this.logEvent(pageData, "page", "view");
    }

    /**
     * Track generic event
     * @param {object} eventName - name of the event to track
     * @param {object} eventData - event data in form of permutive schema
     * @returns {void}
     */
    trackEvent(eventName, eventData) {
        if (!this.enabled) {
            return;
        }
        this.tracker.track(eventName, eventData);
        this.logEvent(eventData, eventName, "track");
    }

    /**
     * Log events to the console for debugging
     * @param {object} data - data associated with a given event
     * @param {string} name - name/type of the event, e.g. page
     * @param {string} action - action being performed for this event type, e.g. view
     * @returns {void}
     */
    logEvent(data, name, action) {
        data = Object.assign({}, data); // clone data to prevent from being altered
        const event = this.sandbox.tryConvertToEventInfo(data, name, action);
        this.sandbox.debugTracker.trackEvent(event, data);
    }
}

PermutiveIntegration.defaultId = "PermutiveIntegration";
PermutiveIntegration.require = ["domi", "pageInfo", "logger", "debugTracker", "trackingUtils", "userInfo"];

export {
    PermutiveIntegration as
    default, decodeEntities
};