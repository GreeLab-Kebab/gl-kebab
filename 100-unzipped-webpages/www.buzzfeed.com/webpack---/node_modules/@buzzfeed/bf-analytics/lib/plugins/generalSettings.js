import Signal from "signals";
import {
    defaultsDeep,
    cloneDeep,
    merge,
} from "lodash";

/**
 * General Settings plugin
 * @module  plugins/generalSettings
 * @exports generalSettings
 */

"use strict";
/**
 * @classdesc
 * Plugin which works with a `general` settings and handles routes connected with them (update, set).
 * Supported routes:
 * "general/settings/set" (settings object as dataObj),
 *  "general/settings/update" (settings object as dataObj).
 * Extends Core with:
 * _generalSettings property - contains an actual general settings,
 * _onGeneralSettingsChange method - subscribes specified callback on general settings changed event.
 * Extends Sandbox with:
 * getGeneralSettings method - returns copy of actual general settings,
 * onGeneralSettingsChange method - subscribes specified callback on general settings changed event.
 * @memberof module:plugins/generalSettings
 * @param {BFACore} core - bfa core instance
 * @param {object} settings - settings that will be merged with default settings on init step
 * @returns {{modifySBInstance: modifySBInstance}} - object with modifySBInstance method
 * @constructor
 */
function GeneralSettingsPlugin(core, settings) {
    var defaultSettings = {
        mode: core.defs.bfaMode.prod,
        debug: false,
        isConsentRequired: false,
        approvedModules: [],
    };
    this._core = core;
    var currentSettings = defaultsDeep(settings || {}, defaultSettings);
    var onChange = new Signal();
    this.setSettings = function(generalSettings) {
        core._generalSettings = cloneDeep(generalSettings || {});
        core._onGeneralSettingsChange.dispatch(cloneDeep(core._generalSettings));
    };
    this.updateSettings = function(generalSettings) {
        core._generalSettings = merge(core._generalSettings || {}, generalSettings || {});
        core._onGeneralSettingsChange.dispatch(cloneDeep(core._generalSettings));
    };
    core._onGeneralSettingsChange = onChange;
    this.setSettings(currentSettings);
    this._core._router.sub("general/settings/set", this.setSettings, this);
    this._core._router.sub("general/settings/update", this.updateSettings, this);
    return {
        modifySBInstance: function(sandboxInstance) {
            sandboxInstance.getGeneralSettings = function() {
                return cloneDeep(core._generalSettings);
            };
            sandboxInstance.onGeneralSettingsChange = function(cb, context) {
                core._onGeneralSettingsChange.add(cb, context);
            };
            sandboxInstance.isApproved = function(id) {
                return !core._generalSettings.isConsentRequired || core._generalSettings.approvedModules.indexOf(id) !== -1;
            }
        },
    };
}
GeneralSettingsPlugin.defaultId = "generalSettings";
export default GeneralSettingsPlugin;