import {
    defaultsDeep,
    has,
    get,
    isArray,
    remove,
    startsWith,
} from "lodash";

/**
 * Global BFA Endpoint plugin
 * @module  plugins/globalBfaEndpoint
 * @exports globalBfaEndpoint
 */

"use strict";
/**
 * @classdesc
 * Plugin that initialize BFA endpoint in global scope. Checks and handles requests from BFA global endpoint dummy
 * object if it's found.
 * @memberof module:plugins/globalBfaEndpoint
 * @param {BFACore} core - bfa core instance
 * @param {object} settings - varName property is for BFA global var name (default value is `bfa`) and eventsArrayName
 * property can contains an array name with unhandled events data inside BFA global var object (default value is `c`)
 * @returns {*} - empty object
 * @constructor
 */
function GlobalBfaEndpointPlugin(core, settings) {
    var defaultSettings = {
        varName: "bfa",
        eventsArrayName: "c",
    };
    this.settings = defaultsDeep(settings || {}, defaultSettings);
    this.unhandledEventsArray = null;

    if (has(window, this.settings.varName)) {
        var mockedBfaEndpoint = get(window, this.settings.varName);
        if (has(mockedBfaEndpoint, this.settings.eventsArrayName) &&
            isArray(mockedBfaEndpoint[this.settings.eventsArrayName])) {
            this.unhandledEventsArray = mockedBfaEndpoint[this.settings.eventsArrayName];
            if (this.unhandledEventsArray.length > 0) {
                // remove and push events that not connected with modules
                var notModuleEvents = remove(this.unhandledEventsArray, function(e) {
                    return e[0] && !startsWith(e[0], "track") && !startsWith(e[0], "module");
                });
                notModuleEvents.forEach(function(unhandledEventArgs) {
                    core.push.apply(core, unhandledEventArgs);
                }, this);
            }
        }
    }
    core.inited.addOnce(function() {
        window[this.settings.varName] = function() {
            core.push.apply(core, arguments);
        };
        if (this.unhandledEventsArray && this.unhandledEventsArray.length > 0) {
            this.unhandledEventsArray.forEach(function(unhandledEventArgs) {
                core.push.apply(core, unhandledEventArgs);
            }, this);
        }
        if (window.location.search.indexOf("e2e_test") > -1) {
            document.documentElement.setAttribute("data-bfa-ready", "true");
        }
    }, this);

    return {};
}
GlobalBfaEndpointPlugin.defaultId = "globalBfaEndpoint";

export default GlobalBfaEndpointPlugin;