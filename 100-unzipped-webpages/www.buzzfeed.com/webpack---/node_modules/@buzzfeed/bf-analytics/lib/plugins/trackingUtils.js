import EventInfo from "../common/bfa_eventinfo";
import bfaDefs from "../common/bfa_defs";
import {
    isString,
    indexOf,
    values,
    isPlainObject,
    isArray,
} from "lodash";
/**
 * Test mode plugin
 * @module  plugins/trackingUtils
 * @exports testMode
 */

"use strict";

/**
 * @classdesc
 * Plugin which provides additional utils for working with tracking data.
 * Extends Sandbox with:
 * tryConvertToEventInfo method - tries to convert specified object to object of `eventInfo` type (you can
 * additionally specify event's type and name as second and third arg),
 * canTrackEvent method - checks that specified object of eventInfo type must be tracked by current module.
 * @memberof module:plugins/trackingUtils
 * @returns {{modifySBInstance: modifySBInstance}} - object with modifySBInstance method
 * @constructor
 */
function TrackingUtilsPlugin() {
    function canTrackEvent(moduleId, trackingBehavior, eventInfo) {
        if (!isString(moduleId) || moduleId.length === 0) {
            return false;
        }
        if (!(eventInfo instanceof EventInfo)) {
            return false;
        }
        var coercedTB =
            indexOf(values(bfaDefs.trackingBehavior), trackingBehavior) !== -1 ?
            trackingBehavior : bfaDefs.trackingBehavior.byDefault;
        var eventOptions = eventInfo.opt;
        var canTrack = false;
        switch (coercedTB) {
            case bfaDefs.trackingBehavior.ifSpecified:
                if (isPlainObject(eventOptions) &&
                    isArray(eventOptions.force) &&
                    (eventOptions.force.indexOf("all") !== -1 ||
                        eventOptions.force.indexOf(moduleId) !== -1)) {
                    canTrack = true;
                }
                break;
            case bfaDefs.trackingBehavior.byDefault:
            default:
                if (!isPlainObject(eventOptions) || !(
                        isArray(eventOptions.ignore) &&
                        (eventOptions.ignore.indexOf("all") !== -1 ||
                            eventOptions.ignore.indexOf(moduleId) !== -1) &&
                        !(isArray(eventOptions.force) &&
                            eventOptions.force.indexOf(moduleId) !== -1))) {
                    canTrack = true;
                }
                break;
        }
        return canTrack;
    }

    function tryConvertToEventInfo(dataObject, eventType, eventName) {
        dataObject = dataObject || {};
        if (dataObject instanceof EventInfo) {
            return dataObject;
        }
        if (!isString(dataObject.t) || dataObject.t.length === 0) {
            dataObject.t = eventType;
        }

        if (!isString(dataObject.n) || dataObject.n.length === 0) {
            dataObject.n = eventName;
        }
        return EventInfo.tryParse(dataObject);
    }

    return {
        modifySBInstance: function(sandboxInstance) {
            sandboxInstance.canTrackEvent = canTrackEvent;
            sandboxInstance.tryConvertToEventInfo = tryConvertToEventInfo;
        },
    };
}
TrackingUtilsPlugin.defaultId = "trackingUtils";
export default TrackingUtilsPlugin;