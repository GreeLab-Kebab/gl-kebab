import BFElementHandlers from "./bf_dom_element_handlers.js";

"use strict";

/**
 * This is the class that represents binder for DOM events. Implements delegated event handling that
 * apply common listener to body element and looks for all events from elements described in mappings.
 * @param {object} mapping Object that contains configuration mapping for DOM events.
 * @param {string} executable Name of the function that should receive result data for tracking.
 * @constructor
 */
function BFDomEventhandlerDelegation(mapping, executable) {
    this.events = [];

    /**
     * Matching function that decides if element fits to the provided selector.
     */
    this.matches = document.documentElement.matches ||
        document.documentElement.webkitMatchesSelector ||
        document.documentElement.mozMatchesSelector ||
        document.documentElement.oMatchesSelector ||
        document.documentElement.msMatchesSelector;

    /**
     * Function that required to be called. This function configure DOM binder with the provided mappings
     * and also register all necessary event-handlers for tracking on document's content container that
     * intercepts all bubbling events.
     * @returns {*} Returns nothing.
     */
    this.init = function() {
        this.processMapping();
        this.subscribeForEvents();
    };

    /**
     * Responsible for processing of mappings defined in configuration.
     * @returns {*} Returns nothing.
     */
    this.processMapping = function() {
        for (var section in mapping) {
            if (mapping.hasOwnProperty(section)) {
                var s = mapping[section];
                for (var i = 0; i < s.length; i++) {
                    s[i].trackMethod = section;
                    this.events.push(s[i]);
                }
            }
        }
    };

    /**
     * Function that creates event-listeners on the main container for interception of bubbling events.
     * @returns {*} Returns nothing.
     */
    this.subscribeForEvents = function() {
        var _listener = document.body || document.documentElement;
        var _this = this;
        this.events = this.events.map(function(record) {
            record.handler = _this.getHandler();
            _listener.addEventListener(record.event, record.handler);
            return record;
        });
    };

    /**
     * Creates the function (event-handler) that will be applied to the 'body' element. This event-listener
     * is going to intercept all the bubbling events and process them according to mappings described in configuration.
     * @returns {Function} Returns handler function.
     */
    this.getHandler = function() {
        var _this = this;
        return function(e) {
            // Check if event has been handled by direct event handler
            if (!e.bfaHandled && e.target) {
                var element = e.target;
                while (element) {
                    for (var i = 0; i < _this.events.length; i++) {
                        var record = _this.events[i];
                        if (element.nodeType && element.nodeType !== 9 && record.event === e.type &&
                            _this.matches.call(element, record.selector)) {
                            var pipeline = record.options ? record.options.handlers : null;
                            _this.trackElement(element, record.trackMethod, pipeline);
                            e.bfaHandled = true;
                            break;
                        }
                    }
                    if (e.bfaHandled) {
                        break;
                    }
                    element = element.parentNode;
                }
            }
        };
    };

    /**
     * Function that plays role of event-handler for DOM elements. Parses tracking data from element"s attribute
     * and init it"s sending to the server.
     * @param {HTMLElement} element Element that should be handled and which attribute should be parsed.
     * @param {string} trackMethod Name of the method that should be invoked by analytics on event triggering.
     * It matches to the "sectionName" in mapping object.
     * @param {Array} pipeline List of handlers that should be executed against the element.
     * @returns {*} Returns nothing.
     */
    this.trackElement = function(element, trackMethod, pipeline) {
        if (pipeline) {
            for (var i = 0; i < pipeline.length; i++) {
                if (BFElementHandlers[pipeline[i]](element, executable, trackMethod)) {
                    break;
                }
            }
        } else {
            var defaultHandler = BFElementHandlers.DefaultHandler;
            defaultHandler(element, executable, trackMethod);
        }
    };

    /**
     * Removes delegated event listener from 'body' element.
     * @returns {*} Returns nothing.
     */
    this.disable = function() {
        var listener = document.body || document.documentElement;
        for (var i = 0; i < this.events.length; i++) {
            listener.removeEventListener(this.events[i].event, this.events[i].handler);
        }
    };
}

/**
 * Events delegation handler module for Buzzfeed data-binder.
 * @type {BFDomEventhandlerDelegation}
 */
export default BFDomEventhandlerDelegation;