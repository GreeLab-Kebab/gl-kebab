"use strict";

/**
 * This function returns stack/message if `val` is Error and `val` value if not
 * @param {Object} val - message object
 * @returns {String} coerced message
 */
function coerce(val) {
    if (val instanceof Error) {
        return val.stack || val.message;
    }
    return val.toString();
}

/**
 * Creates logger instance with specified name
 * @param {string} name - logger name
 * @param {Number} [logLevel=1] - logging logLevel level.
 * 1 - errors, 2 - errors + warnings, 3 - errors + warnings + logs.
 * @returns {{log: log, info: info, error: error, warn: warn}} - instance with log functionality
 */
function logger(name, logLevel) {
    return {
        logLevel: logLevel || 1,
        log: function(type, args) {
            if (!Array.isArray(args)) {
                args = [args, ];
            }
            if (logger._enabled === true) {
                /* eslint-disable no-console */
                if (window.console) {
                    window.console[type].apply(window.console, args);
                }
                /* eslint-enable no-console */
            }
        },
        event: function(unitId, eventInfo, dataObject) {
            if (this.logLevel === 3) {
                var title = unitId + " '" + eventInfo.t + "'";

                if (eventInfo.printType && dataObject.type) {
                    title = title + " '" + dataObject.type + "'";
                }

                this.log("groupCollapsed", title);
                this.log("log", "EventInfo");
                this.log("table", [
                    [eventInfo, ],
                ]);
                this.log("log", "DataObject");
                this.log("table", [
                    [dataObject, ],
                ]);

                if (eventInfo.prettyPrintData) {
                    this.log("log", JSON.stringify(dataObject, null, 2));
                }

                this.log("groupEnd");
            }
        },
        error: function(msgobj) {
            if (this.logLevel >= 1) {
                this.log("error", "BFA [" + name + "] " + coerce(msgobj));
            }
        },
        warn: function(msgobj) {
            if (this.logLevel >= 2) {
                this.log("warn", "BFA [" + name + "] " + coerce(msgobj));
            }
        },
    };
}
logger._enabled = false;

/**
 * _enabled value Setter/Getter
 * @param {boolean|*} enabled - enable/disable
 * @returns {boolean|*} - returns current logger state
 */
logger.enabled = function(enabled) {
    if (typeof enabled !== "undefined") {
        logger._enabled = !!enabled;
    }
    return logger._enabled;
};

export default logger;