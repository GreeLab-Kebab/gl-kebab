import BFElementHandlers from "./bf_dom_element_handlers.js";

"use strict";

/**
 * This is the class that represents binder for DOM events. Implements direct event handling that apply event
 * listeners directly to elements defined in mappings.
 * @param {object} mapping Object that contains configuration mapping for DOM events.
 * @param {string} executable Name of the function that should receive result data for tracking.
 * @constructor
 */
function BFDomEventhandlerDirect(mapping, executable) {
    this.events = [];

    /**
     * Function that required to be called. This function configure DOM binder with the provided mappings
     * and also register all necessary event-handlers for tracking that defined in mappings.
     * @returns {*} Returns nothing.
     */
    this.init = function() {
        this.processMapping();
        this.subscribeForEvents();
    };

    /**
     * Responsible for processing of mappings defined in configuration.
     * @returns {*} Returns nothing.
     */
    this.processMapping = function() {
        for (var section in mapping) {
            if (mapping.hasOwnProperty(section)) {
                var s = mapping[section];
                for (var i = 0; i < s.length; i++) {
                    s[i].trackMethod = section;
                    this.events.push(s[i]);
                }
            }
        }
    };

    /**
     * Function that creates event-listeners on the main container for interception of bubbling events.
     * @returns {Void} Function does not returns any value.
     */
    this.subscribeForEvents = function() {
        var _this = this;
        this.events = this.events.map(function(record) {
            var element = document.querySelector(record.selector);
            if (element) {
                var pipeline = record.options ? record.options.handlers : null;
                record.handler = _this.getHandler(record.trackMethod, pipeline);
                element.addEventListener(record.event, record.handler);
            }
            return record;
        });
    };

    /**
     * Creates the function (event-handler) that will be applied to the element.
     * @param {string} trackingMethod Name of the method that should be invoked by analytics on event triggering.
     * @param {array} pipeline List of the handlers that should be applied to intercepted event.
     * @returns {Function} Returns handler.
     */
    this.getHandler = function(trackingMethod, pipeline) {
        var _this = this;
        return function(e) {
            _this.trackElement(this, trackingMethod, pipeline);
            e.bfaHandled = true;
        };
    };

    /**
     * Function that plays role of event-handler for DOM elements. Parses tracking data from element"s attribute
     * and init it"s sending to the server.
     * @param {HTMLElement} element Element that should be handled and which attribute should be parsed.
     * @param {string} trackMethod Name of the method that should be invoked by analytics on event triggering.
     * It matches to the "sectionName" in mapping object.
     * @param {Array} pipeline List of handlers that should be executed against the element.
     * @returns {*} Returns nothing.
     */
    this.trackElement = function(element, trackMethod, pipeline) {
        if (pipeline) {
            for (var i = 0; i < pipeline.length; i++) {
                if (BFElementHandlers[pipeline[i]](element, executable, trackMethod)) {
                    break;
                }
            }
        } else {
            var defaultHandler = BFElementHandlers.DefaultHandler;
            defaultHandler(element, executable, trackMethod);
        }
    };

    /**
     * Removes event listeners from each element defined in mappings.
     * @returns {*} Returns nothing.
     */
    this.disable = function() {
        for (var i = 0; i < this.events.length; i++) {
            var element = document.querySelector(this.events[i].selector);
            if (element) {
                element.removeEventListener(this.events[i].event, this.events[i].handler);
            }
        }
    };
}

/**
 * Direct events handler module for Buzzfeed data-binder.
 * @type {BFDomEventhandlerDirect}
 */
export default BFDomEventhandlerDirect;