import {
    isObject,
    isString,
    get,
} from "lodash";

"use strict";
/**
 * Custom BFA event model
 * @param {string} eventType - type of event such as "click", "video", "share", etc. Should be string
 * @param {string} eventName - name of event such as "end", "link", etc. Should be string
 * @param {string} eventLocation - location or container where event initiated such as breaking-news-bar,
 * time-machine, etc. Should be string
 * @param {string} eventDescription - some additional description of event. It have to be a string
 * @param {object} eventData - all needed additional/extended data. It have to be a plain object
 * @param {object} options - event options such as not to track in some integration or to track in any case
 * @constructor
 */
function BFEventInfo(eventType, eventName, eventLocation, eventDescription, eventData, options) {
    this.t = eventType || "";
    this.n = eventName || "";
    this.l = eventLocation || "";
    this.d = eventDescription || "";
    this.data = isObject(eventData) ? eventData : {};
    this.opt = isObject(options) ? options : {};
}

/**
 * Static method that tries to create EventInfo instance from object which was passed as an argument
 * @param {object} dataObj - object which contains information about an event.
 * @returns {*} - returns EventInfo in case of success or null in all other cases
 */
BFEventInfo.tryParse = function(dataObj) {
    var t = get(dataObj, "t", "");
    var n = get(dataObj, "n", "");
    if (!isString(t) || t.length === 0 ||
        !isString(n) || n.length === 0) {
        return null;
    }
    return new BFEventInfo(t, n,
        get(dataObj, "l", ""),
        get(dataObj, "d", ""),
        get(dataObj, "data", {}),
        get(dataObj, "opt", {}));
};
export default BFEventInfo;