"use strict";
/**
 * Represents affiliate link parser for BFAnalytics data binder
 * @constructor
 */
function BFAffiliateParser() {
    /**
     * Function that decodes a url via decodeURIComponent, if possible.
     * @param {String} url - affiliate link url
     * @returns {String} the decoded url
     */
    this.decodeURL = (url) => {
        if (!url) {
            return "";
        }
        let decoded;
        try {
            decoded = decodeURIComponent(url);
        } catch (e) {
            decoded = url;
        }
        return decoded;
    };

    /**
     * Function that begins parsing process.
     * @param {HtmlElement} element - Element from which affiliate info should be extracted.
     * @param {Object} data - event data associated with affiliate link.
     * @returns {*} object with "affiliate", "campaign", "price", "redirectUrl"
     */
    this.parse = (element, data) => {
        let {
            url
        } = data;
        let affiliate = this.getAffiliate(url);
        return {
            affiliate,
            campaign: this.getCampaign(url),
            price: this.getPrice(element),
            redirectUrl: this.getRedirect(url, affiliate),
        };
    };

    /**
     * Get affiliate associated with a given link.
     * @param {String} url - affiliate link url
     * @returns {String} an affiliate or the link domain by default
     */
    this.getAffiliate = (url) => {
        const patterns = {
            Amazon: /^https?:\/\/aax-us-east\.amazon-adsystem\.com/,
            ASOS: /^https?:\/\/[^\/]+\.asosconnect\.com.+/,
            AWIN: /^https?:\/\/www\.awin1\.com/,
            CJ: /^https?:\/\/www\.anrdoezrs\.net/,
            "Impact Radius": /^https?:\/\/[^\/]+\.sjv\.io/,
            Pepperjam: /^https?:\/\/www\.pjatr\.com/,
            Rakuten: /^https?:\/\/(click\.)?linksynergy(\.[^\.]+)?\.com/,
            ShareASale: /^https?:\/\/shareasale\.com/,
            Shopify: /^https?:\/\/ref\.buybuzzfeed\.com/,
        };
        let result;
        Object.keys(patterns).some((key) => {
            if (patterns[key].test(url)) {
                result = key;
            }
            return result;
        });
        return result || this.getDomain(url);
    };

    /**
     * Extract the campaign info from a given affiliate link.
     * @param {String} url - affiliate link url
     * @returns {String} campaign or undefined by default
     */
    this.getCampaign = (url) => {
        let match = this.decodeURL(url).match(/((afftrack|clickref|aff_sub|subid1|campid|u1|sid)(\/|=))([^(&|#)]+)/i);
        return match && match.length > 4 ? match[4] : undefined;
    };

    /**
     * Extract the closest price from the link element's subbuzz.
     * @param {HtmlElement} element - Element from which affiliate info should be extracted.
     * @returns {*} object with "value", "currency" or undefined by default
     */
    this.getPrice = (element) => {
        const currencyMap = {
            $: "USD",
            "£": "GBP",
        }
        // try to get price if any can be found in current subbuzz
        let result;
        let price;
        let currency;
        let currentNode = element;
        while (!currency && !/content-wrapper|\bsubbuzz\b/.test(currentNode.className)) {
            const parent = currentNode.parentNode;
            const priceMatch = parent && parent.innerText.match(/(\$|£)((?:\d|,)*\.?\d+)/);
            price = priceMatch && priceMatch.length > 2 && Number(priceMatch[2].replace(/,/g, ""));
            currency = priceMatch && priceMatch[1];
            currentNode = parent;
        }
        if (currency) {
            result = {
                value: price,
                currency: currencyMap[currency],
            };
        }
        return result;
    };

    /**
     * Extract the redirect URL from a given affiliate link.
     * @param {String} url - affiliate link url
     * @param {String} affiliate - affiliate result of this.getAffiliate
     * @returns {String} the url to which the affiliate link will redirect
     */
    this.getRedirect = (url, affiliate) => {
        let match;
        switch (affiliate) {
            case "Amazon":
            case "CJ":
                let copy = url;
                // Find final link embedded in `url`
                const linkAtEnd = /\/(https?:\/\/(.+))$/; // no lookbehind bc IE / Safari
                while ((match = copy.match(linkAtEnd)) && match.length > 1) {
                    copy = match[1];
                }
                if (copy !== url) {
                    return copy;
                }
                break;
            case "ShareASale":
                if ((match = url.match(/(\?|&)(urllink)=([^(&|$|#)]+)/)) && match.length > 3) {
                    return this.decodeURL(match[3]);
                }
                break;
            default:
                if ((match = url.match(/(\?|&)(murl|url|u|p)=([^(&|$|#)]+)/)) && match.length > 3) {
                    return this.decodeURL(match[3]);
                }
        }
    };

    /**
     * Extract the domain from a given affiliate link.
     * @param {String} url - affiliate link url
     * @returns {String} domain
     */
    this.getDomain = (url) => {
        const match = url.match(/^https?\:\/\/([^\/?#]+)(?:[\/?#]|$)/i);
        return match ? match[1] : undefined;
    };
}

/**
 * Affiliate link parser module of Buzzfeed analytics event binder.
 */
export default BFAffiliateParser;