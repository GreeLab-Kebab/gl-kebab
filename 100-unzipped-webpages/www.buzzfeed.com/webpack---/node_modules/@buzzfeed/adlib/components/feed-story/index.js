import {
    Application
} from 't3js';
import solid from '@buzzfeed/buzzblocks/js/services/solid/standalone';
import {
    AdUnit,
    multiTemplate,
    lazyRender,
    DFPMessageListener,
    programmatic,
    AdFormatProgrammaticResponsive,
    linkAdvertise
} from '../../core';
import bzfd from '../../js/services/bzfd';
import {
    AdDisplayCard
} from '../display-card-graphic';
import spotlightMixin from '../spotlight';
import {
    AdStoryNativeVideo
} from '../story-video';
import {
    AdFeedStoryBuzz
} from './buzz-format';
import {
    AdImpressionPixel
} from '../impression-pixel';


export default class AdFeedStory extends AdUnit
    .withMixins(lazyRender, DFPMessageListener, multiTemplate, programmatic, linkAdvertise)
    .withNewStyleMixins(spotlightMixin) {

        constructor() {
            super(...arguments);

            this.attachFormats(
                AdFeedStoryBuzz.getFormatDefinition(),
                AdDisplayCard.getFormatDefinition(),
                AdFormatProgrammaticResponsive.getFormatDefinition(),
                AdStoryNativeVideo.getFormatDefinition()
            );

            if (bzfd.isAdPost()) {
                this.attachFormats(AdImpressionPixel.getFormatDefinition());
            }

            this.configureSizes();
        }

        configureSizes() {
            const isDesktop = solid.isAny(['md', 'lg']);
            // Catches 320x50s on desktop for BFO
            if (isDesktop) {
                this.filterProgrammaticSizes({
                    min: bzfd.adSizes.PROGRAMMATIC_LEADERBOARD
                });
            }
        }

        setup() {
            super.setup();
            this.stopDFPListeningAfterLoad();
        }

        handleAdContentLoaded({
            data: ad
        }) {
            if (ad.type === 'programmatic') {
                this.element.classList.remove('card');
            }
            super.handleAdContentLoaded(...arguments);
        }
    }

Application.addModule('ad-feed-story', AdFeedStory.generateModule());