import {
    Application
} from 't3js';
import speedtrack from '@buzzfeed/buzzblocks/js/services/performance';
import {
    AdUnit,
    immediateRenderOnPartnerPosts,
    DFPMessageListener,
    multiTemplate,
    programmatic,
    linkAdvertise
} from '../../core';
import bzfd from '../../js/services/bzfd';
import {
    name as dimensionObserver
} from '../../js/behaviors/dimension-observer';
import {
    AdDisplayCard
} from '../display-card-graphic';
import {
    AdDisplayCardNativeVideo as AdVideoDisplayCard
} from '../display-card-video';
import {
    AdBigstoryBuzz
} from './buzz-format';
import {
    AdBFPPromo
} from '../bfp-promo';
import {
    AdImpressionPixel
} from '../impression-pixel';


class AdBigstory extends AdUnit.withMixins(
    immediateRenderOnPartnerPosts, DFPMessageListener, multiTemplate, programmatic, linkAdvertise
) {
    constructor() {
        super(...arguments);
        this.addBehavior(dimensionObserver);

        this.attachFormats(
            AdBigstoryBuzz.getFormatDefinition(),
            AdBFPPromo.getFormatDefinition(),
            AdDisplayCard.getFormatDefinition(),
            AdVideoDisplayCard.getFormatDefinition()
        );

        if (bzfd.isAdPost()) {
            this.attachFormats(AdImpressionPixel.getFormatDefinition());
        }

        // set the `BF_WIDGET_` id for compatibility with custom creatives and 3rd-party libs
        // that might be still using it;
        // not doing it at template level, see the note in the `infiniteWid` mixin docstring
        if (this.isEnabled()) {
            this.element.id = `BF_WIDGET_${this.config.wid}`;
        }
    }

    setup() {
        super.setup();
        this.stopDFPListeningAfterLoad();

        const wid = this.config.wid;
        this.on(`ad-dimensions-ready--${this.config.wid}`, ({
            data
        }) => {
            this.context.application.broadcast('ad-bigstory-ready', { ...data,
                wid,
                element: this.element
            });
        });
        this.on(`ad-has-exposed--${this.config.wid}`, ({
            data
        }) => {
            this.context.application.broadcast('ad-bigstory-exposed', { ...data,
                wid,
                element: this.element
            });
        });
    }

    render() {
        speedtrack.eventStart('mark_bigstory_load_duration');
        return super.render();
    }

    handleSlotRenderEnded() {
        super.handleSlotRenderEnded(...arguments);
        speedtrack.mark('mark_bigstory_loaded');
        speedtrack.eventEnd('mark_bigstory_load_duration');
    }

    makeInfiniteWid() {
        // since there may be 2 instances on a page (desktop and mobile at different page locations),
        // only update wid if the instance is not going to be destroyed
        if (this.isEnabled()) {
            super.makeInfiniteWid({
                sameIfFirst: true
            });
        }
    }

    handleAdContentLoaded({
        data: ad
    }) {
        if (ad.type === 'programmatic') {
            this.element.classList.remove('card');
        }

        if (ad.bfpFormatName) {
            this.element.classList.remove('card');
            this.element.classList.add(ad.bfpFormatName);
        }

        super.handleAdContentLoaded(...arguments);
    }
}

Application.addModule('ad-bigstory', AdBigstory.generateModule());


export {
    AdBigstory
};