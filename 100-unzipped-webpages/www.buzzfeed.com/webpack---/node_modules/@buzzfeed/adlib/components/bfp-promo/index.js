import {
    Application
} from 't3js';
import {
    loadScript
} from '@buzzfeed/bf-utils';
import bzfd from '../../js/services/bzfd';
import {
    AdFormat
} from '../../core';
import formatTemplateDefault from '../../core/partials/format-simple.html';
import bfpPromoTemplate from './index.html';


// namespace for easier testing
const util = {
    loadScript
};


const ELIGIBLE_BFP_FORMATS = [
    'bfp_shopping_showcase',
    'bfp_native_instream_video',
];
// For testing purposes
if (!bzfd.isProd) {
    ELIGIBLE_BFP_FORMATS.push(
        'bfp_pettable_image'
    );
}


class AdBFPPromo extends AdFormat {
    constructor() {
        super(...arguments);
        this.template = bfpPromoTemplate;
    }

    /**
     * makes sure BFP unit is white listed before
     * even trying to load it in
     * @returns
     * @memberof AdBFPPromo
     */
    buildFormat() {
        const {
            bfpScript,
            bfpFormatName
        } = this.ad;
        const isEligibleFormat = ELIGIBLE_BFP_FORMATS.indexOf(bfpFormatName) > -1;
        if (!bfpScript || !bfpFormatName || !isEligibleFormat) {
            this.stop();
            return;
        }
        this.bfpFormatName = bfpFormatName;
        util.loadScript(bfpScript)
            .then(() => super.buildFormat(...arguments))
            .then(() => this.initBFP())
            .catch((err) => {
                console.error(err);
                this.stop();
            });
    }

    /**
     * initializes BFP script in the window
     * and loads the appropriate a data inclided from the ad
     * @returns {void}
     * @memberof AdBFPPromo
     */
    initBFP() {
        const windowBfp = window[this.bfpFormatName];
        windowBfp.init({
            element: this.element,
            config: {
                data: this.ad.bfpData,
                context: {
                    experimentVariant: this.experimentVariant
                }
            },
            broadcast: () => {}
        });
        this.setupDFPClickTracker();
        this.context.application.broadcast(`ad-content-rendered-${this.config.wid}`);
    }

    /**
     * prepends any links w/in BFP with a DFP click tracker
     * Assumes the click-thru URL that normally is provided in DFP
     * is also provided appropriately in the BFP Unit in some fashion
     * @memberof AdBFPPromo
     */
    setupDFPClickTracker() {
        const {
            dfpClickTracker,
            clickThroughUrl
        } = this.ad;
        let bfpLinks = this.element.querySelectorAll('a');
        bfpLinks.forEach((linkEl) => {
            // use the original href or `clickThroughUrl` if it's not set
            // (in which case the *attribute* will be empty, while the *property* will be the same as the page URL)
            const originalHref = encodeURIComponent(linkEl.getAttribute('href') ? linkEl.href : clickThroughUrl);
            linkEl.href = `${dfpClickTracker}${originalHref}`;
            linkEl.target = '_blank';
        });
    }

    stop() {
        // to collapse wireframes and stop the parent module too
        this.context.application.broadcast(`ad-content-error-${this.config.wid}`);
        super.stop();
    }
}

AdBFPPromo.formatType = 'bfp_promo';
AdBFPPromo.moduleTemplate = formatTemplateDefault;
Application.addModule(`ad-format-${AdBFPPromo.formatType}`, AdBFPPromo.generateModule());

export {
    AdBFPPromo
};