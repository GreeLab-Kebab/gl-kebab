import {
    Application
} from 't3js';
import {
    name as viewable
} from '@buzzfeed/buzzblocks/js/behaviors/viewable';
import bzfd from '../../js/services/bzfd';
import solid from '@buzzfeed/buzzblocks/js/services/solid/standalone';
import {
    getUniqueEventName
} from '@buzzfeed/buzzblocks/js/services/util/standalone';
import {
    AdUnit,
    asyncInit,
    deferredRender,
    DFPMessageListener,
    multiTemplate,
    programmatic
} from '../../core';
import spotlightMixin from '../spotlight';
import AwarenessFormat from './awareness-format';
import {
    name as awarenessSticky
} from './sticky';
import {
    AdImpressionPixel
} from '../impression-pixel';


class AwarenessUnit extends AdUnit
    .withMixins(asyncInit, deferredRender, DFPMessageListener, multiTemplate, programmatic)
    .withNewStyleMixins(spotlightMixin) {

        constructor() {
            super(...arguments);
            this.addBehavior(awarenessSticky);
            this.removeBehavior(viewable); // to avoid conficts with `deferredRender` mixin
            this.attachFormats(AwarenessFormat.getFormatDefinition());

            if (bzfd.isAdPost()) {
                this.attachFormats(AdImpressionPixel.getFormatDefinition());
            }
        }

        setupSizes() {
            super.setupSizes();
            const breakpoint = solid.getBreakPoint();
            if (breakpoint === 'sm') {
                this.filterProgrammaticSizes({
                    max: bzfd.adSizes.PROGRAMMATIC_LEADERBOARD
                });
            } else if (breakpoint === 'md' || breakpoint === 'lg') {
                this.filterProgrammaticSizes({
                    min: bzfd.adSizes.PROGRAMMATIC_LEADERBOARD
                });
            }
        }

        setup() {
            const {
                wid
            } = this.config;
            this.on(`ad-content-ready-${wid}`, () => {
                this.element.classList.add('ad--rendered');
            });
            this.on(`ad-wireframe-fadein-finish-${wid}`, () => {
                // initiates sticky behavior
                this.context.application.broadcast(
                    getUniqueEventName('ad-reveal', this.element), {
                        type: this.ad.type,
                        isSticky: this.ad.isSticky || false
                    }
                );
            });
            return super.setup();
        }
    }

Application.addModule('ad-awareness', AwarenessUnit.generateModule());