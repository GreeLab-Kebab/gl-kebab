import {
    getUniqueEventName
} from '@buzzfeed/buzzblocks/js/services/util/standalone';
import {
    name as adVideoTracking
} from '../../js/behaviors/video-tracking';
import {
    AdFormat
} from '../base/format';
import {
    DFPMessageListener
} from '../mixins/DFPMessageListener';


const util = {
    getUniqueEventName
};


export const mixinNativeVideoFormat = (Format) => class extends Format.withMixins(DFPMessageListener) {
    constructor() {
        super(...arguments);
        this.behaviors.push(adVideoTracking);
    }

    setup() {
        super.setup();

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-quartile', this.element),
            this.reportQuartile
        );

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-view', this.element),
            this.reportPlayback
        );

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-replay', this.element),
            this.reportReplay
        );

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-pause', this.element),
            this.reportPause
        );

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-volumechange', this.element),
            this.reportVolumeChange
        );

        this.addMessageHandler(
            util.getUniqueEventName('ad-native--video-loadedmeta', this.element),
            this.reportLoadedMetaData
        );
    }

    reportLoadedMetaData({
        data: adData
    }) {
        const {
            duration
        } = adData;
        // for sticky sidebar parent module
        this.context.application.broadcast(`ad-native-video-ready-${this.config.wid}`, {
            duration
        });
        this.context.application.broadcast(`ad-content-rendered-${this.config.wid}`);

        this.context.application.broadcast(
            util.getUniqueEventName('dfp-native-video:loaded-metadata', this.element), adData
        );
    }

    reportQuartile({
        data: adData
    }) {
        this.context.application.broadcast(`ad-native-video-quartile--${this.config.wid}`);
        if (adData.quartile === 4) {
            this.context.application.broadcast(`ad-native-video-ended--${this.config.wid}`);
        }

        this.context.application.broadcast(
            util.getUniqueEventName('native-video-embed:playback-quartile', this.element), adData
        );
    }

    reportReplay({
        data: adData
    }) {
        this.context.application.broadcast(
            util.getUniqueEventName('dfp-native-video:replay', this.element), adData
        );
    }

    reportPlayback({
        data: adData
    }) {
        this.context.application.broadcast(
            util.getUniqueEventName('dfp-native-video:play', this.element), adData
        );
    }

    reportPause({
        data: adData
    }) {
        this.context.application.broadcast(`ad-native-video-pause--${this.config.wid}`);
        this.context.application.broadcast(
            util.getUniqueEventName('dfp-native-video:pause', this.element), adData
        );
    }

    reportVolumeChange({
        data: adData
    }) {
        this.context.application.broadcast(
            util.getUniqueEventName('dfp-native-video:volumechange', this.element), adData
        );
    }

    getTemplateData() {
        const templateData = Object.assign({}, this.ad);
        templateData.adPos = this.config.adPos; // for bfa tracking
        return templateData;
    }

    destroy() {
        this.stopLoadedListening();
        super.destroy();
    }
};


export class AdFormatNativeVideo extends AdFormat.withNewStyleMixins(mixinNativeVideoFormat) {
    // must be the same as `type` property of DFP event data
    static formatType = 'dfp_native_video'
}