import Viewable from '@buzzfeed/buzzblocks/js/behaviors/viewable/standalone';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import bzfd from '../../js/services/bzfd';
import {
    getUniqueEventName,
    moduleIsInContext
} from '@buzzfeed/buzzblocks/js/services/util/standalone';


// namespace for easier testing
const util = {
    getUniqueEventName,
    moduleIsInContext
};


function prefetch() {
    abeagle.getExperimentVariant('ADS-1053-prefetch2', {
            rejectErrors: false
        })
        .then(variant => {
            let fetch = /^(early_fetch|render_late|combo)$/.test(variant);
            // when prefetching, we display an ad right away and leave it to DFP's
            // code to determine when the ad will actually be fetched and rendered
            if (fetch) {
                this.render();
            }
        });
}

function lazyLoad() {
    this.on(util.getUniqueEventName('viewport-active', this.element), this.render);
    prefetch.call(this);
}

const lazyRender = function(proto) {
    return {
        setup() {
            proto.setup.call(this, ...arguments);
            lazyLoad.call(this);
        }
    };
};


/**
 * Waits for all the promises in `renderQueue` to resolve,
 * then starts watching when the element becomes visible in viewport and calls `render`.
 *
 * Use `deferRender` to add more promises to the queue (make sure to call before `deferredRender#setup`)
 */
const deferredRender = function(proto) {
    return {
        setup() {
            let resolveInitialized;
            const initialized = new Promise((resolve) => resolveInitialized = resolve);
            this.deferRender(initialized);
            this.on(`ad-init-${this.config.wid}`, resolveInitialized);

            Promise.all(this.renderQueue).then(() => {
                this.viewable = new Viewable(this.context);
                this.viewable.init();
                lazyLoad.call(this);
            });

            return proto.setup.call(this);
        },

        destroy() {
            if (this.viewable) {
                this.viewable.destroy();
                delete this.viewable;
            }
            proto.destroy.call(this);
        },

        /*
         * @param {...Promise} promise - a promise that to should be added to the queue
         */
        deferRender(...promises) {
            this.renderQueue = this.renderQueue || [];
            this.renderQueue.push(...promises);
        }
    };
};


const immediateRender = function(proto) {
    return {
        setup() {
            proto.setup.call(this, ...arguments);

            this.render();
        }
    };
};


const immediateRenderOnPartnerPosts = function(proto) {
    return {
        setup() {
            this.on('buzz-context-changed', () => {
                if (util.moduleIsInContext(this.element)) {
                    this.render();
                }
            });
            proto.setup.call(this, ...arguments);

            if (bzfd.isAdPost(this.element) && !document.querySelector('.infinite-posts-enabled')) {
                this.render();
            } else {
                lazyLoad.call(this);
            }
        }
    };
};


export {
    lazyRender,
    deferredRender,
    immediateRender,
    immediateRenderOnPartnerPosts
};