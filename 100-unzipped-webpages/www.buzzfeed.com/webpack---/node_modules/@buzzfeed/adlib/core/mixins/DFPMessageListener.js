import {
    getUniqueEventName
} from '@buzzfeed/buzzblocks/js/services/util/standalone';


/**
 * Listens to `MessageEvent`s sent from ad iframes by native ads.
 * If event data's `wid` matches the unit's `wid`,
 * broadcasts the event prefixed with `ad-native--` along with ad data to self and own behaviors.
 *
 * @typedef {Object} NativeMessage
 * @property {String} source - always 'dfpNativeTemplate'
 * @property {String} action - what the event notifies about. Example: 'loaded'
 * @property {Object} data - creative data
 * @property {String} data.type - unique template identifier. Example: 'display_card'
 * @property {Number|String} data.wid - ad unit wid
 * @property {String} data.pos - ad unit position/page location
 * @property {String[]} [data.clickTrackers] - 3rd-party click trackers
 * @property {String[]} [data.impressionTrackers] - 3rd-party impression trackers
 * @property {String} [data.lineItemId] - DFP line item id
 * @property {String} [data.creativeId] - DFP creative id
 * @property {*} - other template-specific properties
 */
const DFPMessageListener = function(proto) {
    return {
        setup() {
            proto.setup.call(this);
            this._onPostMessageBound = this.onPostMessage.bind(this);
            window.addEventListener('message', this._onPostMessageBound);
            this.stopDFPListeningIfNonNative();
        },

        destroy() {
            this.stopDFPListening();
            proto.destroy.call(this);
        },

        /**
         * Process postmessages from external ad template.
         * @param {Object} event - message event object.
         * @return {void}
         */
        onPostMessage(event) {
            if (this._isBlockedOrigin(event)) {
                return;
            }
            this.processPostMessage(event);
        },

        /**
         * Process postmessages from iframes in current page
         * @param {Object} event - message event object.
         * @return {void}
         */
        processPostMessage(event) {
            let {
                source
            } = event.data;
            if (source === 'dfpNativeTemplate') {
                this.processDFPMessage(event);
            }
        },

        /**
         * Process postmessages from external ad template.
         * @param {Object} event - message event object.
         * @return {void}
         */
        processDFPMessage(event) {
            const {
                wid
            } = this.config;
            let {
                source,
                action,
                data: ad
            } = event.data;
            if (ad.type !== 'civicscience' &&
                (source !== 'dfpNativeTemplate' ||
                    String(ad.wid) !== String(wid) ||
                    !action)
            ) {
                return;
            }
            ad = this._processPostMessageData(ad);
            this.context.application.broadcast(getUniqueEventName('ad-native--' + action, this.element), ad);
            this.context.application.broadcast(`ad-native--${action}-${wid}`, ad);
            this.fire('ad-native--' + action, ad);
        },


        /**
         * returns true if the origin doesn't match what's expected
         * @param  {String}  event.origin - origin w/ event object
         * - checking against userAgent for MS Edge, b/c MS Edge sends through
         * - `javascript:` as origin in the event object
         * @return {Boolean}
         */
        _isBlockedOrigin(event) {
            if (!event.origin) {
                return true;
            }
            let isMSEdge = navigator.userAgent.match(/Edge/i) && navigator.userAgent.match(/Windows/i);
            return !/(?:buzzfeed(|news)\.(?:com|io)|tasty\.co|googlesyndication\.com)/.test(event.origin) &&
                (event.origin.indexOf('javascript') === -1 && !isMSEdge);
        },

        _processPostMessageData(data) {
            for (let field in data) {
                if (/Encoded$/.test(field)) {
                    let rename = field.replace('Encoded', '');
                    data[rename] = decodeURIComponent(data[field]);
                }
            }
            for (let field in data) { // eslint-disable-line guard-for-in
                let value = data[field];
                if (typeof value === 'string' && !/Encoded$/.test(field)) {
                    // remove leading and trailing whitespaces, escaped quotes, repeating whitespaces
                    data[field] = value.trim()
                        .replace(/\\('|â€™)/g, '$1')
                        // so the new line char is not removed in the `replace` below;
                        // components can later replace it with `<br>` when applicable
                        .replace(/\s*\n\s*/g, '\n')
                        .replace(/\s{2,}/g, ' ');
                }
            }
            return data;
        },

        stopDFPListening() {
            window.removeEventListener('message', this._onPostMessageBound);
            delete this._onPostMessageBound;
        },

        stopDFPListeningIfNonNative() {
            this.on(`ad-content-ready-${this.config.wid}`, ({
                data: ad
            }) => {
                if (ad.type === 'programmatic' || ad.type === 'userwidget') {
                    this.stopDFPListening();
                }
            });
        },

        stopDFPListeningAfterLoad() {
            this.on(`ad-native--loaded-${this.config.wid}`, this.stopDFPListening);
        }
    };
};


export {
    DFPMessageListener
};