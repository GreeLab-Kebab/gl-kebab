import ads from '../ads';


// using old-style class/inheritance because babel has issues with inheriting from built-in classes
function Disabled() {
    Error.apply(this, arguments);
}
Disabled.prototype = Object.create(Error);
Disabled.prototype.constructor = Disabled;


/**
 * Use when `isEnabled` is asynchronous (e.g. when you need to check the status of an ABeagle flag/experiment).
 * Do *not* use in conjunction with `lazyRender` or `immediateRender` as they are syncronous
 * and can call `render` before `init` resolves.
 * Safe for use with `deferredRender`.
 */
function asyncInit() {
    return {
        init() {
            const {
                wid
            } = this.config;

            if (!this.isFirstInit()) {
                return Promise.resolve();
            }
            // add a `data-instance-id` attribute to mark the element as initialized
            this.element.dataset.instanceId = this.instanceId;

            return Promise.resolve(this.isEnabled())
                .then((isEnabled) => {
                    if (!isEnabled) {
                        throw new Disabled();
                    }
                })
                .then(() => {
                    // handle broadcasts
                    this.startMessaging();
                    this.addMessageHandler(`ad-wireframe-collapse-finish-${wid}`, this.stop);
                    this._handleSlotRenderEndedBound = this.handleSlotRenderEnded.bind(this);
                    ads.addSlotRenderEndedHandler(wid, this._handleSlotRenderEndedBound);
                })
                .then(() => this.setup())
                .then(() => {
                    this.context.application.broadcast(`ad-init-${wid}`);
                })
                .catch((reason) => {
                    if (reason instanceof Disabled) {
                        return this.stop();
                    }
                    return Promise.reject(reason);
                });
        }
    };
}


export {
    asyncInit
};