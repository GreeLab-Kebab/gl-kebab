import {
    closest
} from '@buzzfeed/buzzblocks/js/services/dom';
import prepareTemplate from '@buzzfeed/buzzblocks/js/services/nunjucks-env';
import bzfd from '../../js/services/bzfd';
import {
    AdUnit as AdBase
} from './base';


/**
 * @see docstring to the `multiTemplate` mixin
 */
class AdFormat extends AdBase {
    /**
     * @returns {Object} - partial type (i.e. `type` property of DFP event data) and module template
     */
    static getFormatDefinition() {
        return {
            'type': this.formatType,
            'template': this.moduleTemplate
        };
    }

    constructor() {
        super(...arguments);
        this.formatType = this.constructor.formatType;
        // no `viewable`, `ad-content-notifier`, `ad-tracking`, `ad-wireframe` behaviors by default
        this.behaviors = [];
        this.rootElement = closest(this.element, '.js-ad');
        this.element.classList.add('js-ad-format', `js-ad-format-${this.config.wid}`);
    }

    setup() {
        super.setup();
        this.on(`ad-data-loaded-${this.config.wid}`, this.onAdDataLoaded);
    }

    // do not request ad from DFP as it has already been done by the parent module
    render() {}

    // do nothing as the wid has already been updated by the parent module
    makeInfiniteWid() {}

    // do nothing as the a11y attributes need to be present only on the parent element
    addA11yMarkup() {}

    destroy() {
        this.stopLoadedListening();
        super.destroy();
    }

    onAdDataLoaded({
        data
    }) {
        this.stopLoadedListening();
        if (this.formatType !== data.type) {
            this.stop();
            return;
        }
        this.ad = data;
        this.buildAdPartial();
    }

    stopLoadedListening() {
        this.off(`ad-data-loaded-${this.config.wid}`, this.onAdDataLoaded);
    }

    buildFormat() {
        const container = this.formatContainer || this.element;
        const html = prepareTemplate(this.template).render(this.getTemplateData());
        this.element.classList.remove('js-hidden');
        this.rootElement.classList.add(`ad-flexible--${this.formatType}`, `ad-flexible--${this.ad.creativeId}`);
        container.insertAdjacentHTML('beforeend', html);

        if (bzfd.isE2ETest) {
            this.element.dataset.dfpClickTracker = this.ad.dfpClickTracker;
        }
    }

    buildAdPartial() {
        return this.buildFormat();
    }

    /**
     * Override in derived classes if you need to modify what will be passed to `template.render`
     * @returns {Object} - template variables to be passed to `template.render`
     */
    getTemplateData() {
        return this.ad;
    }
}

export {
    AdFormat
};