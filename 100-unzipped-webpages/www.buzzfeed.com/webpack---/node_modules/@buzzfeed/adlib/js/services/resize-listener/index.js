import {
    throttle
} from 'lodash';

let identifier = 0;
let listeners = {};

/**
 * Listens to resize event with given throttling.
 * @param {Object} options - customization parameters.
 * @param {Number} options.throttleTimeout - milliseconds to wait after resize event
 * @param {Element} options.parent - element to listen to resize event from (defaults to window)
 * before firing a callback.
 * @constructor
 */
class ResizeListener {
    constructor({
        throttleTimeout,
        parent
    }) {
        this.callbacks = {};
        this.target = parent ? parent : window;
        this._triggerThrottled = throttle(() => this.trigger(), throttleTimeout);
        this.target.addEventListener('resize', this._triggerThrottled);
    }
    /**
     * Adds resize event handler.
     * @param {Function} cb - function to fire on resize event.
     * @return {Number} - handler identifier.
     */
    add(cb) {
        this.callbacks[++identifier] = cb;
        return identifier;
    }
    /**
     * Removes resize event handler.
     * @param {Number} id - handler identifier.
     * @return {void}
     */
    remove(id) {
        delete this.callbacks[id];
    }
    /**
     * Triggers resize event handler.
     * @param {Number} id - handler identifier.
     * @return {void}
     */
    trigger(id) {
        if (this.callbacks.hasOwnProperty(id)) {
            this.callbacks[id]();
        } else {
            for (let key in this.callbacks) {
                if (this.callbacks.hasOwnProperty(key)) {
                    this.callbacks[key]();
                }
            }
        }
    }

    destroy() {
        this.target.removeEventListener('resize', this._triggerThrottled);
        delete this.target;
        delete this.callbacks;
        delete this._triggerThrottled;
    }

    get isEmpty() {
        return Object.keys(this.callbacks).length === 0;
    }
}

export default {
    /**
     * Subscribes to resize event.
     * @param {Object} options - parameters for resize subscription.
     * @param {Number} options.throttleTimeout=350 - milliseconds to wait after resize event
     * before firing a callback.
     * @param {Function} options.callback - function to call on resize event.
     * @return {Number} - handler identifier.
     */
    add({
        throttleTimeout = 350,
        parent,
        callback
    }) {
        let listener = listeners[throttleTimeout];
        if (!listener) {
            listener = listeners[throttleTimeout] = new ResizeListener({
                throttleTimeout,
                parent
            });
        }

        const id = listener.add(callback);
        listener.trigger(id);
        return id;
    },
    /**
     * Removes resize event handler.
     * @param {Number} id - handler identifier.
     * @return {void}
     */
    remove(id) {
        Object.keys(listeners).forEach((key) => {
            const listener = listeners[key];
            listener.remove(id);
            if (listener.isEmpty) {
                listener.destroy();
                delete listeners[key];
            }
        });
    }
};