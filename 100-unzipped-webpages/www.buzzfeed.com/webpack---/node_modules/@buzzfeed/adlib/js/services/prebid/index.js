import {
    loadScript
} from '@buzzfeed/bf-utils';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import {
    Disabled
} from '../../../core/error';
import prebidTracking from '../prebid-tracking';
import prebidPriceConfig from '../../config/prebid-price';
import {
    prebidTimeout as timeout
} from '../../config/header-bid';


// namespace for easier testing
const util = {
    loadScript
};


const FEATURE_FLAG = 'ads_prebid';

const LIB_SRC = 'static/js/advertiser/prebid.js';

let _initializing;

const fbBidTracking = function() {
    let fbq = window.fbq;
    let pbjs = window.pbjs || {};
    abeagle.isOn('facebook-affiliate-tracking')
        .then((isOn) => {
            if (!isOn || !fbq) {
                return;
            }
            let bids = pbjs.getHighestCpmBids();
            if (bids.length) {
                let cpms = bids.map(function(bid) {
                    return bid.cpm;
                });
                let totalBids = cpms.reduce((a, b) => a + b);
                fbq('track', 'CompleteRegistration', {
                    currency: 'USD',
                    value: totalBids
                });
            }
        });
};

export const _prebidTimeout = timeout;


export const _prebidConfig = {
    enableSendAllBids: true,
    priceGranularity: prebidPriceConfig,
    userSync: {
        iframeEnabled: true,
        syncDelay: 5000,
        enabledBidders: ['openx', 'rubicon'],
        syncsPerBidder: 4
    },
    consentManagement: {
        cmpApi: 'iab',
        timeout: 5000,
        allowAuctionWithoutConsent: false
    },
    bidderSequence: 'fixed'
};


export class PrebidInitializer {
    constructor(bzfd, prebidUnit) {
        this._bzfd = bzfd;
        this._prebidUnit = prebidUnit;
    }

    /**
     * @returns {Promise<BidRequester?>}
     */
    init() {
        if (_initializing) {
            return _initializing;
        }

        return _initializing = this._checkEligibility()
            .then(() => this._createScript())
            .then((pbjs) => {
                if (!pbjs) {
                    return null;
                }
                this._enqueueConfiguration(pbjs);
                window.addEventListener('beforeunload', () => fbBidTracking());
                // eslint-disable-next-line no-use-before-define
                return new BidRequester({
                    pbjs,
                    prebidUnit: this._prebidUnit
                });
            })
            .catch((error) => {
                if (!(error instanceof Disabled)) {
                    console.error(error);
                    return Promise.reject(error);
                }
                return null;
            });
    }

    _checkEligibility() {
        const isAppFallback = /\bs=mobile_app\b/.test(window.location.search);
        if (isAppFallback) {
            return Promise.reject(new Disabled());
        }
        return abeagle.isOn(FEATURE_FLAG)
            .then((isOn) => isOn ? Promise.resolve(true) : Promise.reject(new Disabled()));
    }

    _createScript() {
        const prebidSrc = `${this._bzfd.webRoot}/${LIB_SRC}`;
        return util.loadScript(prebidSrc).then(() => window.pbjs);
    }

    _enqueueConfiguration(pbjs) {
        pbjs.que.push(() => {
            pbjs.setConfig(_prebidConfig);

            // Load eligible ad units defined in global var
            pbjs.addAdUnits(this._bzfd.prebidUnits || []);
            pbjs.bidderSettings = {
                rubicon: {
                    adserverTargeting: [{
                        key: 'hb_db_rubicon',
                        val: function(bidResponse) {
                            var dealTier;
                            if (bidResponse.adserverTargeting && bidResponse.adserverTargeting.rpfl_13062) {
                                dealTier = bidResponse.adserverTargeting.rpfl_13062;
                            } else if (bidResponse.rubiconTargeting && bidResponse.rubiconTargeting.rpfl_13062) {
                                dealTier = bidResponse.rubiconTargeting.rpfl_13062;
                            } else {
                                return false;
                            }
                            return dealTier;
                        }
                    }]
                }
            };
            prebidTracking.init();
        });
    }
}


export class BidRequester {
    constructor({
        pbjs,
        prebidUnit
    }) {
        this.pbjs = pbjs;
        this._prebidUnit = prebidUnit;
    }
    /**
     * @param {AdSlotParameters} options - ad slot configuration
     * @returns  {Promise<Targeter?>}
     */
    requestBid(ads, options) {
        if (!options.viewability) {
            return Promise.resolve(null);
        }
        // add dynamically loaded ads to prebid auction
        let elementId = ads.getSlotContainerId(options.wid);
        this._checkAdUnit(elementId, options);
        prebidTracking.setData(options);

        // request bids
        return new Promise((resolve) => {
            this.pbjs.que.push(() => {
                this.pbjs.requestBids({
                    timeout: _prebidTimeout,
                    adUnitCodes: [elementId],
                    bidsBackHandler: resolve,
                });
            });
        }).then(() => new Targeter(this.pbjs, elementId)); // eslint-disable-line no-use-before-define
    }
    _checkAdUnit(elementId, options) {
        if (!this.pbjs.adUnits) {
            return;
        }

        for (let unit of this.pbjs.adUnits) {
            if (unit.code === elementId) {
                return;
            }
        }
        this.pbjs.addAdUnits(this._prebidUnit.generateUnit(options));
    }
}


export class Targeter {
    constructor(pbjs, elementId) {
        this.pbjs = pbjs;
        this.elementId = elementId;
    }

    /**
     * @returns {Void}
     */

    setResponseTargeting() {
        let bids = this.pbjs.getBidResponsesForAdUnitCode(this.elementId).bids;
        if (bids.length) {
            window.googletag.pubads().getSlots().forEach(slot => {
                if (this.elementId === slot.getSlotElementId()) {
                    bids.forEach(bid => {
                        slot.setTargeting('hb_rt_' + bid.bidder, bid.timeToRespond);
                    });
                }
            });
        }
    }
    /**
     * @returns {Void}
     */
    setTargeting() {
        this.setResponseTargeting();
        this.pbjs.setTargetingForGPTAsync(this.elementId);
    }
}