// GDPR Helper
import gdpr from '@buzzfeed/buzzblocks/js/services/gdpr';
import {
    once
} from '@buzzfeed/bf-utils';


const service = {
    /**
     * checks against BF cookies if needs consent or
     * if has the qp for dev purposes.
     * @return {Boolean} true if BF needs consent
     */
    get needsConsent() {
        return gdpr.needsConsent;
    },
    /**
     * gets from window.__cmp to check if user has consented to ads purpose
     * @return {Promise} a promise that returns a bool
     */
    fetchAdPurposeConsent: once(() =>
        gdpr.init()
        // 3 = ad purpose consent
        .then(() => gdpr.getPublisherConsents([3]))
        .then(({
            data
        }) => data.standardPurposeConsents[3])
        .catch(() => false)
    ),

    fetchGoogleConsent: once(() =>
        gdpr.init()
        .then(() => gdpr.getGooglePersonalization())
        .then(({
            data
        }) => data.googlePersonalizationData.consentValue === 1)
        .catch(() => false)
    ),

    /**
     * checks if user has consented. return true in areas where
     * we dont need to have consent from the user (non-EU)
     * @return {Boolean} true if user has consented
     */
    hasConsented() {
        // if we don't need consent from them, just let them through
        if (!service.needsConsent) {
            return Promise.resolve(true);
        }
        return service.fetchAdPurposeConsent();
    },

    /**
     * check if user has consented to google specificially.
     * similar to hasConsented, but fallbacks to typical ad purpose
     * if not using the QC Choice CMP
     */
    hasConsentedGoogle() {
        if (!service.needsConsent) {
            return Promise.resolve(true);
        }
        if (!gdpr.getGooglePersonalization) {
            return service.fetchAdPurposeConsent();
        }
        return service.fetchGoogleConsent();
    }
};

export default service;