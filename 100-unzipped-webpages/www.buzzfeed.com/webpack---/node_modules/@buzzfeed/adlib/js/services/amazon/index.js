import {
    loadScript
} from '@buzzfeed/bf-utils';
import abeagle from '@buzzfeed/buzzblocks/js/services/abeagle';
import {
    Disabled
} from '../../../core/error';
import {
    amazonTimeout as timeout
} from '../../config/header-bid';
import sizeUtils from '../size';


// namespace for easier testing
const util = {
    loadScript
};


const FEATURE_FLAG = 'ads_amazon_tam';

const LIB_SRC = 'static/js/advertiser/amazon.js';

let _initializing;


export class AmazonInitializer {
    constructor(bzfd) {
        this._bzfd = bzfd;
    }

    /**
     * Initialize amazon service
     * @returns {Promise<BidRequester?>}
     */
    init() {
        if (_initializing) {
            return _initializing;
        }

        return _initializing = this._checkEligibility()
            .then(() => this._createScript())
            .then((apstag) => {
                if (!apstag) {
                    return null;
                }
                this._configure(apstag, this._bzfd);
                return new BidRequester(); // eslint-disable-line no-use-before-define
            })
            .catch((error) => {
                if (!(error instanceof Disabled)) {
                    console.error(error);
                    return Promise.reject(error);
                }
                return null;
            });
    }

    _checkEligibility() {
        const isAppFallback = /\bs=mobile_app\b/.test(window.location.search);
        if (isAppFallback) {
            return Promise.reject(new Disabled());
        }
        return abeagle.isOn(FEATURE_FLAG)
            .then((isOn) => isOn ? Promise.resolve(true) : Promise.reject(new Disabled()));
    }

    _createScript() {
        const _amznSrc = `${this._bzfd.webRoot}/${LIB_SRC}`;
        return util.loadScript(_amznSrc).then(() => window.apstag);
    }

    _formatSection(section) {
        if (!section) {
            section = 'NoSection';
        }
        // remove slash from section, e.g. "As/Is" -> "AsIs"
        if (section.match('/')) {
            section = section.replace('/', '');
        }

        return section;

    }
    _configure(apstag, bzfd) {
        const country = bzfd.localizationCountry || '';
        const section = bzfd.pageSection || '';

        apstag.init({
            pubID: country === 'ja-jp' ? '3675' : '3713',
            adServer: 'googletag',
            params: {
                si_section: this._formatSection(section)
            },
            gdpr: {
                cmpTimeout: 50
            }
        });
    }
}

export class BidRequester {
    /**
     * @param {AdSlotParameters} options - ad slot configuration
     * @returns {Promise<Targeter?>}
     */
    requestBid(ads, options) {
        const slot = this._getBidSlot(ads, options);
        if (!slot) {
            return Promise.resolve(null);
        }
        // request bids
        return new Promise((resolve) => {
            window.apstag.fetchBids({
                slots: [slot],
                timeout: timeout
            }, resolve);
        }).then(() => new Targeter()); // eslint-disable-line no-use-before-define
    }
    /**
     * Builds the TAM required slot for bidsConfig.slot
     * @param {AdSlotParameters} options - ad slot configuration
     * @returns {Object?} ad slot or null
     */
    _getBidSlot(ads, options) {
        const {
            wid,
            size
        } = options;
        const programmaticSizes = sizeUtils.getProgrammatic(size);
        if (programmaticSizes.length === 0) {
            return null;
        }

        return {
            'slotID': ads.getSlotContainerId(wid),
            'slotName': ads.buildAdCall(options),
            'sizes': programmaticSizes
        };
    }
}

export class Targeter {
    /**
     * @returns {Void}
     */
    setTargeting() {
        window.apstag.setDisplayBids();
    }
}