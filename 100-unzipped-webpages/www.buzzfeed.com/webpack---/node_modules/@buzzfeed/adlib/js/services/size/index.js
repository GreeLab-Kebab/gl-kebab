import {
    unionBy,
    differenceBy
} from 'lodash';
import bzfd from '../bzfd';


export default {
    /**
     * Returns an array of ad unit sizes with the specified size(s) added;
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @param {...Number[2]} size - slot size, a [width, height] pair;
     *   preferred way is to use sizes from `bzfd.adSizes`
     * @returns {Array}
     * @example
     * config.size = size.add(config.size, bzfd.adSizes.PROGRAMMATIC_TILE_1to1, bzfd.adSizes.PROGRAMMATIC_VERTICAL)
     */
    add(sizeInitial, ...sizes) {
        // using `JSON.stringify` to compare sizes since they're [width, height] arrays and cannot be compared by value
        return unionBy(sizeInitial, sizes, JSON.stringify);
    },

    /**
     * Returns an array of ad unit sizes without the specified size(s);
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @param {...Number[2]} size - slot size, a [width, height] pair;
     *   preferred way is to use sizes from `bzfd.adSizes`
     * @returns {Array}
     * @example
     * config.size = size.exclude(config.size, bzfd.adSizes.PROGRAMMATIC_HORIZONTAL_8to1)
     */
    exclude(sizeInitial, ...sizes) {
        return differenceBy(sizeInitial, sizes, JSON.stringify);
    },

    /**
     * Returns an array of programmatic sizes that match the specified condition;
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @param {Function} predicate - function invoked on each programmatic size to test whether it mathes the condition
     * @returns {Array}
     */
    _filterProgrammatic(sizeInitial, predicate = () => true) {
        const programmaticSizes = bzfd.programmaticSizes.map(JSON.stringify);
        return sizeInitial.filter((size) => {
            if (programmaticSizes.indexOf(JSON.stringify(size)) === -1) {
                return true;
            }
            return predicate(size);
        });
    },

    /**
     * Returns an array of programmatic sizes whose width is bigger or smaller than specified;
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @param {Number[2]} options.min - size whose *width* will be used as a threshold,
     *   and only unit sizes of equal and larger width will be kept;
     *   preferred way is to use sizes from `bzfd.adSizes`
     * @param {Number[2]} options.max - size whose *width* will be used as a threshold,
     *   and only unit sizes of equal and smaller width will be kept;
     *   preferred way is to use sizes from `bzfd.adSizes`
     * @returns {Array} - list of ad unit sizes filtered according to the conditions
     * @example
     * config.size = size.filterProgrammatic(config.size, {max: bzfd.adSizes.PROGRAMMATIC_SMARTPHONE_BANNER})
     */
    filterProgrammatic(sizeInitial, {
        min = null,
        max = null
    } = {}) {
        return this._filterProgrammatic(sizeInitial, (size) => {
            if (
                (min && size[0] >= min[0]) ||
                (max && size[0] <= max[0])
            ) {
                return true;
            }
            return false;
        });
    },

    /**
     * Returns an array of ad unit sizes that contains only native sizes (i.e. 5x5 and fluid);
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @returns {Array} - list of ad unit sizes without programmatic sizes
     */
    excludeProgrammatic(sizeInitial) {
        return this._filterProgrammatic(sizeInitial, () => false);
    },

    /**
     * Returns an array of ad unit sizes that contains only programmatic sizes;
     * does not mutate the input array
     * @param {Array} sizeInitial - list of ad unit sizes
     * @returns {Array} - list of ad unit sizes without native sizes
     */
    getProgrammatic(sizeInitial) {
        return differenceBy(sizeInitial, this.excludeProgrammatic(sizeInitial), JSON.stringify);
    },

    /**
     * Checks whether an individual size is associated with programmatic ads
     * @param {Number[2]} size - size as a [width, height] pair
     * @param {Boolean} strict - whether to use strict size matching
     * @returns {Boolean}
     */
    isProgrammatic(size, {
        strict = true
    } = {}) {
        const programmatic = this.getProgrammatic([size]);
        const isProgrammatic = (programmatic.length === 1);
        if (isProgrammatic) {
            return true;
        }
        // in non-strict mode, treat all sizes bigger than 15x15 as programmatic
        if (!strict) {
            try {
                const [width, height] = size;
                return (width > 15 && height > 15);
            } catch (exc) {
                return false;
            }
        }
        return false;
    },

    /**
     * Checks whether two sizes are equal
     * @param {Number[2]} size1 - first size as a [width, height] pair
     * @param {Number[2]} size2 - second size as a [width, height] pair
     * @returns {Boolean}
     */
    isEqual(size1, size2) {
        if (size1 === size2) {
            return true;
        }
        return JSON.stringify(size1) === JSON.stringify(size2);
    },

    /**
     * Checks whether array of sizes contains given size
     * @param {Array} sizes - array to test
     * @param {Number[2]} size - size as a [width, height] pair
     * @returns {Boolean}
     */
    contains(sizes, size) {
        return sizes.filter((sz) => this.isEqual(sz, size)).length > 0;
    }
};