// n represtentive, p represents postive
const formats = {
    'AD': {
        neg: '-n c'
    },
    'AE': {
        neg: '-c n'
    },
    'AL': {
        neg: '-n c'
    },
    'AM': {
        neg: '-n c'
    },
    'AO': {
        neg: '-n c'
    },
    'AR': {
        neg: '-c n'
    },
    'AT': {
        neg: '-c n'
    },
    'AW': {
        neg: 'c -n'
    },
    'AX': {
        neg: '-n c'
    },
    'AZ': {
        neg: '-c n'
    },
    'BA': {
        neg: '-n c'
    },
    'BD': {
        neg: '-nc'
    },
    'BE': {
        neg: '-c n'
    },
    'BF': {
        neg: '-n c'
    },
    'BG': {
        neg: '-n c'
    },
    'BH': {
        neg: '-c n'
    },
    'BI': {
        neg: '-n c'
    },
    'BJ': {
        neg: '-n c'
    },
    'BL': {
        neg: '-n c'
    },
    'BN': {
        neg: '-c n'
    },
    'BO': {
        neg: '-c n'
    },
    'BQ': {
        neg: 'c -n'
    },
    'BR': {
        neg: '-c n'
    },
    'BY': {
        neg: '-n c'
    },
    'en-CA': {
        neg: '-cn'
    },
    'fr-CA': {
        neg: '-n c'
    },
    'CD': {
        neg: '-n c'
    },
    'CF': {
        neg: '-n c'
    },
    'CG': {
        neg: '-n c'
    },
    'CH': {
        neg: 'c-n',
        pos: 'c n'
    },
    'CI': {
        neg: '-n c'
    },
    'CL': {
        neg: '-c n'
    },
    'CM': {
        neg: '-nc'
    },
    'CO': {
        neg: '-c n'
    },
    'CV': {
        neg: '-n c'
    },
    'CW': {
        neg: 'c -n'
    },
    'CY': {
        neg: '-n c'
    },
    'CZ': {
        neg: '-n c'
    },
    'DE': {
        neg: '-n c'
    },
    'DJ': {
        neg: '-c n'
    },
    'DK': {
        neg: '-c n'
    },
    'DZ': {
        neg: '-c n'
    },
    'EA': {
        neg: '-n c'
    },
    'EC': {
        neg: '-c n'
    },
    'EE': {
        neg: '-n c'
    },
    'EG': {
        neg: '-c n'
    },
    'EH': {
        neg: '-c n'
    },
    'ER': {
        neg: '-c n'
    },
    'ES': {
        neg: '-n c'
    },
    'FI': {
        neg: '-n c'
    },
    'FR': {
        neg: '-n c'
    },
    'GA': {
        neg: '-n c'
    },
    'GE': {
        neg: '-n c'
    },
    'GF': {
        neg: '-n c'
    },
    'GH': {
        neg: '-c n'
    },
    'GL': {
        neg: '-n c'
    },
    'GN': {
        neg: '-n c'
    },
    'GP': {
        neg: '-n c'
    },
    'GQ': {
        neg: '-n c'
    },
    'GR': {
        neg: '-n c'
    },
    'GW': {
        neg: '-n c'
    },
    'HR': {
        neg: '-n c'
    },
    'HT': {
        neg: '-n c'
    },
    'HU': {
        neg: '-n c'
    },
    'IC': {
        neg: '-n c'
    },
    'IL': {
        neg: '-c n'
    },
    'IQ': {
        neg: '-c n'
    },
    'IS': {
        neg: '-n c'
    },
    'IT': {
        neg: '-c n'
    },
    'JO': {
        neg: '-c n'
    },
    'KE': {
        neg: '-nc'
    },
    'KG': {
        neg: '-n c'
    },
    'KM': {
        neg: '-c n'
    },
    'KW': {
        neg: '-c n'
    },
    'KZ': {
        neg: '-n c'
    },
    'LB': {
        neg: '-c n'
    },
    'LI': {
        neg: '-c n'
    },
    'LK': {
        neg: '-c n'
    },
    'LT': {
        neg: '-n c'
    },
    'LU': {
        neg: '-n c'
    },
    'LY': {
        neg: '-c n'
    },
    'MA': {
        neg: '-c n'
    },
    'MC': {
        neg: '-n c'
    },
    'MD': {
        neg: '-n c'
    },
    'ME': {
        neg: '-n c'
    },
    'MF': {
        neg: '-n c'
    },
    'MG': {
        neg: '-n c'
    },
    'MK': {
        neg: '-c n'
    },
    'ML': {
        neg: '-n c'
    },
    'MM': {
        neg: '-c n'
    },
    'MN': {
        neg: '-c n'
    },
    'MO': {
        neg: '-n c'
    },
    'MQ': {
        neg: '-n c'
    },
    'MR': {
        neg: '-c n'
    },
    'MU': {
        neg: '-n c'
    },
    'MZ': {
        neg: '-c n'
    },
    'NC': {
        neg: '-n c'
    },
    'NE': {
        neg: '-nc'
    },
    'NG': {
        neg: '-c n'
    },
    'NL': {
        neg: 'c -n'
    },
    'NO': {
        neg: '-c n'
    },
    'NP': {
        neg: '-c n'
    },
    'OM': {
        neg: '-c n'
    },
    'PE': {
        neg: '-c n'
    },
    'PF': {
        neg: '-n c'
    },
    'PL': {
        neg: '-n c'
    },
    'PM': {
        neg: '-n c'
    },
    'PS': {
        neg: '-c n'
    },
    'PT': {
        neg: '-n c'
    },
    'PY': {
        neg: 'c -n'
    },
    'QA': {
        neg: '-c n'
    },
    'RE': {
        neg: '-n c'
    },
    'RO': {
        neg: '-n c'
    },
    'RS': {
        neg: '-n c'
    },
    'RU': {
        neg: '-n c'
    },
    'RW': {
        neg: '-n c'
    },
    'SA': {
        neg: '-c n'
    },
    'SC': {
        neg: '-n c'
    },
    'SD': {
        neg: '-c n'
    },
    'SE': {
        neg: '-n c'
    },
    'SI': {
        neg: '-n c'
    },
    'SJ': {
        neg: '-c n'
    },
    'SK': {
        neg: '-n c'
    },
    'SM': {
        neg: '-n c'
    },
    'SN': {
        neg: '-n c'
    },
    'SO': {
        neg: '-c n'
    },
    'SR': {
        neg: 'c -n'
    },
    'SS': {
        neg: '-c n'
    },
    'ST': {
        neg: '-n c'
    },
    'SX': {
        neg: 'c -n'
    },
    'SY': {
        neg: '-c n'
    },
    'TD': {
        neg: '-c n'
    },
    'TG': {
        neg: '-n c'
    },
    'TL': {
        neg: '-n c'
    },
    'TN': {
        neg: '-c n'
    },
    'TO': {
        neg: '-c n'
    },
    'TR': {
        neg: '-n c'
    },
    'TZ': {
        neg: '-n c'
    },
    'UA': {
        neg: '-nc'
    },
    'UG': {
        neg: '-nc'
    },
    'UY': {
        neg: '-c n'
    },
    'UZ': {
        neg: '-c n'
    },
    'VE': {
        neg: '-c n'
    },
    'VN': {
        neg: '-n c'
    },
    'VU': {
        neg: '-n c'
    },
    'WF': {
        neg: '-n c'
    },
    'XK': {
        neg: '-n c'
    },
    'YE': {
        neg: '-c n'
    },
    'YT': {
        neg: '-n c'
    },
    'ZA': {
        neg: '-c n'
    }
};

const minorFractionDigits = {
    BHD: 3,
    BYR: 0,
    XOF: 0,
    BIF: 0,
    XAF: 0,
    CLF: 4,
    CLP: 0,
    KMF: 0,
    DJF: 0,
    XPF: 0,
    GNF: 0,
    ISK: 0,
    IQD: 3,
    JPY: 0,
    JOD: 3,
    KRW: 0,
    KWD: 3,
    LYD: 3,
    OMR: 3,
    PYG: 0,
    RWF: 0,
    TND: 3,
    UGX: 0,
    UYI: 0,
    VUV: 0,
    VND: 0,
    COP: 0,
    HUF: 0,
    IDR: 0,
    PKR: 0,
    TWD: 0
};

const symbols = {
    AED: 'AED',
    ARS: '$',
    AUD: '$',
    BRL: 'R$',
    CAD: 'C$',
    CHF: 'CHF',
    CLP: '$',
    CNY: '¥',
    COP: '$',
    CZK: 'Kč',
    DKK: 'kr',
    EGP: '£',
    EUR: '€',
    GBP: '£',
    HKD: 'HK$',
    HUF: 'Ft',
    IDR: 'Rp',
    ILS: '₪',
    INR: '₹',
    JPY: '¥',
    KRW: '₩',
    MAD: '.د.م',
    MXN: 'MXN',
    NOK: 'kr',
    NZD: '$',
    PEN: 'S/.',
    PHP: '₱',
    PKR: '₨',
    PLN: 'zł',
    RON: 'lei',
    RUB: 'руб',
    SAR: 'SAR',
    SEK: 'kr',
    SGD: 'SG$',
    THB: '฿',
    TRY: 'TL',
    TWD: 'NT$',
    UAH: '₴',
    USD: '$',
    UYU: '$',
    VEF: 'Bs.',
    VND: '₫',
    ZAR: 'R',
    AFN: '؋',
    ALL: 'Lek',
    ANG: 'ƒ',
    AWG: 'ƒ',
    AZN: 'ман',
    BAM: 'KM',
    BBD: '$',
    BGN: 'лв',
    BMD: '$',
    BND: '$',
    BOB: '$b',
    BSD: '$',
    BWP: 'P',
    BYN: 'Br',
    BZD: 'BZ$',
    CRC: '₡',
    CUP: '₱',
    DOP: 'RD$',
    EEK: 'kr',
    FJD: '$',
    FKP: '£',
    GEL: 'GEL',
    GGP: '£',
    GHS: '¢',
    GIP: '£',
    GTQ: 'Q',
    GYD: '$',
    HNL: 'L',
    HRK: 'kn',
    IMP: '£',
    IRR: '﷼',
    ISK: 'kr',
    JEP: '£',
    JMD: 'J$',
    KGS: 'лв',
    KHR: '៛',
    KPW: '₩',
    KYD: '$',
    KZT: 'лв',
    LAK: '₭',
    LBP: '£',
    LKR: '₨',
    LRD: '$',
    LTL: 'Lt',
    LVL: 'Ls',
    MKD: 'ден',
    MNT: '₮',
    MUR: '₨',
    MYR: 'RM',
    MZN: 'MT',
    NAD: '$',
    NGN: '₦',
    NIO: 'C$',
    NPR: '₨',
    OMR: '﷼',
    PAB: 'B/.',
    PYG: 'Gs',
    QAR: '﷼',
    RSD: 'Дин.',
    SBD: '$',
    SCR: '₨',
    SHP: '£',
    SOS: 'S',
    SRD: '$',
    SVC: '$',
    SYP: '£',
    TTD: 'TT$',
    TVD: '$',
    UZS: 'лв',
    XCD: '$',
    YER: '﷼',
    ZWD: 'Z$'
};

const supportedCurrencies = Object.keys(symbols);

/**
 * Currency provides formatting of integer, microunits and decimal values
 *
 * @class Currency
 * @constructor
 */
export default class Currency {

    /**
     * Get supported currencies
     * @returns {array} ISO currency codes
     */
    getSupportedCurrencies() {
        return supportedCurrencies;
    }

    /**
     * Convert microunits to decimal
     * @param {number} microunitsValue - microunits
     * @returns {number} decimal value
     */
    convertMicrounitsToDecimal(microunitsValue) {
        microunitsValue = microunitsValue || 0;
        return microunitsValue / 1000000;
    }

    /**
     * Get currency format for a locale
     * @param {number} decimalValue - decimal price to be formatted
     * @param {string} locale - locale (market)
     * @returns {string} currency format
     */
    getFormat(decimalValue, locale) {
        let negativeFormat = '-cn';
        let positiveFormat = 'cn';

        // Get format for locale or country, default "-cn", "cn"
        let currencyCountryFormat = formats[locale];
        if (!currencyCountryFormat && locale) {
            // if no locale format, get by country
            const country = locale.substring(locale.indexOf('-') + 1);
            currencyCountryFormat = formats[country];
        }
        if (currencyCountryFormat) {
            negativeFormat = currencyCountryFormat.neg;
            // Check for positive format different from negative
            if (currencyCountryFormat.pos) {
                positiveFormat = currencyCountryFormat.pos;
            } else {
                positiveFormat = negativeFormat.replace('-', '');
            }
        }

        return decimalValue < 0 ? negativeFormat : positiveFormat;
    }

    /**
     * Get fraction digits after the decimal for a give currency
     * @param {string} currency - ISO currency code
     * @returns {number} fraction digits after the decimal
     */
    getFractionDigits(currency) {
        let fractionDigits = 2;
        if (typeof(minorFractionDigits[currency]) !== 'undefined') {
            fractionDigits = minorFractionDigits[currency];
        }
        return fractionDigits;
    }

    /**
     * Get currency symbol for a given currency
     * @param {string} currency - ISO currency code
     * @returns {string} currency symbol
     */
    getSymbol(currency) {
        let currencySymbol = currency || '';
        // Lookup currency symbol, default to the currency code provide
        if (symbols[currency]) {
            currencySymbol = symbols[currency];
        }
        return currencySymbol;
    }

    /**
     * Format a decimal value
     * @param {number} decimalValue - decimal price to be formatted
     * @param {string} locale - locale (market)
     * @param {string} currency - ISO currency code
     * @param {Object} formatFlags - optional parameters to specify desired format
     * @param {boolean} [formatFlags.excludeSymbol=true] - flag to exclude currency symbol
     * @param {boolean} [formatFlags.excludeDecimal=true] - flag to exclude decimal in price
     * @returns {string} formatted currency
     */
    formatDecimal(decimalValue, locale, currency, formatFlags = {
        excludeSymbol: false,
        excludeDecimal: false
    }) {
        decimalValue = decimalValue || 0;
        const format = this.getFormat(decimalValue, locale);
        const fractionDigits = formatFlags.excludeDecimal ? 0 : this.getFractionDigits(currency);
        let formattedValue = decimalValue;
        if (global.Intl && locale) {
            const options = {
                minimumFractionDigits: fractionDigits,
                maximumFractionDigits: fractionDigits
            };
            const numberFormat = global.Intl.NumberFormat(locale + '-u-nu-latn', options); // eslint-disable-line new-cap
            // Format the number, remove negative sign and the unicode negative sign U+2212(0xe28892)
            formattedValue = numberFormat.format(decimalValue).replace('-', '').replace('\u2212', '');
        }
        if (formatFlags.excludeSymbol) {
            return format.replace('c', '').replace(' ', '').replace('n', formattedValue);
        }
        return format.replace('c', this.getSymbol(currency)).replace('n', formattedValue);

    }

    /**
     * Format an integer value
     * @param {number} integerValue - GoDaddy traditional integer price to be formatted
     * @param {string} locale - locale (market)
     * @param {string} currency - ISO currency code
     * @param {Object} formatFlags - optional parameters to specify desired format
     * @param {boolean} [formatFlags.excludeSymbol=true] - flag to exclude currency symbol
     * @param {boolean} [formatFlags.excludeDecimal=true] - flag to exclude decimal in price
     * @returns {string} formatted currency
     */
    formatInteger(integerValue, locale, currency, formatFlags = {
        excludeSymbol: false,
        excludeDecimal: false
    }) {
        integerValue = integerValue || 0;
        return this.formatDecimal(integerValue / Math.pow(10, this.getFractionDigits(currency)), locale, currency, formatFlags);
    }

    /**
     * Format a microunits value
     * @param {number} microunitsValue - microunits price to be formatted
     * @param {string} locale - locale (market)
     * @param {string} currency - ISO currency code
     * @param {Object} formatFlags - optional parameters to specify desired format
     * @param {boolean} [formatFlags.excludeSymbol=true] - flag to exclude currency symbol
     * @param {boolean} [formatFlags.excludeDecimal=true] - flag to exclude decimal in price
     * @returns {string} formatted currency
     */
    formatMicrounits(microunitsValue, locale, currency, formatFlags = {
        excludeSymbol: false,
        excludeDecimal: false
    }) {
        return this.formatDecimal(this.convertMicrounitsToDecimal(microunitsValue), locale, currency, formatFlags);
    }
}