import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import Button from '@ux/button';
import Spinner from '@ux/spinner';
import Icon from '@ux/icon';
import {
    URL,
    request
} from '@ux/util';
import {
    FormattedMessage
} from 'react-intl';

/**
 * Render and expose the email subscription form as a functional Component.
 *
 * @param {Object} props Properties
 * @public
 */
class EmailForm extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            signUpResult: false,
            signingUp: false,
            errorMessage: false
        };

        this.submitEmailForm = this.submitEmailForm.bind(this);
        this.signupUser = this.signupUser.bind(this);
    }

    /**
     * Attempts to submit the email for for the user.
     * @param  {Event} evt React Synthetic event for Form Submission .
     */
    submitEmailForm(evt) {
        evt.preventDefault();
        const env = this.props.env;
        const destination = new URL(
            `https://gui.${env !== 'prod' ? env + '-' : ''}godaddy.com/v1/subscription/subscribe`
        );
        this.signupUser(destination.href);
    }

    /**
     * Signs user email up for a subscription
     *
     * @param {Location|String} url New url
     * @private
     */
    signupUser(url) {
        const addrHolder = this.emailInput.value;
        let errCode = 0;

        if (!/.+@.+\..{2,}/.test(addrHolder)) {
            errCode = 'PC:Javascript:EnterValidEmail';
        } else if (addrHolder.length > 100) {
            errCode = 'PC:Javascript:EmailAddressTooLong';
        }

        if (errCode) {
            this.setState({
                errorMessage: errCode,
                signUpResult: 'delete-fill'
            });
            return;
        }

        const body = JSON.stringify({
            EmailAddress: addrHolder,
            PublicationId: 0,
            TemplateInfo: {
                TemplateTypeKey: 'GDWelcomeConfirmationSB',
                TemplateNamespaceKey: 'GDSHOP'
            }
        });

        this.setState({
            signingUp: true
        });
        request.post(url, body, (err) => {
            this.emailInput.value = '';
            this.setState({
                signingUp: false,
                signUpResult: err ? 'delete-fill' : 'ok',
                errorMessage: err ? 'Sales:Footer:SpecialOfferForm:SignUpError' : 'Sales:Footer:SpecialOfferForm:SignUpSuccess'
            });
        });
    }

    render() {
        const {
            signUpResult,
            signingUp,
            errorMessage
        } = this.state;
        const props = this.props;
        const {
            seechange
        } = props;
        let submitMessage;
        const emailClasses = ['form-control'];
        const errorState = ['email-message'];
        let buttonColor = 'primary';
        if (signingUp) {
            submitMessage = < Spinner size = 'sm'
            shade = 'light' / > ;
        } else if (signUpResult) {
            if (signUpResult === 'delete-fill') {
                buttonColor = 'danger';
                emailClasses.push('email-error');
                errorState.push('email-error');
            } else {
                buttonColor = 'purchase';
            }
            submitMessage = < Icon name = {
                signUpResult
            }
            />;
        } else {
            submitMessage = < FormattedMessage id = {
                seechange ?
                'Sales:Footer:SpecialOfferForm:SignUp' : 'Sales:Footer:SpecialOfferForm:SubmitButton'
            }
            />;
        }

        const placeholder = props.messages['Sales:Footer:SpecialOfferForm:EmailPlaceholder'];

        return ( <
            div className = {
                this.namespace('newsletter-form')
            } >
            <
            label htmlFor = 'specialOfferForm' >
            <
            FormattedMessage id = {
                seechange ?
                'Sales:Footer:SpecialOfferForm:Label' : 'Sales:Footer:SpecialOfferForm:Heading'
            }
            /> <
            /label> <
            form onSubmit = {
                this.submitEmailForm
            } >
            <
            div className = {
                this.namespace('input-group')
            } >
            <
            input id = 'specialOfferForm'
            className = {
                this.namespace(...emailClasses)
            }
            placeholder = {
                placeholder
            }
            ref = {
                r => this.emailInput = r
            }
            onChange = {
                () => {
                    if (signUpResult) this.setState({
                        signUpResult: null,
                        errorMessage: null
                    });
                }
            }
            /> <
            div className = {
                this.namespace('input-group-btn')
            } >
            <
            Button type = 'submit'
            design = {
                buttonColor
            }
            onClick = {
                this.submitEmailForm
            } > {
                submitMessage
            } <
            /Button> <
            /div> <
            /div> {
                errorMessage &&
                    <
                    p aria - live = 'polite'
                className = {
                        this.namespace(...errorState)
                    } >
                    <
                    FormattedMessage id = {
                        errorMessage
                    }
                /> <
                /p> } <
                /form> <
                /div>
            );
        }
    }

    EmailForm.propTypes = {
        ...NamespaceShape,
        messages: PropTypes.object.isRequired,
        env: PropTypes.string.isRequired,
        seechange: PropTypes.bool
    };

    EmailForm.defaultProps = {
        seechange: false
    };

    export default withNamespace(EmailForm);