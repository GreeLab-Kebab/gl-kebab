import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    FormattedHTMLMessage
} from 'react-intl';
import golfToEid from 'golf-to-eid';
import Link from '@ux/link';
import Button from '@ux/button';

export class SubNavPanel extends NamespaceConsumer {
    /**
     * Determines whether to render text as formatteHTMLMsg or as literal string
     * @param  {String}  caption   The string to render
     * @param  {Boolean} isLiteral Whether or not to render as literal string
     * overrides `literalCaptions` prop
     * @returns {Boolean|String|React.Element} false if there is nothing to render, otherwise
     * returns what should be rendered for the caption
     */
    renderCaption(caption, isLiteral = false) {
        if (!caption) {
            return false;
        } else if (isLiteral || this.props.literalCaptions) {
            return caption;
        }
        return <FormattedHTMLMessage id = {
            caption
        }
        />;

    }

    /**
     * Render a uxcore2 icon
     * @param {string} icon The classname for a uxcore2 icon
     * @returns {React.Element} A span with an icon
     * @private
     */
    renderIcon(icon) {
        if (icon) {
            return <span className = {
                this.namespace(icon, 'uxicon', 'custom-icon')
            }
            />;
        }
        return null;
    }

    /**
     * handles clicking on navigation items with a custom onClick handler
     *
     * @param {Object} item The item that was just clicked on
     * @param {Object} event The click event
     * @private
     */
    onItemClick(item, event) {
        if (typeof item.onClick === 'function') {
            item.onClick(event);
        }
        this.afterItemClicked(item);
    }

    /**
     * Performs actions after clicking on an item
     *
     * @param {Object} item The item that was just clicked on
     * @private
     */
    afterItemClicked(item) {
        if (this.isBrowser) {
            window.sessionStorage.setItem('activeCaption', item.caption || item.id);
        }
        this.props.onClose();
    }

    /**
     * Generate links
     *
     * @private
     * @param {Array} items Array of objects to display as links
     * @returns {Array} a set of Links
     */
    renderMobileLinks(items) {
        const links = [];
        items.forEach((child, i) => {
            if (!child.href || child.href.length === 0) {
                return;
            }
            const active = (this.props.currentHref === child.href);
            const eid = child.eid ||
                golfToEid(child.caption || child.id || '', {
                    prefix: this.props.eidPrefix,
                    postfix: 'link.click'
                });

            if (child.caption || child.title) {
                links.push( <
                    li key = {
                        (child.caption || child.id) + i
                    }
                    className = {
                        this.namespace(
                            this.classNames('subnav-item', 'list-unstyled', {
                                active
                            })
                        )
                    } >
                    <
                    Link href = {
                        child.href
                    }
                    target = {
                        child.target
                    }
                    data - eid = {
                        eid
                    }
                    onClick = {
                        child.onClick && this.onItemClick.bind(this, child)
                    }
                    onClicked = {
                        () => this.afterItemClicked(child)
                    }
                    urlArgs = {
                        this.props.urlArgs
                    } { ...child.dataAttrs
                    } > {
                        this.renderCaption(child.title, true) || this.renderCaption(child.caption)
                    } {
                        this.renderIcon(child.icon)
                    } <
                    /Link> <
                    /li>
                );
            }
        });
        return links;
    }

    /**
     * Generate secondary headings for each section of links inside primary heading
     *
     * @private
     * @param {Object[]} items Array of objects for generating the subnav links
     * @param {String} parentHeading The caption for the parent of the subnav-panel
     * @returns {ReactElement[]} a set of list items
     */
    renderSubNavSections(items, parentHeading) {
        const listItems = [];
        items.forEach((child, i) => {
                // if there are subsections, i.e. two levels of children
                if (child.children && child.children.length > 0) {
                    const suppressTitle = items.length === 1 && child.title && child.title === parentHeading;

                    // check if the children are valid links
                    const links = this.renderMobileLinks(child.children);
                    if (!Array.isArray(links) || links.length === 0) {
                        return;
                    }
                    // push the heading first
                    if (!suppressTitle && (child.caption || child.title)) {
                        listItems.push( <
                            li key = {
                                (child.caption || child.id) + i
                            }
                            className = {
                                this.namespace('subnav-mobile-heading')
                            } > {
                                this.renderCaption(child.title, true) || this.renderCaption(child.caption)
                            } <
                            /li>
                        );
                    }
                    // then push the links
                    listItems.push(links);
                    // then push divider
                    listItems.push( < hr key = {
                            'hr' + i
                        } > < /hr>);
                    }
                });
            if (listItems.length === 0) {
                // no subsections
                listItems.push(this.renderMobileLinks(items));
            }
            return listItems;
        }

        /**
         * Generate subnav for a primary heading
         *
         * @private
         * @param {Object} navSection Object for generating the subnav
         * @param {String} navSection.caption Text for primary heading in subnav
         * @param {Object[]} navSection.children Array of objects for generating the subnav sections
         * @param {String} [navSection.href] href for heading to link to
         * @returns {ReactElement} a div containing the subnav for a primary heading
         */
        renderNavSection(navSection) {
            let colHeading;
            const {
                caption,
                title,
                id,
                href,
                dataAttrs,
                target,
                onClick
            } = navSection;

            if (href) {
                const eid = navSection.eid ||
                    golfToEid(caption || id || '', {
                        prefix: this.props.eidPrefix,
                        postfix: 'link.click'
                    });
                colHeading = < Link
                href = {
                    href
                }
                data - eid = {
                    eid
                }
                target = {
                    target
                }
                onClick = {
                    onClick && this.onItemClick.bind(this, navSection)
                }
                onClicked = {
                        this.props.onClose
                    } { ...dataAttrs
                    } > {
                        this.renderCaption(title, true) || this.renderCaption(caption)
                    } <
                    /Link>;
            } else {
                colHeading = this.renderCaption(title, true) || this.renderCaption(caption);
            }

            return ( <
                div className = {
                    this.namespace('subnav-scroller')
                } >
                <
                ul ref = {
                    (r) => {
                        this.element = r;
                    }
                }
                className = {
                    `${this.namespace('subnav-mobile')} list-unstyled`
                } >
                <
                li className = {
                    this.namespace('column-heading', 'font-primary-bold')
                } > {
                    colHeading
                } {
                    this.renderIcon(navSection.icon)
                } <
                /li> {
                    this.renderSubNavSections(navSection.children, colHeading)
                } <
                /ul> <
                /div>
            );
        }

        /**
         * render gray header with close button
         * and conditionally a back button
         *
         * @param {Boolean} showBackBtn Whether or not to show the back button
         * @private
         * @returns {ReactElement} a div for the top header
         */
        renderTopContainer(showBackBtn) {
            return ( <
                div className = {
                    this.namespace('mobile-top-container')
                } > {
                    showBackBtn &&
                    <
                    Button onClick = {
                        this.props.onBack
                    }
                    design = 'tertiary'
                    className = {
                        this.namespace('main-menu-btn')
                    } > {
                        this.renderCaption(this.props.menuTitle)
                    } <
                    /Button>
                } <
                span onClick = {
                    this.props.onClose
                }
                className = {
                    this.namespace('uxicon-x', 'uxicon', 'pull-right')
                }
                /> <
                /div>
            );
        }

        /**
         * Render panel displaying subnav if navigation menu is open
         *
         * @private
         *
         * @returns {ReactElement} div for the subnav panel
         */
        render() {
            const {
                props
            } = this;

            return ( <
                div className = {
                    this.namespace(this.classNames('subnav-panel', {
                        open: props.open
                    }))
                } > {
                    this.renderTopContainer(true)
                } {
                    this.renderNavSection(props.navigation)
                } <
                /div>
            );
        }
    }

    /**
     * PropType validation for SubNavPanel
     *
     * @type {Object}
     * @api public
     */
    SubNavPanel.propTypes = {
        ...NamespaceShape,
        currentHref: PropTypes.string,
        eidPrefix: PropTypes.string,
        literalCaptions: PropTypes.bool,
        menuTitle: PropTypes.string,
        navigation: PropTypes.object.isRequired,
        onBack: PropTypes.func,
        onClose: PropTypes.func,
        open: PropTypes.bool
    };

    /**
     * Default property values.
     *
     * @type {Object}
     * @public
     */
    SubNavPanel.defaultProps = {
        currentHref: '',
        eidPrefix: 'uxp.hyd.mobile_nav',
        literalCaptions: false,
        menuTitle: 'Shared:MobileNav:MainMenu',
        onBack: () => {},
        onClose: () => {},
        open: false
    };

    export default withNamespace(SubNavPanel);