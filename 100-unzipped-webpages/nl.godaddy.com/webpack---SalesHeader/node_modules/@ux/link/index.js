import {
    FormattedHTMLMessage
} from 'react-intl';
import React, {
    Component
} from 'react';
import trfq from 'react-trfq';
import PropTypes from 'prop-types';
import {
    url
} from '@ux/header-util';

/**
 * Regex for checking for `data-*` attributes
 * @type {RegExp}
 */
const isDataAttr = /^data-/;

/**
 * Returns a generic link component that lazily merges any `props.urlArgs`
 * with `props.href`.
 */
export default class Link extends Component {
    /**
     * Redirects to the merge of `props.urlArgs` and `props.href`
     * @param   {React.SyntheticEvent} e onClick event data.
     * @param   {String} loc Target location href to redirect to.
     * @returns {Boolean} false to stop navigation to `props.href`.
     */
    redirect(e, loc) {
        const props = this.props;
        e.preventDefault();
        e.stopPropagation();
        props.onClicked();

        const {
            target
        } = props;
        const eid = props['data-eid'];
        if (eid) {
            //
            // Remark (crobbins): it is ALMOST NEVER desireable to pull from global window
            // state in a React component since it breaks encapsulation. In this case, however,
            // we allow it because:
            //
            // 1. We are purposefully lazy about the existence of data.
            // 2. This will happen at most ONCE on a page since we are about to redirect away
            //    from the page itself.
            //
            const data = window.ux &&
                window.ux.eldorado &&
                window.ux.eldorado.data &&
                window.ux.eldorado.data.props ||
                {};

            //
            // Remark (crobbins): it may be desireable use `cb` in `trfq.logEvent` if
            // the navigation to another page happens too quickly for the event to be logged.
            //
            const l = window.location;
            trfq.logEvent(eid, 'click', {
                app: data.app,
                hostname: l.hostname,
                path: l.path,
                query: l.search,
                market: data.market,
                lang: data.languageName,
                country: data.countryName,
                currency: data.currency,
                split: data.split
            });
        }

        const destination = url.updateQuery(loc, props.urlArgs);
        if (e.metaKey || e.ctrlKey) {
            window.open(destination, '_blank');
        } else if (target && target !== '_self') {
            window.open(destination, target);
        } else {
            window.location = destination;
        }
        return false;
    }

    /**
     * Renders the link with the appropriate click handling.
     * @returns {React.ReactElement} Denormalized `anchor` with appropriate properties
     */
    // eslint-disable-next-line complexity
    render() {
        const props = this.props;
        const {
            urlArgs
        } = props;
        let children;

        //
        // !! IMPORTANT !! Traffic2 (specifically tcc.combined.**.min.js)
        // will intercept ANY click on ANY element with an `href` attribute. Since we wish
        // to set our own `window.location` we must set `data-tcc-ignore` so that
        // no click listener is added by Traffic2.
        //
        const redirectTo = props.redirect || props.href;
        const hasUrlArgs = urlArgs && Object.keys(urlArgs).length;
        const shouldRedirect = props.href.indexOf('tel:') !== 0 &&
            (props.redirect || hasUrlArgs);
        const tccIgnore = props['data-tcc-ignore'] || !!shouldRedirect;
        const dataAttrs = Object.keys(props).reduce((acc, key) => {
            if (isDataAttr.test(key)) {
                acc[key] = props[key];
            }

            return acc;
        }, {});

        if (props.children || props.caption) {
            children = props.children || < FormattedHTMLMessage id = {
                props.caption
            }
            />;
        }

        dataAttrs['data-tcc-ignore'] = tccIgnore || null;

        return <a
        aria - label = {
            props.ariaLabel
        }
        id = {
            props.id
        }
        href = {
            props.href
        }
        rel = {
            props.rel
        }
        target = {
            props.target
        }
        className = {
            props.className
        }
        title = {
            props.title
        }
        onMouseEnter = {
            props.onMouseEnter
        }
        onMouseLeave = {
            props.onMouseLeave
        }
        onClick = {
                props.onClick || (shouldRedirect && ((e) => {
                    this.redirect(e, redirectTo);
                })) || props.onClicked
            } { ...dataAttrs
            } >
            {
                children
            } <
            /a>;
    }
}

Link.defaultProps = {
    onClicked: () => {}
};

/**
 * PropTypes for Link. Most map directly to HTML attributes on the `<a>`.
 * @type {Object}
 */
Link.propTypes = {
    'caption': PropTypes.string,
    'children': PropTypes.node,
    'className': PropTypes.string,
    'data-eid': PropTypes.string,
    'data-tcc-ignore': PropTypes.bool,
    'href': PropTypes.string.isRequired,
    'id': PropTypes.string,
    'redirect': PropTypes.string,
    'rel': PropTypes.string,
    'target': PropTypes.string,
    'urlArgs': PropTypes.object,
    'ariaLabel': PropTypes.string,
    'onClick': PropTypes.func,
    'onMouseEnter': PropTypes.func,
    'onMouseLeave': PropTypes.func,
    'onClicked': PropTypes.func,
    'title': PropTypes.string
};