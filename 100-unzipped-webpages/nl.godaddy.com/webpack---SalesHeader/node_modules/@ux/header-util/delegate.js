import User from './user';
import Customer from './customer';
import Cookies from './cookies';

/**
 * Delegate details
 *
 * @Constructor Delegate
 * @param {Object} options Optional configuration.
 * @api public
 */
export default class Delegate extends User {
    /**
     * Update data from the idp cookie
     *
     * @api private
     */
    updateFromCookie() {
        this.cookies.updateIdp();

        const del = this.cookies.getIdpProperty('del');
        const delType = del && del.auth;
        if (delType && delType !== 'basic') {
            // In more complex impersonation scenarios such as e2s2s, we need to dig another layer deeper to get information
            // about the middle customer in a two-layer impersonation/delegation stack. So we store that Customer here and
            // then load their info directly from the parsed `del` section of the cookie.
            this.impersonatedCustomer = new Customer();
            const customerInfo = this.impersonatedCustomer.getIdpProperties((properties, replace) => {
                return Cookies.getRealmPropertiesFromObject(del, properties, replace);
            }, delType);
            this.impersonatedCustomer.set(customerInfo);
        }

        this.set(this.cookies.getIdpProperties([
            'firstname',
            'lastname',
            'info_accountname',
            'jti'
        ].map(property => ['del', delType === 'basic' ? null : 'del', property].filter(Boolean)), {
            info_accountname: 'accountName'
        }));
    }
}