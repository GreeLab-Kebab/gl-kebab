import User from './user';
import Cookies from './cookies';

const status = [
    'partial',
    'full',
    'manager'
];

/**
 * Customer details
 *
 * @Constructor Customer
 * @param {Object} options Optional configuration.
 * @api public
 */
export default class Customer extends User {
    /**
     * Update data from the idp cookie
     *
     * @api private
     */
    updateFromCookie() {
        this.cookies.updateIdp();
        const auth = this.cookies.getIdpProperty('auth');

        this.set(this.getIdpProperties(this.cookies.getIdpProperties.bind(this.cookies), auth));

        if (!this.shopperId) {
            // Try getting it from the ShopperId cookie instead
            const encryptedShopperId = this.cookies.getEncryptedShopperId(this.options.env, this.options.privateLabelId);
            if (encryptedShopperId) {
                this.set({
                    ...this.getAll(),
                    shopperId: encryptedShopperId
                });
            }
        }
    }

    /**
     * Get properties from idp information
     *
     * @param {Function} getIdpPropertiesFn Function to call to get properties from idp
     * @param {String} auth Type of authentication (e.g. e2s, s2s, e2s2s, none of the above)
     * @returns {Object} Extracted properties
     * @package
     */
    getIdpProperties(getIdpPropertiesFn, auth) {
        return getIdpPropertiesFn([
            'disp',
            'firstname',
            'lastname',
            'info_shopperId',
            'plid'
        ].map(property => [auth, property]).concat('jti'), {
            info_shopperId: 'shopperId',
            disp: 'displayName'
        });
    }

    /**
     * Fetch all user details, unpack and store locally.
     * TODO: JSONP should not be enforced for details but CORS headers are missing.
     *
     * @param {Object} url Request targets.
     * @param {Function} done Completion callback
     * @api public
     */
    fetch(url, done) {
        this.cookies.updateIdp();
        this.fetchInternal(url, done, (data) => {
            let idp;
            try {
                idp = JSON.parse(data.info);
            } catch (e) {
                return {};
            }
            return this.getIdpProperties(Cookies.getRealmPropertiesFromObject.bind(this, idp), idp.auth);
        });
    }

    /**
     * Return loggedIn status of Customer.
     *
     * @returns {Boolean} LoggedIn.
     * @api public
     */
    get loggedIn() {
        const privateLabelId = this.options.privateLabelId;

        if (privateLabelId && this.data.plid && privateLabelId.toString() !== this.data.plid.toString()) {
            return false;
        }
        return !!~status.indexOf(this.get('status')) || !!this.get('loginName');
    }
}