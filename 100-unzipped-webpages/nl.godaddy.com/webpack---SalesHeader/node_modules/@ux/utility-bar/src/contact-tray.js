import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import {
    golf,
    breakpoints
} from './enums';
import eidBuilder from './eid';
import {
    TrayMenu,
    TrayTitle
} from '@ux/tray-menu';
import Link from '@ux/link';
import HelpSearch from '@ux/help-search';

/**
 * Render and expose the LanguageSelector as a functional Component.
 *
 * @param {Object} props Properties
 * @api public
 */
class ContactTray extends NamespaceConsumer {
    constructor(props) {
        super(...arguments);

        this.eids = {
            contactUs: eidBuilder({
                key: golf.contactUs,
                manifest: props.manifest
            }),
            globalDirectory: eidBuilder({
                key: golf.globalDirectory,
                manifest: props.manifest
            }),
            help: eidBuilder({
                key: golf.help,
                manifest: props.manifest
            })
        };

        this.showSupportContacts = this.showSupportContacts.bind(this);
        this.state.showPhoneNumbers = false;
    }

    /**
     * Add eventListeners for breakpoints.
     *
     * @api private
     */
    componentDidMount() {
        this.breakpoint(...breakpoints);
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @api private
     */
    componentWillUnmount() {
        this.breakup();
    }

    render() {
        const props = this.props;

        return ( <
            IntlProvider locale = {
                props.market
            }
            messages = {
                props.messages
            } > {
                this.renderInternal()
            } <
            /IntlProvider>
        );
    }

    /**
     * Render contact tray menu or link
     * @returns {React.Element} tray menu or link
     */
    renderInternal() {
        const props = this.props;
        const supportDetails = props.supportContacts || {};
        const phoneNumber = supportDetails.technicalSupportPhone || '';
        const trayName = supportDetails.technicalSupportLabel;
        const telHref = `tel:${phoneNumber.replace(/[^\d]/g, '')}`;

        if (!trayName || trayName === '') {
            return <div / > ;
        }

        const includesPhoneNumber = this.includesPhoneNumber(trayName, phoneNumber);

        if (props.privateLabelId === 1) {
            if (props.contactTrayEnabled) {
                if (props.enableHelpSearchContactTray) {
                    return this.renderHelpSearchContactTray(supportDetails, trayName, includesPhoneNumber, phoneNumber);
                }
                return this.renderFullTray(supportDetails, trayName, includesPhoneNumber);
            }

            if (this.shouldShowCityContactsTray(supportDetails)) {
                return this.renderCityContactsTray(supportDetails, trayName, telHref, includesPhoneNumber);
            }
        }

        // If none of the trays are enabled, just show the tray name as a link
        // If {phone} make the number a telHref otherwise link to contact us
        const trayNameEid = includesPhoneNumber ?
            `uxp.hyd.utility_bar.support_phone.click` :
            this.eids.contactUs;

        let trayHref = props.urls.contactUs.href;
        if (includesPhoneNumber) {
            trayHref = telHref;
        } else if (props.privateLabelId !== 1) {
            trayHref = '#';
        }

        return ( <
            div className = {
                this.namespace('basic-phone-container')
            } >
            <
            Link urlArgs = {
                props.urlArgs
            }
            href = {
                trayHref
            }
            className = {
                this.namespace('btn', 'basic-phone-btn')
            }
            data - eid = {
                trayNameEid
            } > {
                this.renderTrayName(trayName, includesPhoneNumber)
            } <
            /Link> <
            /div>
        );
    }

    /**
     * Renders name to display on contact tray
     * @param  {String} trayName The translated text to display as the tray name
     * @param {Boolean} includesPhoneNumber whether or not the tray label includes the support number
     * @returns {React.Element} div containing tray name
     * @private
     */
    renderTrayName(trayName, includesPhoneNumber) {
        return ( <
            div > {
                (this.isMobile || includesPhoneNumber) && this.renderPhoneIcon()
            } <
            span className = {
                this.namespace('basic-phone-text', 'hidden-sm-down')
            } > {
                trayName
            } <
            /span> <
            /div>
        );
    }

    /**
     * Check if tray name includes the phone number
     * @param {String} trayName contact tray label
     * @param {String} phoneNumber the technical support number
     * @returns {Boolean} true if tray name includes phone number
     * @private
     */
    includesPhoneNumber(trayName, phoneNumber) {
        return trayName.indexOf(phoneNumber) !== -1;
    }

    /**
     * Whether to show the city contacts tray
     *
     * Only shows the tray if there exists a city contact with a phone number that
     * does not match the market contact
     *
     * @param {Object} supportDetails Information from the support API
     * @returns {Boolean} true if we should show the city contacts tray, false otherwise
     * @private
     */
    shouldShowCityContactsTray(supportDetails) {
        if (!supportDetails || !supportDetails.cityContacts)
            return false;

        const cityContactKeys = Object.keys(supportDetails.cityContacts);
        for (let i = 0; i < cityContactKeys.length; i++) {
            const contact = supportDetails.cityContacts[cityContactKeys[i]];
            if (contact.technicalSupportPhone !== supportDetails.technicalSupportPhone) {
                return true;
            }
        }

        return false;
    }

    /**
     * Render the phone icon along with appropriate alternate text
     *
     * @returns {ReactElement} A `span` element with the phone icon and specified alt text
     * @private
     */
    renderPhoneIcon() {
        const props = this.props;

        if (props.enableHelpSearchContactTray && !this.isMobile) {
            return;
        }

        return ( <
            div title = {
                props.messages[golf.contactUs]
            }
            className = {
                this.namespace('uxicon', 'uxicon-phone')
            } > < /div>
        );
    }

    renderCityContacts(supportDetails) {
        const altContactsData = [];

        // Push alternative contacts
        if (supportDetails.cityContacts && Object.keys(supportDetails.cityContacts).length) {
            Object.keys(supportDetails.cityContacts).forEach(key => {
                altContactsData.push(supportDetails.cityContacts[key]);
            });
        }

        // If no city contacts were found, use market contact
        // Make sure to use technicalSupportDescription for the market contact
        if (!altContactsData.length) {
            altContactsData.push({
                technicalSupportPhone: supportDetails.technicalSupportPhone,
                technicalSupportHours: supportDetails.technicalSupportDescription
            });
        }

        const altContacts = altContactsData.map((contact, idx) => {
            const altPhone = contact.technicalSupportPhone || '';
            const hrefPhoneNumber = `tel:${altPhone.replace(/[^\d]/g, '')}`;
            // If {phone} make the number a telHref otherwise link to contact us
            const trayNameEid = this.includesPhoneNumber ?
                `uxp.hyd.utility_bar.support_phone.click` :
                this.eids.contactUs;

            return ( <
                li key = {
                    idx
                } >
                <
                span > {
                    contact.technicalSupportHours
                } <
                /span> <
                a className = {
                    this.namespace('contact-link')
                }
                data - eid = {
                    trayNameEid
                }
                href = {
                    hrefPhoneNumber
                } > {
                    altPhone
                } <
                /a> <
                /li>
            );
        });

        return ( <
            ul className = {
                this.namespace('alt-contact-list', 'list-unstyled')
            } > {
                altContacts
            } <
            /ul>
        );
    }

    renderFederatedPartner() {
        const props = this.props;

        if (!props.federatedPartner) {
            return null;
        }

        const {
            phone,
            phoneDescription
        } = props.federatedPartner;
        const hrefPhoneNumber = `tel:${phone.replace(/[^\d]/g, '')}`;

        return ( <
            div className = {
                this.namespace('federated-partner')
            } >
            <
            div className = {
                this.namespace('partner-description')
            } > {
                phoneDescription
            } < /div> <
            a href = {
                hrefPhoneNumber
            }
            className = {
                this.namespace('contact-link')
            }
            data - eid = 'uxp.hyd.utility_bar.federated_phone.click' > {
                phone
            } <
            /a> <
            /div>
        );
    }

    renderCityContactsTray(supportDetails, trayName, includesPhoneNumber) {
        const trayLabel = this.renderTrayName(trayName, includesPhoneNumber);
        const {
            messages = {}
        } = this.props;

        return ( <
            TrayMenu ariaLabel = {
                messages[golf.contactUs]
            }
            data - eid = 'uxp.hyd.utility_bar.city_contact_tray.tray.click'
            type = 'base'
            className = {
                this.namespace('city-contacts-tray')
            }
            name = {
                trayLabel
            } >
            <
            div className = {
                this.namespace('container')
            } >
            <
            div className = {
                this.namespace('row')
            } >
            <
            TrayTitle >
            <
            FormattedMessage id = 'Shared:UtilityBar:SupportPhone:Alternate:Numbers' / >
            <
            /TrayTitle> {
                this.renderCityContacts(supportDetails)
            } {
                this.renderFederatedPartner()
            } <
            /div> <
            /div> <
            /TrayMenu>
        );
    }

    renderFullTray(supportDetails, trayName, includesPhoneNumber) {
        const props = this.props;
        const eids = this.eids;
        const trayLabel = this.renderTrayName(trayName, includesPhoneNumber);

        return ( <
            TrayMenu ariaLabel = {
                props.messages[golf.contactUs]
            }
            data - eid = 'uxp.hyd.utility_bar.contact_tray.tray.click'
            type = 'base'
            className = {
                this.namespace('contact-tray')
            }
            name = {
                trayLabel
            } >
            <
            div className = {
                this.namespace('container')
            } >
            <
            div className = {
                this.namespace('row')
            } >
            <
            div className = {
                this.namespace('col-lg-4', 'col-md-6', 'content-wrap')
            } >
            <
            TrayTitle >
            <
            FormattedMessage id = 'Shared:UtilityBar:SupportPhone:CallUs' / >
            <
            /TrayTitle>

            {
                this.renderCityContacts(supportDetails)
            }

            {
                this.renderFederatedPartner()
            }

            <
            div className = {
                this.namespace('contact-link-info')
            } >
            <
            FormattedMessage id = 'Shared:UtilityBar:SupportPhone:GlobalDirectory:GlobalDirectory' / >
            <
            /div> <
            Link urlArgs = {
                props.urlArgs
            } { ...props.urls.contactUs
            }
            data - eid = {
                eids.globalDirectory
            }
            className = {
                this.namespace('contact-link')
            } >
            <
            FormattedMessage id = {
                golf.globalDirectory
            }
            /> <
            /Link> <
            /div>

            <
            div className = {
                this.namespace('col-lg-4', 'col-md-6', 'content-wrap', 'divider')
            } > {
                this.renderChatSection(supportDetails)
            } <
            /div>

            <
            div className = {
                this.namespace('col-md-4', 'help-mobile', 'hidden-md-up')
            } >
            <
            TrayTitle >
            <
            FormattedMessage id = 'Shared:UtilityBar:SupportPhone:HelpCenter' / >
            <
            /TrayTitle> <
            p >
            <
            FormattedMessage id = 'Shared:UtilityBar:SupportPhone:HelpCenter:Explore' / >
            <
            /p> <
            div >
            <
            Link className = {
                this.namespace('btn', 'btn-default')
            }
            urlArgs = {
                props.urlArgs
            } { ...props.urls.help
            }
            data - eid = {
                eids.help
            } >
            <
            FormattedMessage id = {
                golf.help
            }
            /> <
            /Link> <
            /div> <
            /div> <
            /div> <
            /div> <
            /TrayMenu>
        );
    }

    showSupportContacts() {
        this.setState({
            showPhoneNumbers: true
        });
    }

    /**
     * Renders the help search tray
     * @param  {Object} supportDetails      Data from the support api
     * @param  {String} trayName            String to render as the tray name
     * @param  {Booleand} includesPhoneNumber True if the tray name includes a phone number
     * @param  {String} phoneNumber         The contact phone number
     * @returns {React.Element}              The TrayMenu to render
     */
    renderHelpSearchContactTray(supportDetails, trayName, includesPhoneNumber, phoneNumber) {
        const props = this.props;
        const {
            showPhoneNumbers
        } = this.state;
        const eids = this.eids;
        const telHref = `tel:${phoneNumber.replace(/[^\d]/g, '')}`;
        const trayLabel = this.renderTrayName(trayName, includesPhoneNumber);

        return ( <
            TrayMenu ariaLabel = {
                props.messages[golf.contactUs]
            }
            data - eid = 'uxp.hyd.utility_bar.help_search.tray.click'
            type = 'base'
            className = {
                this.namespace('contact-tray')
            }
            name = {
                trayLabel
            } >
            <
            div className = {
                this.namespace('container')
            } >
            <
            div className = {
                this.namespace('row')
            } >
            <
            div className = {
                this.namespace('col-lg-8', 'col-md-7', 'content-wrap', 'help-search-wrap')
            } >
            <
            HelpSearch onSubmit = {
                this.showSupportContacts
            }
            market = {
                props.market
            }
            messages = {
                props.messages
            }
            shopperId = {
                props.shopperId
            }
            /> {
                !showPhoneNumbers &&
                    <
                    button
                data - eid = 'uxp.hyd.utility_bar.help_search_show_number.button.click'
                type = 'button'
                onClick = {
                    (e) => {
                        this.showSupportContacts();
                        e.preventDefault();
                        e.stopPropagation();
                    }
                }
                className = {
                        this.namespace('btn', 'btn-link', 'show-button')
                    } >
                    <
                    FormattedMessage id = {
                        golf.showSupportNumbersText
                    }
                /> <
                /button>
            } <
            /div> <
            div className = {
                this.namespace('col-lg-4', 'col-md-5', 'content-wrap')
            } > {
                showPhoneNumbers &&
                <
                div className = {
                    this.namespace('help-search-contact-info')
                } >
                <
                div className = {
                    this.namespace('help-search-contact-header', 'help-search-hdr')
                } >
                <
                div className = {
                    this.namespace('margin-compressed', 'h3')
                } >
                <
                FormattedMessage id = 'Shared:UtilityBar:SupportPhone:TalkToAnExpert' / >
                <
                /div> <
                FormattedMessage id = 'Shared:UtilityBar:SupportPhone:WeveGot247PhoneSupport' / >
                <
                /div> <
                p >
                <
                FormattedMessage id = 'Shared:UtilityBar:SupportPhone:OurSmartFriendlyReps' / >
                <
                /p> <
                span >
                <
                FormattedMessage id = 'Shared:UtilityBar:SupportPhone:USSalesSupport' / >
                <
                /span> <
                a className = {
                    this.namespace('contact-link')
                }
                data - eid = 'uxp.hyd.utility_bar.help_search.support_phone.click'
                href = {
                    telHref
                } > {
                    phoneNumber
                } <
                /a> {
                    this.renderFederatedPartner()
                } <
                div >
                <
                Link urlArgs = {
                    props.urlArgs
                } { ...props.urls.contactUs
                }
                data - eid = {
                    eids.globalDirectory
                }
                className = {
                    this.namespace('contact-link', 'global-list')
                } >
                <
                FormattedMessage id = {
                    golf.globalDirectoryList
                }
                /> <
                /Link> <
                /div> <
                /div>
            } <
            div className = {
                this.namespace('help-search-chat')
            }
            style = {
                {
                    display: showPhoneNumbers ? 'block' : 'none'
                }
            } > {
                this.renderChatSection(supportDetails)
            } <
            /div> <
            /div> <
            /div> <
            /div> <
            /TrayMenu>
        );
    }

    renderChatSection(supportDetails) {
        // Make chat data available in a global so chat team code can render it
        if (this.isBrowser) {
            const uxel = window && window.ux && window.ux.eldorado;
            if (uxel) {
                const messages = this.props.messages;

                uxel.chat_data = {
                    target: 'gdchat-container',
                    utilityChatEnabled: this.props.utilityChatEnabled,
                    enableHelpSearchContactTray: this.props.enableHelpSearchContactTray,
                    messages: {
                        ChatNow: messages['Shared:UtilityBar:SupportPhone:ChatNow'],
                        Chat: messages['Shared:UtilityBar:SupportPhone:Chat'],
                        ChatOffline: messages['Shared:UtilityBar:SupportPhone:ChatOffline'],
                        ChatHours: supportDetails.liveChatHours
                    }
                };
            }
        }

        // IMPORTANT: `#gdchat-container` is used by the Chat team to render their chat UI into.
        // Do not remove it or change it without talking to @clim & @mfloyd
        return ( <
            div id = 'gdchat-container' / >
        );
    }
}

ContactTray.propTypes = {
    ...NamespaceShape,
    supportContacts: PropTypes.object.isRequired,
    shopperId: PropTypes.string,
    contactTrayEnabled: PropTypes.bool,
    utilityChatEnabled: PropTypes.bool,
    enableHelpSearchContactTray: PropTypes.bool
};

ContactTray.defaultProps = {
    contactTrayEnabled: false,
    utilityChatEnabled: false,
    enableHelpSearchContactTray: false
};

export default withNamespace(ContactTray);