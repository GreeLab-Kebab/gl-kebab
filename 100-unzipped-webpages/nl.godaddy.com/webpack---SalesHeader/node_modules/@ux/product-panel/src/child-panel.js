import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    FormattedHTMLMessage
} from 'react-intl';
import {
    golf
} from './enums';
import golfToEid from 'golf-to-eid';
import Link from '@ux/link';
import {
    renderCaption
} from './utils';

class ChildPanel extends NamespaceConsumer {
    constructor() {
        super(...arguments);

        this.state = {
            ...this.state,
            hovered: false
        };
    }

    /**
     * render a back button
     *
     * @private
     * @returns {React.ReactElement} a div with a back btn
     */
    renderBackBtn() {
        return ( <
            div className = {
                this.namespace('child-flyout-back')
            } >
            <
            button onClick = {
                this.props.onBack
            }
            className = {
                this.namespace('btn')
            } >
            <
            FormattedHTMLMessage id = {
                golf.mainMenu
            }
            /> <
            /button> <
            /div>
        );
    }

    /**
     * Renders the heading at the top of the child panel
     * @param  {String} caption The text to render
     * @param  {Boolean} useLiteralCaptions Whether or not to render as literal string
     * @param  {String} href The destination for the link
     * @param  {Object} urlArgs Args to append to the href
     * @returns {React.ReactElement|string} `Link` component or span with literal string
     */
    renderTitle(caption, useLiteralCaptions, href, urlArgs) {
        const title = renderCaption(caption, useLiteralCaptions);
        if (typeof href === 'string' && href.length) {
            return ( <
                Link href = {
                    href
                }
                urlArgs = {
                    urlArgs
                }
                className = {
                    this.namespace('no-link-styling')
                } > {
                    title
                } <
                /Link>
            );
        }

        return title;
    }

    renderLearnMoreButton() {
        const props = this.props;
        const {
            leftnav = {}
        } = props.parent;
        const {
            href,
            btn,
            btnText,
            id
        } = leftnav;

        if (href && (btn || btnText)) {
            return ( <
                Link className = {
                    this.namespace('learn-more')
                }
                href = {
                    href
                }
                rel = 'nofollow'
                onClicked = {
                    props.onClose
                }
                urlArgs = {
                    props.urlArgs
                }
                data - eid = {
                    golfToEid(btn || id, {
                        prefix: props.eidPrefix,
                        postfix: 'link.click'
                    })
                } > {
                    renderCaption(btn || btnText, !btn)
                } <
                /Link>
            );
        }
    }

    /**
     * Renders panel title, description, and learn more btn if present
     * @returns {React.ReactElement} Div for title/description/learnmore
     */
    renderTitleAndDescription() {
            const props = this.props;
            const {
                leftnav = {}, caption, title
            } = props.parent;
            const text = caption || title;
            const description = leftnav.description || leftnav.descriptionText;

            return ( <
                    div className = {
                        this.namespace('child-panel-top-info')
                    } > {
                        text && < div className = {
                            this.namespace('product-flyout-heading')
                        } > {
                            this.renderTitle(text, !caption, leftnav.href, props.urlArgs)
                        } <
                        /div> } {
                            description && < p className = {
                                    this.namespace('description')
                                } > {
                                    renderCaption(description, !leftnav.description)
                                } {
                                    this.renderLearnMoreButton()
                                } <
                                /p> } <
                                /div>
                        );
                    }

                    /**
                     * Generate links
                     *
                     * @private
                     * @param {Object[]} items Array of objects to display as links
                     * @returns {React.ReactElement[]} a set of Links
                     */
                    renderLinks(items) {
                        const props = this.props;
                        const links = [];
                        items.forEach((child, i) => {
                            const {
                                caption,
                                title,
                                id,
                                href
                            } = child;
                            const text = caption || title;

                            if (href && href.length && text) {
                                const eid = golfToEid(caption || id, {
                                    prefix: props.eidPrefix,
                                    postfix: 'link.click'
                                });
                                links.push( <
                                    li key = {
                                        id || (caption + i)
                                    }
                                    className = {
                                        this.namespace('child-menu-link')
                                    } >
                                    <
                                    Link data - eid = {
                                        eid
                                    }
                                    href = {
                                        href
                                    }
                                    urlArgs = {
                                        props.urlArgs
                                    }
                                    onClicked = {
                                        props.onClose
                                    }
                                    onMouseEnter = {
                                        () => this.setState({
                                            hovered: true
                                        })
                                    }
                                    onMouseLeave = {
                                        () => this.setState({
                                            hovered: false
                                        })
                                    } > {
                                        renderCaption(text, !caption)
                                    } <
                                    /Link> <
                                    /li>
                                );
                            }
                        });
                        return links;
                    }

                    /**
                     * Render rows of children with given number of columns
                     * @param  {React.ReactElement[]} children Array of content to put in each column
                     * @param  {Number} numCols How many columns in each row
                     * @returns {React.ReactElement[]} Array of rows
                     */
                    renderRows(children, numCols) {
                        const rows = [];
                        const numKids = children.length;
                        // split children array into array of new arrays length `numCols`
                        const endLoop = Math.floor(numKids / numCols);
                        for (let i = 0; i <= endLoop; i++) {
                            const start = numCols * i;
                            if (start === numKids) {
                                // prevent an extra row from being added if numKids is evenly
                                // divisible by numCols
                                break;
                            }
                            const end = start + numCols;
                            rows.push(children.slice(start, end));
                        }

                        return rows.map((colArr, i) => {
                            // for each array of columns, start a row
                            // for each fragment in the array, start a column
                            return <div key = {
                                'row' + i
                            }
                            className = {
                                    this.namespace('child-menu-items-row')
                                } > {
                                    colArr.map((frag, j) => {
                                        return <div key = {
                                            j
                                        }
                                        className = {
                                                this.namespace('child-menu-items-col')
                                            } > {
                                                frag
                                            } <
                                            /div>;
                                    })
                                } <
                                /div>;
                        });
                    }

                    /**
                     * Renders a group of links that may or may not have a heading
                     * @private
                     * @param {Object[]} sections Array of objects for generating the sections of links
                     * @returns {React.ReactElement[]} a set of list items
                     */
                    renderSections(sections) {
                        const props = this.props;
                        const subNavSections = [];
                        sections.forEach((section, i) => {
                                const {
                                    caption,
                                    title,
                                    children
                                } = section;
                                if (Array.isArray(children) && children.length > 0) {
                                    let showSectionHeader = caption && props.messages[caption] !== props.messages[props.parent.caption];
                                    showSectionHeader = showSectionHeader || title !== props.parent.title;
                                    subNavSections.push( <
                                        React.Fragment key = {
                                            section.id || (caption + i)
                                        } > {
                                            showSectionHeader && < div className = {
                                                this.namespace('child-menu-header', 'title', 'small')
                                            } > {
                                                renderCaption(caption || title, !caption)
                                            } <
                                            /div> } <
                                            ul className = {
                                                this.namespace('child-menu-links', 'list-unstyled')
                                            } > {
                                                this.renderLinks(children)
                                            } <
                                            /ul> <
                                            /React.Fragment>
                                        );
                                    }
                                });
                            if (subNavSections.length === 0) {
                                // no subNavSections, just a list of links
                                return this.renderLinks(sections);
                            }
                            return subNavSections;
                        }


                        /**
                         * Render panel displaying subnav if navigation menu is open
                         *
                         * @private
                         *
                         * @returns {React.ReactElement} div for the subnav panel
                         */
                        render() {
                            const {
                                props,
                                state
                            } = this;
                            const columnContent = this.renderSections(props.navigation);

                            return ( <
                                div className = {
                                    this.namespace(
                                        this.classNames('child-menu-panel', {
                                            open: props.open
                                        }, {
                                            'product-flyout-hovered-menu': props.open && state.hovered
                                        }))
                                } > {
                                    this.renderBackBtn()
                                } <
                                div className = {
                                    this.namespace('child-menu-container', 'menu-scroller')
                                }
                                onScroll = {
                                    this.props.onScroll
                                }
                                ref = {
                                    (r) => {
                                        this.outerDiv = r;
                                    }
                                } >
                                <
                                div ref = {
                                    (r) => {
                                        this.innerDiv = r;
                                    }
                                } > {
                                    this.renderTitleAndDescription()
                                } {
                                    this.renderRows(columnContent, 2)
                                } <
                                /div> <
                                /div> <
                                /div>
                            );
                        }
                    }

                    /**
                     * PropType validation for SubNavPanel
                     *
                     * @type {Object}
                     * @api public
                     */
                    ChildPanel.propTypes = {
                        ...NamespaceShape,
                        eidPrefix: PropTypes.string,
                        navigation: PropTypes.array.isRequired,
                        onBack: PropTypes.func,
                        onClose: PropTypes.func,
                        open: PropTypes.bool,
                        parent: PropTypes.object.isRequired
                    };

                    /**
                     * Default property values.
                     *
                     * @type {Object}
                     * @public
                     */
                    ChildPanel.defaultProps = {
                        onBack: () => {},
                        onClose: () => {},
                        open: false
                    };

                    export default withNamespace(ChildPanel);