import {
    FormattedMessage
} from 'react-intl';
import React, {
    Component
} from 'react';
import PropTypes from 'prop-types';
import AccountDelegation from './';
import * as modal from './modal';
import Button from '@ux/button';
import Modal from '@ux/modal';

/**
 * ClickGuard modal.
 *
 * @class Title
 * @api private
 */
class ClickGuard extends Component {
    /**
     * Event handler for cancel or continue button. This will always close the modal,
     * but the original guarded action could still be performed.
     *
     * @param {Boolean} allow Should callback be called
     * @returns {Function} event handler
     * @api private
     */
    close(allow) {
        const props = this.props;

        return () => {
            this.ref.close();

            //
            // Continue button was clicked, call the supplied callback.
            //
            if (allow) {
                props.callback(props.event);
            }
        };
    }

    /**
     * Modal title, fallback to default.
     *
     * @returns {ReactElement} title
     * @api private
     */
    get title() {
        return this.props.title || < FormattedMessage id = 'Shared:AccountDelegation:deny-all-title' / > ;
    }

    /**
     * Modal footer buttons.
     *
     * @returns {ReactElement} both cancel and continue button
     * @api private
     */
    get footer() {
        return [ <
            Button key = 'cancel'
            onClick = {
                this.close()
            } >
            <
            FormattedMessage id = 'Shared:AccountDelegation:cancel' / >
            <
            /Button>, <
            Button key = 'continue'
            design = 'default'
            onClick = {
                this.close(true)
            } > {
                this.props.caption || < FormattedMessage id = 'Shared:AccountDelegation:continue' / >
            } <
            /Button>
        ];
    }

    render() {
        return ( <
            Modal ref = {
                c => {
                    this.ref = c;
                }
            }
            title = {
                this.title
            }
            footer = {
                this.footer
            } > {
                this.props.message || < FormattedMessage id = 'Shared:AccountDelegation:deny-all-msg' / >
            } <
            /Modal>
        );
    }
}

/**
 * Custom clickguard modal properties.
 *
 * @enum {Object}
 * @api public
 */
ClickGuard.propTypes = {
    message: PropTypes.string,
    caption: PropTypes.string,
    title: PropTypes.string,
    callback: PropTypes.func,
    event: PropTypes.any
};

/**
 * Setup event listener to intercept events when account delegation is active.
 *
 * @param {String} market Locale.
 * @param {Object} messages Internationalized strings.
 * @param {Object} props Additional properties required for customized modal
 * @param {Function} done Completion callback
 * @returns {Function} Event listener
 * @api private
 */
export default function clickguard(market, messages, props = {}, done) {
    if (typeof props === 'function') {
        done = props;
        props = {};
    }

    return function handle(event) {
        if (!AccountDelegation.active) {
            return done(event);
        }

        modal.render( < ClickGuard { ...props
            }
            market = {
                market
            }
            event = {
                event
            }
            callback = {
                done
            }
            />, market, messages);
        };
    }