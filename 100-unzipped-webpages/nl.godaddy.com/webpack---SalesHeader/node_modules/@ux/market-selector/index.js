import React from 'react';
import PropTypes from 'prop-types';
import {
    NamespaceConsumer,
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import {
    IntlProvider,
    FormattedMessage
} from 'react-intl';
import Link from '@ux/link';
import {
    Columns,
    ColumnItem
} from '@ux/column-layout';
import {
    TrayMenu,
    TrayTitle
} from '@ux/tray-menu';
import {
    URL
} from '@ux/util';
import golfToEid from 'golf-to-eid';

/**
 * Market selector component.
 *
 * This renders an anchor with the label showing the current market. When it is
 * clicked it will open up a tray dropdown with all the available markets.
 * Clicking on them will then fire of a transfer to the market website.
 *
 * @class Columns
 * @public
 */
export class MarketSelector extends NamespaceConsumer {
    constructor() {
        super(...arguments);
        this.onTrayToggle = this.onTrayToggle.bind(this);
        this.lockScroll = this.lockScroll.bind(this);
        this.unlockScroll = this.unlockScroll.bind(this);
    }

    /**
     * Return the label for a market.
     * Ex: en-US becomes "United States - English"
     *
     * @param {String} name market
     * @returns {String} Label for the specified market
     * @private
     */
    getMarketLabel(name) {
        if (!this.props.marketData) {
            return name;
        }

        const marketInfo = this.props.marketData[name];

        if (!marketInfo) {
            return;
        }
        return `${marketInfo.countryName} - ${marketInfo.languageName}`;
    }

    /**
     * Return the market for the aria-label.
     * Ex: en-US becomes "United States - English"
     *
     * @param {String} name market
     * @returns {String} Label for the specified market
     * @private
     */
    getMarketDescription(name) {
        if (!this.props.marketData) {
            return name;
        }

        const marketInfo = this.props.marketData[name];
        if (!marketInfo) {
            return "Unknown market";
        }
        return marketInfo.description;
    }

    /**
     * Once we've mounted we need to listen for all breakpoints.
     */
    componentDidMount() {
        this.breakpoint('mobile', 'phablet', 'tablet', 'desktop', 'large');
    }

    /**
     * When we unmount stop listening for all breakpoint events.
     */
    componentWillUnmount() {
        this.breakup();
    }

    /**
     * If we are on a mobile breakpoint, then invoke the handlers to potentially
     * lock or unlock scrolling for the `document.body`.
     *
     * @param  {Boolean} open Value indicating if the TrayMenu in this Component is open.
     */
    onTrayToggle(open) {
        if (!this.isMobile) {
            return;
        }
        if (open) {
            this.lockScroll();
        }
        if (!open) {
            this.unlockScroll();
        }
    }

    /**
     * Add a class to set `overflow: hidden;`  on `document.body`.
     * This prevents scrolling of background content.
     *
     * TODO: Apply the Mobile Safari fix for GX-4564 when complete.
     */
    lockScroll() {
        //
        // Add className to the target to indicate that the TrayMenu is open.
        // This className ensures that the correct scroll bars are added when we
        // have content that is overflowing.
        //
        if (this.props.lockScrollOnOpen) {
            const target = document.body;
            target.classList.add(this.namespace('market-selector-open'));
        }
    }

    /**
     * Add a class to set `overflow: hidden;`  on `document.body`.
     * This prevents scrolling of background content.
     *
     * TODO: Apply the Mobile Safari fix for GX-4564 when complete.
     */
    unlockScroll() {
        //
        // Remove className to the target to indicate that the TrayMenu is closed.
        //
        const target = document.body;
        target.classList.remove(this.namespace('market-selector-open'));
    }

    /**
     * Render the markets into columns.
     *
     * @returns {Array} markets Array of ColumnItems
     * @private
     */
    renderMarkets() {
        const {
            manifest,
            eidPrefix,
            currentMarket,
            currentPage = '',
            urls = {},
            urlArgs,
            marketData,
            isReseller
        } = this.props;

        const marketNames = this.props.markets;

        let markets = [];
        if (marketData && marketNames) {
            markets = marketNames.reduce((acc, marketName) => {
                const marketDataForMarket = marketData[marketName];
                if (marketDataForMarket)
                    acc.push(marketDataForMarket);
                return acc;
            }, []);
        }

        urls.markets = urls.markets || {};
        urls.pcgo = urls.pcgo || {};

        //
        // All links to change market must go through GUI (the service urls.pcgo points to).
        // The GUI service sets the `market` cookie before redirecting to the `currentPage`.
        //
        const redirect = new URL(urls.pcgo.href, true);
        redirect.set('pathname', `${redirect.pathname}/${currentPage}`);

        return markets.reduce((acc, market) => {
            const marketName = market.market || '';
            const eid = golfToEid(`:${marketName.replace(/-/g, '_')}`, {
                prefix: `${eidPrefix}.${golfToEid(manifest)}.market_selector`,
                postfix: 'click'
            });
            let url = urls.markets[marketName] || '#';
            if (typeof url === 'string') {
                url = {
                    href: url
                };
            }

            // During client re-render in reseller sales header, include explicit
            // target parameter specifying current location.
            if (this.isBrowser && isReseller) {
                url = new URL(url.href, true);

                url.set('query', {
                    ...url.query,
                    target: window.location.href
                });

                url = {
                    href: url.href
                };
            }

            if (market) {
                redirect.set('query', {
                    ...redirect.query,
                    regionsite: market.countrySite,
                    marketid: market.market
                });

                acc.push( <
                    ColumnItem key = {
                        marketName
                    }
                    isSelected = {
                        marketName === currentMarket
                    } > { /* We use the `redirect` feature in <Link /> to redirect to a different */ } { /* href on click than that which is displayed to the user. */ } <
                    Link { ...url
                    }
                    data - tcc - ignore urlArgs = {
                        urlArgs
                    }
                    redirect = {
                        isReseller ? null : redirect.href
                    }
                    data - market = {
                        marketName
                    }
                    data - eid = {
                        eid
                    } >
                    <
                    span data - tcc - ignore >
                    <
                    strong data - tcc - ignore > {
                        market.countryName
                    } < /strong> - { market.languageName } <
                    /span> <
                    /Link> <
                    /ColumnItem>
                );
            }

            return acc;
        }, []);
    }

    /**
     * Get the two-letter short language code for the specified market
     * e.g. en-US: EN, el-GR: EL, fr-CA: FR
     *
     * If a displayCode is returned from the Markets API, use that instead.
     *
     * @param {String} market The market name to parse (e.g. en-US, el-GR, fr-CA)
     * @returns {String} The language code of the specified market, in upper case
     * @private
     */
    getShortLanguageCode(market) {
        if (!market || typeof market !== 'string')
            return '';

        const marketInfo = this.props.marketData && this.props.marketData[market];
        const displayCode = marketInfo && marketInfo.displayCode;

        if (displayCode) {
            return displayCode;
        }

        const marketParts = market.split('-');
        return marketParts[0].toUpperCase();
    }

    /**
     * Generate the tray title to show
     *
     * @returns {ReactElement} The title node to show for the tray
     * @private
     */
    getTrayName() {
        const {
            currentMarket,
            compact
        } = this.props;

        const currentMarketName = this.getMarketLabel(currentMarket) || 'Unknown market';

        if (compact) {
            const currentMarketCode = this.getShortLanguageCode(currentMarket);
            return ( <
                span title = {
                    currentMarketName
                } > {
                    currentMarketCode
                } <
                /span>
            );
        }

        // Otherwise, just return the market name directly
        return currentMarketName;
    }

    /**
     * Render the component.
     *
     * @returns {ReactElement} TrayMenu
     * @api public
     */
    render() {
        const {
            numColumns,
            messages,
            currentMarket,
            eidPrefix,
            manifest
        } = this.props;
        const eid = golfToEid('market_selector', {
            prefix: `${eidPrefix}.${golfToEid(manifest)}`,
            postfix: 'click'
        });
        const marketDescription = this.getMarketDescription(currentMarket);

        if (this.trayMenu) {
            const isOpen = this.trayMenu.state.open;

            if (this.isMobile && isOpen) {
                this.lockScroll();
            } else if ((this.isMobile && !isOpen) || (!this.isMobile && isOpen)) {
                this.unlockScroll();
            }
        }

        return ( <
            IntlProvider locale = {
                currentMarket
            }
            messages = {
                messages
            } >
            <
            FormattedMessage id = 'Shared:UtilityBar:MarketSelectorTray:AriaLabel'
            values = {
                {
                    selection: marketDescription
                }
            } > {
                (marketSelectorTray) =>
                <
                TrayMenu ariaLabel = {
                    marketSelectorTray
                }
                type = 'base'
                ref = {
                    c => this.trayMenu = c
                } // eslint-disable-line no-return-assign
                name = {
                    this.getTrayName()
                }
                className = {
                    this.namespace('market-selector')
                }
                onToggle = {
                    this.onTrayToggle
                }
                data - eid = {
                    eid
                } >
                <
                div className = {
                    this.namespace('container')
                } >
                <
                TrayTitle >
                <
                FormattedMessage id = 'Shared:UtilityBar:MarketSelectorTray:Title' / >
                <
                /TrayTitle> <
                Columns num = {
                    numColumns
                }
                style = 'vertical'
                className = {
                    this.namespace('market-list')
                } > {
                    this.renderMarkets()
                } <
                /Columns> <
                /div> <
                /TrayMenu> } <
                /FormattedMessage> <
                /IntlProvider>
            );
        }
    }

    /**
     * Property definitions.
     *
     * @type {Object}
     * @public
     */
    MarketSelector.propTypes = {
        ...NamespaceShape,
        manifest: PropTypes.string,
        eidPrefix: PropTypes.string,
        currentMarket: PropTypes.string.isRequired,
        numColumns: PropTypes.number,
        markets: PropTypes.array,
        urls: PropTypes.object.isRequired,
        urlArgs: PropTypes.object,
        messages: PropTypes.object.isRequired,
        compact: PropTypes.bool,
        open: PropTypes.bool,
        lockScrollOnOpen: PropTypes.bool,
        marketData: PropTypes.object,
        isReseller: PropTypes.bool
    };

    /**
     * Default property values.
     *
     * @type {Object}
     * @public
     */
    MarketSelector.defaultProps = {
        manifest: 'SalesHeader',
        eidPrefix: 'uxp.hyd',
        currentMarket: 'en-US',
        numColumns: 4,
        urlArgs: {},
        compact: false,
        open: false,
        lockScrollOnOpen: false,
        marketData: {}
    };

    export default withNamespace(MarketSelector);