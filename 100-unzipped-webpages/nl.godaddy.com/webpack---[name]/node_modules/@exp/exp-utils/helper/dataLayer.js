'use strict';

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var browserHelper = require('./browser');
var windowHelper = require('./window');
var arrayHelper = require('./array');

var logger = require('./logger');

var DataLayer = function() {
    function DataLayer(dataLayerName) {
        _classCallCheck(this, DataLayer);

        this.dataLayerName = dataLayerName;
        this.dataLayerLog = [];
        this.asyncCommands = [];
        this.loaded = false;

        // This will contain any records that were logged to
        // to the global dataLayer BEFORE traffic was loaded.
        var asyncDataLayer = browserHelper.getWindow()[this.dataLayerName];
        if (asyncDataLayer) {
            this.asyncCommands = asyncDataLayer;
        }

        // Update the global dataLayer to use this class
        windowHelper.setWindowVar(this.dataLayerName, this);
        this.dataLayer = browserHelper.getWindow()[this.dataLayerName];
    }

    DataLayer.prototype.start = function start() {
        // Process all records that were added before TCC initialized
        this.loadAsyncCommands();
    };

    DataLayer.prototype.pushLog = function pushLog(cmd) {
        if (process.env.NODE_ENV !== 'production') {
            logger.debug('>>> Push to', this.dataLayerName, 'with', cmd);
        }
        arrayHelper.logToArray(this.dataLayerLog, cmd);
    };

    // Abstract


    DataLayer.prototype.process = function process() {};

    DataLayer.prototype.push = function push(cmd) {
        // If the datalayer is not loaded (i.e. the document is not yet loaded), push to the asyncCommands
        if (!this.loaded) {
            this.asyncCommands.push(cmd);
        } else {
            this.process(cmd);
        }
    };

    DataLayer.prototype.loadAsyncCommands = function loadAsyncCommands() {
        while (this.asyncCommands.length > 0) {
            this.process(this.asyncCommands.shift());
        }
        this.loaded = true;
    };

    return DataLayer;
}();

module.exports = DataLayer;