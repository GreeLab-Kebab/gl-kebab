'use strict';

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var logger = require('./logger');

function _isFn(fn) {
    return fn && {}.toString.call(fn) === '[object Function]';
}

var LoadHelper = function() {
    function LoadHelper() {
        _classCallCheck(this, LoadHelper);
    }

    LoadHelper.prototype._executeFn = function _executeFn(fn) {
        try {
            fn();
        } catch (error) {
            logger.error('Exception while executing onLoad callback', fn, error);
        }
    };

    LoadHelper.prototype._triggerOnLoad = function _triggerOnLoad() {
        this._loaded = true;
        for (var i = 0; i < this._onLoadFns.length; i++) {
            this._executeFn(this._onLoadFns[i]);
        }
    };

    LoadHelper.prototype.registerOnLoadFn = function registerOnLoadFn(fn) {
        if (_isFn(fn)) {
            // If the onLoad has already triggered, execute the fn immediately
            if (this._loaded) {
                this._executeFn(fn);
            } else {
                this._onLoadFns.push(fn);
            }
        } else if (process.env.NODE_ENV !== 'production') {
            logger.error('Callback passed to registerOnLoadFn is not a valid function', fn);
        }
    };

    LoadHelper.prototype.init = function init(isLoaded, notLoadedCb) {
        this._loaded = false;
        this._onLoadFns = [];

        // If already loaded, set _loaded=true so that functions
        // are processed immediately after they're registered
        if (isLoaded) {
            this._loaded = true;
        } else {
            notLoadedCb(this._triggerOnLoad.bind(this));
        }
    };

    return LoadHelper;
}();

module.exports = LoadHelper;