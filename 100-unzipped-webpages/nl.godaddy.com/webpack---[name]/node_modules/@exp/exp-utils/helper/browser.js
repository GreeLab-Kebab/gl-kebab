'use strict';

var configHelper = require('./config');
var object = require('./object');

var browserConfig = function() {
    var emptyDocument = {
        cookie: ''
    };
    var emptyWindow = {
        document: emptyDocument
    };
    var emptyNavigator = {};

    if (typeof window === 'undefined') {
        return {
            window: emptyWindow,
            document: emptyDocument,
            navigator: emptyNavigator
        };
    }
    return {
        window: window || emptyWindow,
        document: window.document || emptyDocument,
        navigator: navigator || emptyNavigator
    };
}();

function getWindow() {
    return browserConfig.window;
}

// Used for test
function _setWindow(newWindow) {
    browserConfig.window = newWindow || {};
}

function getDocument() {
    return browserConfig.document;
}

/**
 * @param {string} cookieStr
 * @returns {string | void}
 */
function parseCookie(cookieStr) {
    var cookies = cookieStr.split('; ');
    var cookieObj = Object.create(null);
    for (var i = 0; i < cookies.length; i++) {
        var match = /([^=]*)*=([\s\S]*)/.exec(cookies[i]);
        // empty cookies are treated as undefined
        if (match && match[2]) {
            var key = match[1];
            var value = decodeURIComponent(match[2]);
            cookieObj[key] = value;
        }
    }

    return cookieObj;
}

// Used for test
function _setDocument(newDocument) {
    var toInsert = newDocument || {};
    browserConfig.window.document = toInsert;
    browserConfig.document = toInsert;
}

function getNavigator() {
    return browserConfig.navigator;
}

// Used for test
function _setNavigator(newNagivator) {
    browserConfig.navigator = newNagivator || {};
}

function getHost() {
    var location = getWindow().location;
    if (location && location.hostname) {
        return location.hostname;
    }
    return '';
}

// Returns false if browser is IE 1-8
function isSupported() {
    var userAgent = getNavigator().userAgent.toLowerCase();
    if (/msie [1-8]\./.test(userAgent)) {
        return false;
    }
    return true;
}

function getBaseHost(dlOverride) {
    var host = getHost();

    if (dlOverride && configHelper.isSet(dlOverride)) {
        host = configHelper.get(dlOverride);
    }

    var split = host.split('.');
    if (split.length >= 2) {
        var lastTwoElem = split.slice(split.length - 2);
        host = lastTwoElem.join('.');
    }
    return host;
}

function isCorporateHost(hostname) {
    var host = hostname || getBaseHost();
    return host.indexOf('godaddy.com') >= 0 || host.indexOf('secureserver.net') >= 0;
}

function formatPageName(pagename) {
    if (typeof pagename !== 'string' || typeof pagename === 'undefined' || pagename === '') {
        return 'notspecified';
    }

    if (pagename.lastIndexOf('/') === pagename.length - 1) {
        pagename = pagename.substring(0, pagename.length - 1);
    }
    if (pagename.indexOf('/') !== 0) {
        pagename = '/' + pagename;
    }
    return pagename;
}

function _getClickCoordinates(doc, nav, evt) {
    // eslint-disable-line complexity
    // custom events might not have coordinates, so exit early.
    if (!evt || !evt.clientX || !evt.clientY || !evt.pageX || !evt.pageY) {
        return;
    }

    var coords = {};

    if (doc && nav && nav.userAgent.indexOf('MSIE') !== -1) {
        var standardBody = doc.compatMode === 'CSS1Compat' ? doc.documentElement : doc.body;
        coords.pagex = Math.round(evt.clientX + (standardBody.scrollLeft ? standardBody.scrollLeft : 0));
        coords.pagey = Math.round(evt.clientY + (standardBody.scrollTop ? standardBody.scrollTop : 0));
    } else {
        coords.pagex = Math.round(evt.pageX);
        coords.pagey = Math.round(evt.pageY);
    }

    coords.clientx = Math.round(evt.clientX);
    coords.clienty = Math.round(evt.clientY);

    return coords;
}

function _findPosX(obj) {
    var curleft = 0;
    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curleft += obj.offsetLeft;
            obj = obj.offsetParent;
        }
    } else if (obj.x) {
        curleft += obj.x;
    }
    return curleft;
}

function _findPosY(obj) {
    var curtop = 0;
    if (obj.offsetParent) {
        while (obj.offsetParent) {
            curtop += obj.offsetTop;
            obj = obj.offsetParent;
        }
    } else if (obj.y) {
        curtop += obj.y;
    }
    return curtop;
}

function iterateAncestors(callback, element, level) {
    var currentlevel = level || 1;
    if (!element || currentlevel > 10) {
        // iterate up to 10 levels
        return;
    }

    var callbackReturn = callback(element); // eslint-disable-line callback-return
    if (!callbackReturn && element.parentNode) {
        return iterateAncestors(callback, element.parentNode, currentlevel + 1);
    }

    return callbackReturn;
}

// only works for non FF browsers.
function _getWindowEvent() {
    return getWindow().event;
}

function _getEventElement() {
    var ev = _getWindowEvent();
    if (typeof ev === 'undefined' || ev === null) {
        return;
    }

    var target = ev.target || ev.srcElement;
    if (typeof target === 'undefined' || target === null) {
        return;
    }

    if (target.nodeType && target.nodeType === 3) {
        // defeat Safari bug
        target = target.parentNode;
    }
    return target;
}

function getAttributeFromElement(element, key) {
    if (element && element.attributes && element.attributes[key] && element.attributes[key].value) {
        return element.attributes[key].value;
    }
}

function isValidHrefElement(element) {
    var nodeName = element.nodeName;
    return nodeName === 'A' || nodeName === 'AREA';
}

function getPromoEventData(el) {
    var theElement = el || _getEventElement();

    var ep = {};

    var attributeLookup = {
        schema: 'data-schema',
        id: 'data-promo-id',
        name: 'data-promo-name',
        creative_name: 'data-creative-name',
        creative_slot: 'data-creative-slot'
    };

    if (theElement) {
        iterateAncestors(function(srcElem) {
            // eslint-disable-line complexity
            object.map(attributeLookup, function(key, value) {
                var attrValue = getAttributeFromElement(srcElem, value);
                if (attrValue && !ep[key]) {
                    ep[key] = attrValue;
                }
            });

            // When dealing with anchor tag, pull href attribute
            if (isValidHrefElement(srcElem)) {
                ep.href = getAttributeFromElement(srcElem, 'href');
            }
        }, theElement);
    }

    return ep;
}

function getClickEventData(el, evt) {
    var doc = getDocument();
    var nav = getNavigator();

    var theEvent = evt || _getWindowEvent();
    var theElement = el || _getEventElement();

    var ep = {};

    if (theElement) {
        // pull values from the DOM event.
        ep.type = theElement.type;
        ep.eventid = theElement.id;
        ep.eventclass = theElement.className;
        ep.eventname = theElement.name;

        iterateAncestors(function(srcElem) {
            // eslint-disable-line complexity
            // Get alternative data
            var tcode = getAttributeFromElement(srcElem, 'data-tcode');
            var tdata = getAttributeFromElement(srcElem, 'data-tdata');
            var ci = getAttributeFromElement(srcElem, 'data-ci');
            var tms = getAttributeFromElement(srcElem, 'data-tms');

            // Multiple sources for eId
            var eId = getAttributeFromElement(srcElem, 'data-eid');
            if (!eId) {
                eId = getAttributeFromElement(srcElem, 'data-e_id');
            }
            if (!eId) {
                eId = getAttributeFromElement(srcElem, 'e_id');
            }
            var href = void 0;

            // When dealing with anchor tag, pull href attribute
            if (isValidHrefElement(srcElem)) {
                href = getAttributeFromElement(srcElem, 'href');
            }

            // Wrap it up if we have any alternative data
            if (tcode || tdata || ci || tms || eId || href) {
                if (tcode) {
                    ep.tcode = tcode;
                }
                if (tdata) {
                    ep.usrin = tdata;
                }
                if (ci) {
                    ep.ci = ci;
                }
                if (tms) {
                    ep.tms = tms;
                }
                if (eId) {
                    ep.e_id = eId;
                }
                if (href) {
                    ep.href = href;
                }
                return ep;
            }
        }, theElement);

        var coords = _getClickCoordinates(doc, nav, theEvent);

        if (coords) {
            ep.absolutex = coords.pagex;
            ep.absolutey = coords.pagey;
            ep.relativex = coords.clientx;
            ep.relativey = coords.clienty;
        } else {
            // calculates the x,y of the element.  We'll use this if we can't get the click coordinates.
            var x = _findPosX(theElement);
            var y = _findPosY(theElement);
            ep.absolutex = x;
            ep.absolutey = y;
            ep.relativex = x;
            ep.relativey = y;
        }
    }

    object.removeUndefined(ep);

    return ep;
}

var internalExports = {};
if (process.env.NODE_ENV !== 'production') {
    internalExports = {
        _findPosX: _findPosX,
        _findPosY: _findPosY,
        _getClickCoordinates: _getClickCoordinates,
        _getEventElement: _getEventElement,
        _getWindowEvent: _getWindowEvent,
        _setDocument: _setDocument,
        _setNavigator: _setNavigator,
        _setWindow: _setWindow
    };
}

module.exports = object.merge({
    formatPageName: formatPageName,
    getAttributeFromElement: getAttributeFromElement,
    getBaseHost: getBaseHost,
    getClickEventData: getClickEventData,
    getDocument: getDocument,
    getHost: getHost,
    getNavigator: getNavigator,
    getWindow: getWindow,
    isValidHrefElement: isValidHrefElement,
    iterateAncestors: iterateAncestors,
    isCorporateHost: isCorporateHost,
    isSupported: isSupported,
    getPromoEventData: getPromoEventData,
    parseCookie: parseCookie
}, internalExports);