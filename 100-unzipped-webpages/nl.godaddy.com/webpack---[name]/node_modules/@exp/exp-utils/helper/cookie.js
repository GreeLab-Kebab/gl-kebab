'use strict';

var browserHelper = require('./browser');
var object = require('./object');

// used to avoid parsing the same string multiple times
var cookieCacheStr = void 0;
var cookieCacheObj = void 0;

function setCookie(name, value, minutes, path) {
    var date = new Date();
    date.setTime(date.getTime() + minutes * 60 * 1000);

    browserHelper.getDocument().cookie = name + '=' + encodeURI(value) + '; domain=' + browserHelper.getBaseHost() + (minutes ? '; expires=' + date.toGMTString() : '') + (path ? '; path=' + path : '');
}

/**
 * @param {string} name 
 */
function findCookie(name) {
    var cookieStr = browserHelper.getDocument().cookie;
    if (cookieCacheStr !== cookieStr) {
        cookieCacheObj = browserHelper.parseCookie(cookieStr);
        cookieCacheStr = cookieStr;
    }
    return cookieCacheObj[name];
}

function getCookieValues(cookieName) {
    // Returns cookie data as key/value pairs
    var cookie = findCookie(cookieName);
    return object.parseString(cookie, '&', '=');
}

function getCookieValue(cookieName, key) {
    var val = getCookieValues(cookieName);
    if (val.hasOwnProperty(key)) {
        return val[key];
    }
}

function checkCookiesEnabled(nav) {
    var cookieEnabled = !!nav.cookieEnabled;
    if (typeof nav.cookieEnabled === 'undefined' && !cookieEnabled) {
        setCookie(browserHelper.getDocument(), 'testcookie');
        cookieEnabled = browserHelper.getDocument().cookie.indexOf('testcookie') !== -1;
    }
    return cookieEnabled;
}

// Used to get and parse json blobs from cookies
function getCookieObj(cookieName) {
    var foundCookie = findCookie(cookieName);

    try {
        foundCookie = JSON.parse(foundCookie);
        return foundCookie;
    } catch (err) {
        return;
    }
}

// Returns an array containing all cookie keys
function getCookieKeys() {
    var keys = [];
    var cookies = browserHelper.getDocument().cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var key = cookies[i].split('=')[0];
        if (key === '') continue;
        keys.push(key.trim());
    }
    return keys;
}

var _cookieVal = void 0;
var _watchCookieInterval = void 0;
var _cookieChangeCallbacks = [];

// Notifies all watchers that a cookie has changed
// Will remove a watcher if the callback is successful
function _notifyWatchers() {
    for (var i = 0; i < _cookieChangeCallbacks.length; i++) {
        try {
            var result = _cookieChangeCallbacks[i]();
            // Remove the watcher if callback returns with success
            if (result === true) {
                _cookieChangeCallbacks.splice(i, 1);
            }
        } catch (ex) {
            continue;
        }
    }
}

// Registers a callback fn that will be called whenever a cookie is modified on the page
function watchCookie(fn) {
    // Call the callback immediately to see if there is a successful return
    var result = fn();

    // If successful, do not register the callback
    if (result === true) {
        return;
    }

    // Register the callback
    _cookieChangeCallbacks.push(fn);

    // If this is the first watcher, create an interval
    if (_cookieChangeCallbacks.length === 1) {
        _watchCookieInterval = setInterval(function() {
            // If the cookie has changed, notify watchers
            if (_cookieVal !== browserHelper.getDocument().cookie) {
                _cookieVal = browserHelper.getDocument().cookie;
                _notifyWatchers();
            }

            // If there are no more watchers, stop the interval
            if (_cookieChangeCallbacks.length === 0) {
                clearInterval(_watchCookieInterval);
            }
        }, 200);
    }
}

var internalExports = {};
if (process.env.NODE_ENV !== 'production') {
    internalExports = {
        _notifyWatchers: _notifyWatchers,
        resetCookieCache: function resetCookieCache() {
            cookieCacheStr = undefined;
            cookieCacheObj = Object.create(null);
        }
    };
}

module.exports = object.merge({
    checkCookiesEnabled: checkCookiesEnabled,
    findCookie: findCookie,
    getCookieKeys: getCookieKeys,
    getCookieObj: getCookieObj,
    getCookieValue: getCookieValue,
    getCookieValues: getCookieValues,
    setCookie: setCookie,
    watchCookie: watchCookie
}, internalExports);