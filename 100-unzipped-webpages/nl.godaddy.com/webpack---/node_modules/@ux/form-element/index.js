import {
    withNamespace,
    NamespaceShape
} from '@ux/namespace-component';
import {
    propTypes
} from './enums';
import Fieldset from '@ux/fieldset';
import PropTypes from 'prop-types';
import Textual from './textual';
import Base from './element';
import Flip from './flip';
import React from 'react';

/**
 * Render a form element.
 *
 * @constructor
 * @public
 */
class FormElement extends Base {
    /**
     * test if item is a button
     *
     * @param {Object} item item to test.
     * @returns {bool} result
     * @private
     */
    _isButton(item) {
        return item && item.props && item.props.type === 'button';
    }

    /**
     * Wraps the button in a anchor tag.
     *
     * @param {string} classNames css string for the button.
     * @returns {Object} Fully formed anchor tag with relevant button props.
     * @private
     */
    _buttonAnchor(classNames) {
        let href = this.select('href');
        let action = this.select('action');
        if (action) action = action.bind(this);

        const navigation = this.select('navigation');
        const button = this.select('button');
        if (typeof navigation === 'string' && typeof button === 'string') {
            classNames += ' pl-3';
        }

        const props = {
            'onClick': action,
            'ref': btn => {
                this.elements.button = btn;
            },
            'className': classNames,
            'aria-label': 'form_action_button'
        };

        if (!navigation) {
            if (!href && typeof button === 'string') {
                href = '#';
            }

            props.href = href;
        }

        return ( <
            a { ...props
            } > {
                button
            } <
            /a>
        );
    }

    /**
     * Optionally render the `button` and/or `navigation` props in label if supplied.
     * If { navigation, button, href } are supplied together then `href` will be applied
     * to `navigation`.
     *
     * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
     * @private
     */
    _button() {
        let navigation = this.select('navigation');
        let button = this.select('button');

        if (!button && !navigation) return;

        let href = this.select('href');
        const classNames = this.namespace('btn', 'btn-tertiary-inline', 'btn-sm');
        if (button) {
            button = this._buttonAnchor(classNames);
        }

        if (navigation && !this._isButton(navigation)) {
            if (!href) {
                href = '#';
            }

            navigation = ( <
                a href = {
                    href
                }
                ref = {
                    nav => {
                        this.elements.navigation = nav;
                    }
                }
                className = {
                    classNames
                }
                aria - label = 'form_action_navigation' > {
                    this.select('navigation')
                } <
                /a>
            );
        }

        return ( <
            div className = {
                this.namespace('pull-right')
            }
            key = 'button' > {
                navigation
            } {
                button
            } <
            /div>
        );
    }

    /**
     * Optionally render a * (required) indicator
     *
     * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
     * @private
     */
    _required() {
        if (!this.select('required')) return;

        return ( <
            span className = {
                this.namespace('req')
            }
            aria - label = 'required' >
            *
            <
            /span>
        );
    }

    /**
     * Generate an input element based on the generated data.
     *
     * @param {Object} data Input creation information.
     * @returns {React.DOM} The generated input element.
     * @private
     */
    _input(data) {
        data = data || this.attributes();
        this.ignoreProps.push('href');
        this.ignoreProps.push('action');

        const spread = this.filter(data);
        const grid = this.select('grid') || {};
        const InputType = data.type !== 'textarea' ? 'input' : 'textarea';
        const input = < InputType { ...spread
        } { ...data
        }
        ref = {
            i => {
                this.elements.input = i;
            }
        }
        />;

        if (!grid.input) {
            return input;
        }

        return ( <
            div className = {
                grid.input
            } > {
                input
            } <
            /div>
        );
    }

    /**
     * Optionally include a notice in the form element if provided through the
     * options.
     *
     * @returns {React.DOM|Undefined} A React DOM structure if we're supplied with a notice
     * @private
     */
    _notice() {
        if (!this.select('notice')) return;

        return ( <
            small className = {
                this.namespace('form-text', 'text-muted')
            }
            ref = {
                notice => {
                    this.elements.notice = notice;
                }
            }
            aria - label = 'form_input_instructions' > {
                this.select('notice')
            } <
            /small>
        );
    }

    /**
     * Render an error message below an input.
     *
     * @returns {React.DOM|Undefined} A React DOM structure if we have an error msg.
     * @private
     */
    _error() {
        const {
            error,
            hadInput
        } = this.state;
        if (!error || !hadInput) return;

        return ( <
            div className = {
                this.namespace('form-error')
            }
            role = 'alert' > {
                error
            } <
            /div>
        );
    }

    /**
     * Generate all the attributes to be rendered on an input.
     *
     * @returns {Object} Required data to render an input.
     * @private
     */
    attributes() {
        const superAttrs = super.attributes();
        const {
            id
        } = superAttrs;
        const {
            isValid,
            hadInput
        } = this.state;

        return {
            ...superAttrs,
            'aria-labelledby': `label-${id}`,
            'aria-disabled': this.select('disabled'),
            'aria-required': !!this.select('required'),
            'className': this.classNames(
                this.select('className'),
                this.namespace(
                    this.classNames({
                        'form-control': !this.isFlip
                    }, {
                        'custom-control-input': this.isFlip
                    }, {
                        'form-control-danger': hadInput && isValid === false
                    }, {
                        'form-control-lg': this.props.size === 'large'
                    }, {
                        'form-control-sm': this.props.size === 'small'
                    })
                )
            )
        };
    }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @public
 */
FormElement.propTypes = {
    ...propTypes.element,
    ...Base.propTypes,
    ...NamespaceShape,

    /**
     * This only works if you've also set the button or navigation property.
     * Represents the href of the button (or navigation if provided). If the
     * associated property (i.e. button or navigation) is a string and href is not
     * provided it will default to #. Note: not available for React Native.
     */
    href: PropTypes.string
};

//
// Expose the main FormElement class. Also expose classes that could and are
// used externally.
//
export {
    Base as Validation,
    FormElement,
    Fieldset,
    Textual,
    Flip
};

export default withNamespace(FormElement);



// WEBPACK FOOTER //
// ./node_modules/@ux/form-element/index.js