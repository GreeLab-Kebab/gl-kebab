"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NamespaceProvider = exports.NamespaceConsumer = exports.NamespaceShape = exports.withNamespace = exports.NamespaceContext = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _component = _interopRequireWildcard(require("@ux/component"));

var _addhoc = _interopRequireDefault(require("addhoc"));

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};
        if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
                    if (desc.get || desc.set) {
                        Object.defineProperty(newObj, key, desc);
                    } else {
                        newObj[key] = obj[key];
                    }
                }
            }
        }
        newObj.default = obj;
        return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
    }
    return target;
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}

function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}

// Default Namespace functionality
var defaultNamespace = function defaultNamespace() {
    for (var _len = arguments.length, c = new Array(_len), _key = 0; _key < _len; _key++) {
        c[_key] = arguments[_key];
    }

    return c.filter(Boolean).join(' ');
};
/**
 * React context to store namespace functionality
 *
 * @const {React.Context} NamespaceContext
 * @public
 */


var NamespaceContext = _react.default.createContext({
    namespace: defaultNamespace
});

exports.NamespaceContext = NamespaceContext;
var withNamespaceContext = (0, _addhoc.default)(function(getWrappedComponent) {
    return _react.default.createElement(NamespaceContext.Consumer, null, function(namespaceContext) {
        return getWrappedComponent({
            namespace: namespaceContext.namespace
        });
    });
}, 'WithNamespace');
/**
 * Higher-Order Component function to provide namespace functionality.
 * This replaces the prior NamespaceConsumer abstract class.
 *
 * @param {React.Component} WrappedComponent The component to be augmented with namespace functionality
 * @param {string} [includeOriginal='OriginalComponent'] The optional property name
 * that the original component can be included on.
 * @returns {React.Component} A wrapped component class that provides a `namespace` function as a prop
 * @public
 * @example
 * import { withNamespace, NamespaceShape, NamespaceConsumer } from '@ux/namespace-component';
 * class MyComponent extends NamespaceConsumer {
 *   render() {
 *     return (
 *       <span className={ this.namespace('some-class-name') }>foo</span>
 *     );
 *   }
 * }
 * MyComponent.propTypes = {
 *   ...NamespaceShape
 * };
 *
 * export default withNamespace(MyComponent);
 */

var withNamespace = function withNamespace(WrappedComponent) {
    var includeOriginal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'OriginalComponent';
    var hocComponent = withNamespaceContext(WrappedComponent); // Optionally attach the original component to the hoc

    if (includeOriginal) {
        hocComponent[includeOriginal] = WrappedComponent;
    }

    return hocComponent;
};
/**
 * Shape of props added to components wrapped with {@link withNamespace}.
 *
 * @const {Object} NamespaceShape
 * @public
 */


exports.withNamespace = withNamespace;
var NamespaceShape = {
    namespace: _propTypes.default.func.isRequired
};
/**
 * Simple class to provide inheriting component with a utility `this.namespace` method that simply calls through to
 * this.props.namespace
 *
 * @class
 * @public
 */

exports.NamespaceShape = NamespaceShape;

var NamespaceConsumer =
    /*#__PURE__*/
    function(_Component) {
        _inherits(NamespaceConsumer, _Component);

        function NamespaceConsumer() {
            var _this;

            _classCallCheck(this, NamespaceConsumer);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(NamespaceConsumer).apply(this, arguments));
            _this.namespace = _this.namespace.bind(_assertThisInitialized(_this));
            return _this;
        }

        _createClass(NamespaceConsumer, [{
            key: "namespace",
            value: function namespace()
            /* args */
            {
                var _this$props;

                if (!this.props.namespace) {
                    (0, _component.debug)('`namespace` prop is undefined. Did you wrap this component using withNamespace()?');
                    return defaultNamespace.apply(void 0, arguments);
                }

                return (_this$props = this.props).namespace.apply(_this$props, arguments);
            }
        }]);

        return NamespaceConsumer;
    }(_component.default);

exports.NamespaceConsumer = NamespaceConsumer;
NamespaceConsumer.propTypes = _objectSpread({}, NamespaceShape);
/**
 * Provide additional namespacing logic on top of @ux/component. Useful for
 * custom styling. Used by headers for example.
 *
 * @constructor
 * @public
 */

var NamespaceProvider =
    /*#__PURE__*/
    function(_Component2) {
        _inherits(NamespaceProvider, _Component2);

        function NamespaceProvider() {
            var _this2;

            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            _classCallCheck(this, NamespaceProvider);

            _this2 = _possibleConstructorReturn(this, _getPrototypeOf(NamespaceProvider).apply(this, arguments));

            if (props.namespace) {
                _this2._namespace = props.namespace;
            }

            _this2.state = {
                contextValue: {
                    namespace: _this2.namespace
                }
            };
            return _this2;
        }
        /**
         * Return namespaced value. Prefer context over the regular function,
         * context will be properly scoped and has access to `_namespace`.
         *
         * @returns {String} namespace.
         * @public
         */


        _createClass(NamespaceProvider, [{
            key: "render",

            /**
             * Wrap a single component to provide the namespace through context.
             *
             * @returns {ReactElement} Single React element.
             * @private
             */
            value: function render() {
                return _react.default.createElement(NamespaceContext.Provider, {
                    value: this.state.contextValue
                }, this.props.children);
            }
        }, {
            key: "namespace",
            get: function get() {
                    var _this3 = this;

                    return function() {
                        for (var _len2 = arguments.length, str = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            str[_key2] = arguments[_key2];
                        }

                        str = str.filter(Boolean);

                        if (!_this3._namespace) {
                            return str.join(' ');
                        }

                        if (!str.length) {
                            return;
                        } //
                        // Handle the case where a single string is provided with multiple entries.
                        //


                        if (str.length === 1 && ~str[0].indexOf(' ')) {
                            str = str[0].split(' ');
                        }

                        return str.map(function(s) {
                            return "".concat(_this3._namespace, "-").concat(s);
                        }).join(' ');
                    };
                }
                /**
                 * Set namespace for local.
                 *
                 * @param {String} name Namespace.
                 * @public
                 */
                ,
            set: function set(name) {
                (0, _component.debug)('Setting namespace to %s', name);
                this._namespace = name;
            }
        }]);

        return NamespaceProvider;
    }(_component.default);
/**
 * Define properties.
 *
 * @type {Object}
 * @public
 */


exports.NamespaceProvider = NamespaceProvider;
NamespaceProvider.propTypes = {
    /** The namespace to use */
    namespace: _propTypes.default.string,

    /** Child components */
    children: _propTypes.default.node
};


// WEBPACK FOOTER //
// ./node_modules/@ux/namespace-component/lib/index.js