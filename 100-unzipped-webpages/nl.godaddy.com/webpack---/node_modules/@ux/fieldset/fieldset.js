import {
    NamespaceConsumer
} from '@ux/namespace-component';
import React, {
    Children
} from 'react';
import PropTypes from 'prop-types';

/**
 * Platform independant Fieldset base class.
 *
 * @Constructor
 * @public
 */
export default class Base extends NamespaceConsumer {
    /**
     * Check if the child input elements contain a given property.
     *
     * @param {Array} children Child elements.
     * @param {String} prop Name of the property that should be present.
     * @returns {Boolean} Results
     * @private
     */
    includes(children, prop) {
        return React.Children.toArray(children).some(child => {
            if (!child.type || !child.props) return false;

            if (child.type === 'input' || child.type.toString() === 'TextInput') {
                return prop in child.props;
            }

            return this.includes(child.props.children, prop);
        });
    }

    /**
     * Check if our given input is invalid.
     *
     * @param {Array} children Child elements.
     * @returns {Boolean} Results
     * @public
     */
    invalid(children) {
        return this.includes(children || this.props.children, 'data-invalid');
    }

    /**
     * Check if our given input is valid.
     *
     * @param {Array} children Child elements.
     * @returns {Boolean} Results
     * @public
     */
    valid(children) {
        return this.includes(children || this.props.children, 'data-valid');
    }

    /**
     * Default view that can be rendered in both react and react-native. Should be overruled for platform
     * specific rendering.
     *
     * @public
     */
    get proxy() {
        throw new Error('Proxy implementation required');
    }

    /**
     * Default view that can be rendered in both react and react-native. Should be overruled for platform
     * specific rendering.
     *
     * @public
     */
    get view() {
        throw new Error('View implementation required');
    }

    /**
     * Render the view of the class unless the `proxy` property is true.
     *
     * @returns {ReactElement} View from extended class.
     * @private
     */
    render() {
        const {
            proxy,
            children
        } = this.props;

        if (proxy) {
            return Children.count(children) === 1 ? children : this.proxy;
        }

        return this.view;
    }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
Base.propTypes = {
    /** Determines if the children are wrapped in a proxy component */
    proxy: PropTypes.bool,
    /** Child components in the fieldset */
    children: PropTypes.node
};



// WEBPACK FOOTER //
// ./node_modules/@ux/fieldset/fieldset.js