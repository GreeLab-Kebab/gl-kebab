import {
    NamespaceShape,
    withNamespace
} from '@ux/namespace-component';
import PropTypes from 'prop-types';
import Base from './fieldset';
import React from 'react';

const FieldSetWithRef = React.forwardRef(({
    children,
    classNames,
    ...props
}, ref) => ( <
    fieldset ref = {
        ref
    }
    className = {
        classNames
    } { ...props
    } > {
        children
    } <
    /fieldset>
));

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
FieldSetWithRef.propTypes = {
    ...Base.propTypes,
    /** Classes applied to a fieldset */
    classNames: PropTypes.string
};

/**
 * Render a field set.
 *
 * @class Fieldset
 * @displayName Fieldset (Web)
 * @public
 */
export class Fieldset extends Base {
    /**
     * Render a plain div when proxy with multiple child elements.
     *
     * @returns {React.DOM} View element.
     * @private
     */
    get proxy() {
        return <div > {
            this.props.children
        } < /div>;
    }

    /**
     * Render the Fieldset, with or without error messages.
     *
     * @returns {React.DOM} Fieldset element.
     * @private
     */
    get view() {
        const {
            className,
            children,
            ...props
        } = this.props;

        //
        // This property should not be spread onto the fieldset
        //
        delete props.proxy;
        delete props.namespace;

        //
        // Preserve class ordering (form-group, props.className, rest)
        //
        const classNames = this.classNames(
            this.namespace('form-group'),
            className,
            this.namespace(
                this.classNames({
                    'has-danger': this.invalid()
                })
            )
        );

        return ( <
            FieldSetWithRef classNames = {
                classNames
            } { ...props
            } > {
                children
            } <
            /FieldSetWithRef>
        );
    }

    render() {
        return super.render();
    }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
Fieldset.propTypes = {
    ...Base.propTypes,
    ...NamespaceShape,

    /** Classes applied to a fieldset */
    className: PropTypes.string
};

export default withNamespace(Fieldset);



// WEBPACK FOOTER //
// ./node_modules/@ux/fieldset/index.js