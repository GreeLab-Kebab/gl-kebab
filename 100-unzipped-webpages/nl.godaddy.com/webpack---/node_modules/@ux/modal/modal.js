import {
    NamespaceConsumer
} from '@ux/namespace-component';
import createFragment from 'react-addons-create-fragment';
import PropTypes from 'prop-types';
import React from 'react';

const undef = void 0;

/**
 * Platform independent base class for platform specific implementations to inherit from.
 *
 * @displayName Base
 * @extends React.Component
 * @class Base
 * @public
 */
export default class Base extends NamespaceConsumer {
    constructor(props = {}) {
        super(...arguments);

        this.state = {
            open: props.open
        };

        this.close = this.close.bind(this);
        this.open = this.open.bind(this);
        this.onBackgroundClick = this.onBackgroundClick.bind(this);
    }

    /**
     * Remove all added information.
     *
     * @private
     */
    componentWillUnmount() {
        this.close();
    }

    /**
     * On change of `open` prop, update internal state
     *
     * @param {Object} prevProps - Object of Previous Props
     * @private
     */
    componentDidUpdate(prevProps) {
        if (typeof this.props.open !== 'undefined' && prevProps.open !== this.props.open) {
            const action = this.props.open ? this.open : this.close;
            action();
        }
    }

    /**
     * Open the modal dialog again.
     *
     * @public
     */
    open() {
        this.setState({
            open: true
        }, () => {
            if (this.componentDidMount) {
                this.componentDidMount();
            }
        });
    }

    /**
     * Close the dialog
     *
     * @public
     */
    close() {
        const {
            state,
            props
        } = this;

        //
        // Return early if the dialog is not open. This prevents the onClose handler
        // from being called twice if the modal is closed normally.
        //
        if (state.open === false) {
            return;
        }

        this.setState({
            open: false
        });

        //
        // Optionally call the close callback that has been provided to the modal
        // dialog.
        //
        if (typeof props.onClose === 'function') {
            props.onClose(this);
        }
    }

    /**
     * Closes this instance unless disableAutoClose it truthy
     *
     * @public
     */
    onBackgroundClick() {
        if (!this.props.disableAutoClose) {
            this.close();
        }
    }

    baseRender(Header, Nav, Body, Footer) {
            const {
                props
            } = this;

            const header = props.header || ( <
                Header key = 'header'
                onClick = {
                    props.closeButton && this.close
                }
                disableAutoClose = {
                    props.disableAutoClose
                } > {
                    props.title
                } <
                /Header>
            );

            const nav = props.nav ? ( < Nav key = 'nav' > {
                        props.nav
                    } < /Nav>) : undef;
                    const body = props.body || ( < Body key = 'body' > {
                            props.children
                        } < /Body>);
                        const footer = props.footer ? ( < Footer key = 'footer' > {
                                props.footer
                            } < /Footer>) : undef;

                            return createFragment({
                                header,
                                nav,
                                body,
                                footer
                            });
                        }
                    }

                    /**
                     * Enforce properties.
                     *
                     * @type {Object}
                     * @api private
                     */
                    Base.propTypes = {
                        /** Enables or disables animations */
                        animate: PropTypes.bool,
                        /** Include or exclude the backdrop*/
                        backdrop: PropTypes.bool,
                        /** Include or exclude a close button in the default header */
                        closeButton: PropTypes.bool,
                        /** Will disable automatic closing via the ESC key or clicking on the backdrop */
                        disableAutoClose: PropTypes.bool,
                        /** The location where the backdrop needs to be added */
                        target: PropTypes.object,
                        /** Callback to be fired when the modal is closed */
                        onClose: PropTypes.func,
                        /** Dictates if the modal is open */
                        open: PropTypes.bool,
                        /** Classes to be applied to the modal */
                        className: PropTypes.string,
                        /** A custom header to be rendered */
                        header: PropTypes.node,
                        /** Text to be displayed in the modal's header */
                        title: PropTypes.string,
                        /** Content of the modal footer */
                        footer: PropTypes.node,
                        /** The content of the modal */
                        body: PropTypes.node,
                        /** Custom navigation to be rendered */
                        nav: PropTypes.node,
                        /** Custom modal style to be rendered */
                        style: PropTypes.object,
                        /** Child elements */
                        children: PropTypes.node
                    };

                    Base.defaultProps = {
                        animate: true,
                        backdrop: true,
                        closeButton: true,
                        disableAutoClose: false,
                        open: true,
                        style: {}
                    };



                    // WEBPACK FOOTER //
                    // ./node_modules/@ux/modal/modal.js