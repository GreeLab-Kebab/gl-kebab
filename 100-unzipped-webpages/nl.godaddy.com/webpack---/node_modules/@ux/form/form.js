import {
    Validate
} from 'react-validation-context';
import Component from '@ux/component';
import PropTypes from 'prop-types';
import React from 'react';

/**
 * Base functions each platforms' Form component uses.
 *
 * @displayName Base
 * @class Base
 * @public
 */
export default class Base extends Component {
    constructor() {
        super(...arguments);

        //
        // Form is initially valid
        //
        // eslint-disable-next-line react/no-direct-mutation-state
        this.state.valid = true;
        this.onValidChange = this.onValidChange.bind(this);
    }

    /**
     * The form is valid if there are no invalid items in its context
     *
     * @param {Object} valids Collection of entities to check.
     * @returns {boolean} Sum of elements validity.
     * @private
     */
    validate(valids) {
        return Object.keys(valids).every(k => valids[k] !== false);
    }

    /**
     * Wrap onValidChange to set this.state.isValid
     *
     * @param {string} name Name of the validator.
     * @param {boolean} valid Validity.
     * @private
     */
    onValidChange(name, valid) {
        const props = this.props;

        if (props.onValidChange) {
            props.onValidChange(...arguments);
        }

        this.setState({
            valid
        });
    }

    /**
     * Render validated form.
     *
     * @returns {ReactElement} The rendered template.
     * @public
     */
    render({
        children
    }) {
        return ( <
            Validate name = {
                this.props.id
            }
            validate = {
                this.validate
            }
            onValidChange = {
                this.onValidChange
            } > {
                children
            } <
            /Validate>
        );
    }
}

/**
 * Default properties.
 *
 * @type {Object}
 * @private
 */
Base.defaultProps = {
    id: ''
};

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
Base.propTypes = {
    /** Contents of the Form */
    children: PropTypes.node,
    /** Form id */
    id: PropTypes.string,
    /** Display child elements inline */
    inline: PropTypes.bool,
    /** Change handler triggered on valid changes */
    onValidChange: PropTypes.func,
    /** Submit handler called when the form is submitted */
    onSubmit: PropTypes.func
};



// WEBPACK FOOTER //
// ./node_modules/@ux/form/form.js