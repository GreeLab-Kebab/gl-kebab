import {
    withNamespace
} from '@ux/namespace-component';
import {
    FormElement
} from '@ux/form-element';
import FallbackMessage from './fallback';
import PropTypes from 'prop-types';
import React from 'react';

/**
 * Render an input with `n` characters remaining feedback.
 *
 * @class Remaining
 * @displayName Remaining
 */
export class Remaining extends FormElement {
    /**
     * Getter that returns data for message.
     *
     * @returns {Object} Returns component properties
     * @private
     */
    get data() {
        const props = this.props;
        const length = this.select('value', '').length;

        return {
            message: props.notice,
            values: {
                remaining: props.maxLength - length,
                length: length
            }
        };
    }

    /**
     * Override `select` to always return the remaining message property. This will render the
     * remaining message or fallback component as the `notice` message. This works because
     * `notice` is rendered in the same location below the input as the remaining message.
     *
     * @param {string} name Property name
     * @returns {React.DOM} Rendered element
     * @private
     */
    select(name) {
        if (name === 'notice') {
            const {
                notice
            } = this.props;

            return typeof notice === 'object' ?
                React.cloneElement(notice, this.data) :
                < FallbackMessage { ...this.data
                }
            />;
        }

        return super.select(...arguments);
    }

    /**
     * Stubbed render function that calls the super render
     * @returns {React.DOM} Rendered component
     */
    render() {
        return super.render();
    }
}

/**
 * Default properties.
 *
 * @type {Object}
 * @private
 */
Remaining.defaultProps = {
    ...FormElement.defaultProps,
    maxLength: 32
};

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
Remaining.propTypes = {
    /** Max length for the input field */
    maxLength: PropTypes.number,
    ...FormElement.propTypes
};

export default withNamespace(Remaining);



// WEBPACK FOOTER //
// ./node_modules/@ux/remaining/index.js