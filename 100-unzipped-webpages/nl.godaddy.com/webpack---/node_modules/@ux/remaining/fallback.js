import React from 'react';
import PropTypes from 'prop-types';
import Component from '@ux/component';
import {
    Text
} from '@ux/containers';

/**
 * A small component that follows the same API of the React-Intl
 * <FormattedMessage /> component so we can use this as fallback for when people
 * don't supply their own <FormattedMessages /> component for translations.
 *
 * @class FallbackMessage
 * @displayName Fallback Message
 */
export default class FallbackMessage extends Component {
    /**
     * Render of the react component
     * @returns {React.DOM} Rendered component
     */
    render() {
        const values = this.props.values;
        let message = this.props.message || '{remaining}';

        for (const prop in values) {
            if (Object.prototype.hasOwnProperty.call(values, prop)) {
                message = message.replace(new RegExp('{' + prop + '}', 'g'), values[prop]);
            }
        }

        return <Text inline > {
            message
        } < /Text>;
    }
}

/**
 * PropType validation
 *
 * @type {Object}
 * @private
 */
FallbackMessage.propTypes = {
    /** Message to display */
    message: PropTypes.node,
    /** Properties to display */
    values: PropTypes.object
};



// WEBPACK FOOTER //
// ./node_modules/@ux/remaining/fallback.js