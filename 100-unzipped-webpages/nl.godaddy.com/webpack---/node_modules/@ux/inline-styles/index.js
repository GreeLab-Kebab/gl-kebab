import variables from './variables/palette';
import StyleSheet from './stylesheet';
import typographies from './variables/typography';
import Query from './query';

//
// If `window.ux.palette` is already defined then use it when creating the initial
// query. This is absolutely necessary because `palette.min?.js` loads before
// `uxcore2.min?.js` to support import-time usage of `palette` and `font` functions.
//
let loadable = variables;
const ux = (typeof window !== 'undefined' && window.ux) || {};
const browserPalette = ux && ux.palette;

if (browserPalette) {
    // Merge in color, font, and market group override data.

    const brandFonts = browserPalette.fonts['brand-fonts'];
    const paletteMarketGroups = browserPalette.fonts['palette-market-groups'];

    loadable = {
        ...loadable,
        colors: browserPalette.colors,
        marketGroups: {
            ...loadable.marketGroups,
            ...paletteMarketGroups
        },
        fonts: brandFonts,
        marketFonts: {
            ...loadable.marketFonts,
            brand: brandFonts
        }
    };
}

//
// Create a lookup for variables
//

const query = new Query(loadable);
const defaultLocale = (ux.data && ux.data.market) || 'en_US';

/**
 * Retrieve typography for standard heading types (h1, h2, etc...)
 * defaults to h1, returns basefont size if invalid header type is requested
 *
 * @param {String} styleType style to fetch.
 * @param {String} locale Locale we want to use defaults to en_US
 * @returns {Object} correct font name and size for the given header type.
 * @public
 */
function typography(styleType, locale = defaultLocale) {

    const sizeValue = typographies[`${styleType.match(/^h\d$/i)}FontSize`] || typographies.fontSizeBase;

    return {
        ...font('primary', locale),
        fontSize: sizeValue
    };
}

/**
 * Retrieve typefaces based on device locale.
 *
 * @param {String} type primary or base.
 * @param {String} locale Locale of we want to use for the font.
 * @returns {Object} correct font names && weight for the given locale.
 * @public
 */
function font(type = 'base', locale = defaultLocale) {
    return query.font(type, locale);
}

/**
 * Retrieve hexidecimal color from UXCore2 color palette.
 *
 * @param {String} paletteName Palette name.
 * @param {String} tone Tone variation.
 * @param {String} color Variant (eg: contrast for text or color)
 * @returns {String} Color.
 * @public
 */
function palette(paletteName, tone, color) {
    return query.palette(paletteName, tone, color);
}

/**
 * Initializes (or re-initializes) with the JSON representation
 * of the palette (i.e. fonts & colors).
 *
 * @param {Object} values JSON representation of the palette
 * @public
 */
function load(values) {
    query.load(values);
}

export default StyleSheet;
export {
    Query,
    palette,
    font,
    typography,
    load
};



// WEBPACK FOOTER //
// ./node_modules/@ux/inline-styles/index.js