/* eslint-disable no-extra-boolean-cast */

import Component from '@ux/component';
import PropTypes from 'prop-types';
import React from 'react';

/**
 * Possible status types
 *
 * @type {object}
 */
const STATUS = {
    Error: 'error',
    Warning: 'warning',
    Success: 'success',
    Info: 'info',
    Primary: 'primary'
};

/**
 * Circle size configurations needed for svg calculation.
 *
 * @type {object}
 */
const CIRCLE_SIZES = {
    XS: {
        size: 50,
        strokeWidth: 4
    },
    SM: {
        size: 100,
        strokeWidth: 6
    },
    MD: {
        size: 150,
        strokeWidth: 14
    },
    LG: {
        size: 250,
        strokeWidth: 22
    }
};

/**
 * Array of ordered breakpoints to check against
 *
 * @type {object}
 */
const BREAKPOINTS = ['mobile', 'phablet', 'tablet', 'desktop', 'large'];

/**
 * Display a progress bar
 *
 * @displayName ProgressBar
 * @class ProgressBar
 * @public
 */
class ProgressBar extends Component {
    /**
     * Attach eventListeners for breakpoints.
     *
     * @returns {void}
     * @private
     */
    componentDidMount() {
        this.breakpoint(...BREAKPOINTS);
    }

    /**
     * Remove the eventListeners of breakpoints.
     *
     * @returns {void}
     * @private
     */
    componentWillUnmount() {
        this.breakup();
    }

    /**
     * Get the current percentage completed (0-100)
     *
     * @returns {number} percent
     * @private
     */
    get _percent() {
        return Math.floor(this.props.value / this.props.max * 100);
    }

    /**
     * Get the label element if `label` prop is set.
     *
     * @returns {ReactElement} label element
     * @private
     */
    get _labelElement() {
        const id = this.id('label').toLowerCase();

        if (!this.props.label) {
            return null;
        }

        return <div id = {
            id
        }
        className = 'ux-progress-label' > {
            this.props.label
        } < /div>;
    }

    /**
     * Get the notice element if `notice` prop is set.
     *
     * @returns {ReactElement} notice element
     * @private
     */
    get _noticeElement() {
        if (!this.props.notice) {
            return null;
        }

        return <small > {
            this.props.notice
        } < /small>;
    }

    /**
     * Get the display element if `children` or `showPercent` prop is set.
     * Will not render if small bar.
     *
     * @returns {ReactElement} percentage text element
     * @private
     */
    get _displayElement() {
        const {
            showPercent,
            children,
            shape,
            startShiftPercent
        } = this.props;
        const {
            value,
            unit
        } = this._size;
        let size = this._size;
        let style;

        if (value && unit) {
            size = value + unit;
            style = {
                lineHeight: size
            };
        }

        if (!(!!showPercent || !!children) || (shape === 'bar' && ~size.lastIndexOf('xs'))) {
            return null;
        }

        const percent = this._percent;
        const classNames = ['ux-progress-text'];
        if (percent < startShiftPercent && !(shape === 'bar' && ~size.lastIndexOf('sm'))) {
            classNames.push('ux-progress-text-start');
        }

        const displayElement = children || `${percent}%`;
        return <span aria - hidden = 'true'
        className = {
            classNames.join(' ')
        }
        style = {
            style
        } > {
            displayElement
        } < /span>;
    }

    /**
     * Get the size to render the progress element at
     *
     * @returns {string} size
     * @private
     */
    get _size() {
        const {
            size
        } = this.props;
        const {
            breakpoint
        } = this.state;

        if (typeof size === 'string' || size.value && size.unit) {
            return size;
        } else if (!!size[breakpoint]) {
            return size[breakpoint];
        }

        // find the next smallest breakdown size
        let breakdown;
        const targetIdx = BREAKPOINTS.indexOf(breakpoint);
        for (let idx = BREAKPOINTS.length - 1; idx >= 0; idx--) {
            if (!!size[BREAKPOINTS[idx]]) {
                breakdown = BREAKPOINTS[idx];
                if (idx < targetIdx) {
                    break;
                }
            }
        }

        return !breakdown ? 'md' : size[breakdown];
    }

    /**
     * Get the classes to apply to the progress component.
     *
     * @returns {string} classes
     * @private
     */
    get _progressClasses() {
        const classNames = ['ux-progress'];

        classNames.push(`ux-progress-${this.props.shape}`);

        switch (this._size) {
            case 'xsmall':
            case 'xs':
                classNames.push('ux-progress-xs');
                break;
            case 'small':
            case 'sm':
                classNames.push('ux-progress-sm');
                break;
            case 'large':
            case 'lg':
                classNames.push('ux-progress-lg');
                break;
            default:
                classNames.push('ux-progress-md');
        }

        switch (this.props.status) {
            case STATUS.Error:
                classNames.push('ux-progress-danger');
                break;
            case STATUS.Warning:
                classNames.push('ux-progress-warning');
                break;
            case STATUS.Info:
                classNames.push('ux-progress-info');
                break;
            case STATUS.Success:
                classNames.push('ux-progress-success');
                break;
            default:
                classNames.push('ux-progress-primary');
        }

        if (this.props.shape !== 'circle') {
            if (this.props.striped) {
                classNames.push('ux-progress-striped');
            }
        }

        return classNames.join(' ');
    }

    get isSmall() {
        const size = this._size;
        const {
            value,
            unit
        } = size;

        return size === 'sm' || size === 'small' || value < 1.5 && ~unit.indexOf('em') || value < 24;
    }

    /**
     * Get the progress element as a bar
     *
     * @returns {ReactElement} element
     * @private
     */
    get _bar() {
        const size = this._size;
        const {
            value,
            unit
        } = size;
        const id = this.id('label').toLowerCase();
        const isSmall = this.isSmall;
        let style;

        if (value && unit) {
            style = {
                height: value + unit
            };
        }

        return ( <
            div className = {
                this._progressClasses
            } > {
                this._labelElement
            } <
            div role = 'progressbar'
            aria - valuenow = {
                this._percent
            }
            aria - valuemax = {
                this.props.max
            }
            aria - valuemin = {
                this.props.min
            }
            aria - labelledby = {
                id
            }
            style = {
                style
            }
            className = 'ux-progress-area' >
            <
            span className = 'ux-progress-fill'
            style = {
                {
                    width: `${this._percent}%`
                }
            } > {!isSmall && this._displayElement
            } <
            /span> <
            /div> {
                !style && isSmall && this._displayElement
            } {
                this._noticeElement
            } <
            /div>
        );
    }

    /**
     * Get the progress element as a circle
     *
     * @returns {ReactElement} element
     * @private
     */
    get _circle() {
        let circleSize;

        switch (this._size) {
            case 'xsmall':
            case 'xs':
                circleSize = CIRCLE_SIZES.XS;
                break;
            case 'small':
            case 'sm':
                circleSize = CIRCLE_SIZES.SM;
                break;
            case 'large':
            case 'lg':
                circleSize = CIRCLE_SIZES.LG;
                break;
            default:
                circleSize = CIRCLE_SIZES.MD;
        }

        const {
            size,
            strokeWidth
        } = circleSize;
        const percent = this._percent;
        const center = size / 2;
        const radius = center - strokeWidth;
        const c = Math.PI * (radius * 2);
        const offset = ((100 - percent) / 100) * c;

        const fillStyle = {
            strokeDashoffset: offset,
            strokeDasharray: c
        };
        const id = this.id('label').toLowerCase();

        return ( <
            div aria - valuenow = {
                this._percent
            }
            role = 'progressbar'
            aria - valuemax = {
                this.props.max
            }
            aria - valuemin = {
                this.props.min
            }
            className = {
                this._progressClasses
            }
            aria - labelledby = {
                id
            } >
            <
            svg width = {
                size
            }
            height = {
                size
            }
            viewBox = {
                `0 0 ${size} ${size}`
            } >
            <
            circle fill = 'none'
            strokeWidth = {
                strokeWidth
            }
            className = 'ux-progress-area'
            r = {
                radius
            }
            cx = {
                center
            }
            cy = {
                center
            }
            /> <
            circle fill = 'none'
            strokeWidth = {
                strokeWidth
            }
            className = 'ux-progress-fill'
            r = {
                radius
            }
            cx = {
                center
            }
            cy = {
                center
            }
            style = {
                fillStyle
            }
            strokeLinecap = 'butt'
            transform = {
                `rotate(-90 ${center} ${center})`
            }
            /> <
            /svg> {
                this._displayElement
            } {
                this._labelElement
            } {
                this._noticeElement
            } <
            /div>
        );
    }

    /**
     * Renders the component.
     *
     * @returns {ReactElement} Rendered ProgressBar element.
     * @private
     */
    render() {
        return this.props.shape === 'circle' ? this._circle : this._bar;
    }
}

ProgressBar.Status = STATUS;

ProgressBar.propTypes = {
    /** The title text above the bar */
    label: PropTypes.node,
    /** The number that the progress bar starts at, this is mainly for aria-valuemin accessibility */
    min: PropTypes.number,
    /** The maximum number of increments */
    max: PropTypes.number,
    /** The current increment */
    value: PropTypes.number,
    /** Sets the status color/style (active | complete | warning | error) */
    status: PropTypes.string,
    /** Sets the small text label below the bar */
    notice: PropTypes.node,
    /** Whether or not to show the percentage text */
    showPercent: PropTypes.bool,
    /** The start percent value to shift text to right on bar */
    startShiftPercent: PropTypes.number,
    /**
     * Set the size (xs | xsmall | sm | small | md | medium | lg | large).
     * Object can be used to specify sizes at different breakpoints.
     * Object can also be used to specify a custom height.
     */
    size: PropTypes.oneOfType([
        PropTypes.oneOf(['xsmall', 'xs', 'sm', 'small', 'md', 'medium', 'lg', 'large']),
        PropTypes.object
    ]),
    /** Set the shape (bar | circle)  */
    shape: PropTypes.oneOf(['bar', 'circle']),
    /** Can be used to customize the value to display; overrides showPercent */
    children: PropTypes.node,
    /**  Whether or not to have a striped progress bar. Won't work with the circle version. */
    striped: PropTypes.bool
};

ProgressBar.defaultProps = {
    min: 0,
    value: 0,
    max: 100,
    size: 'md',
    shape: 'bar',
    startShiftPercent: 10,
    label: ''
};

export default ProgressBar;



// WEBPACK FOOTER //
// ./node_modules/@ux/progress-bar/index.js