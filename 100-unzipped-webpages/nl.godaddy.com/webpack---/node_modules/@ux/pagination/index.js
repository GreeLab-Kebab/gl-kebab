import React from 'react';
import PropTypes from 'prop-types';
import arrayFrom from 'array-from';
import Dropdown, {
    DropdownItem
} from '@ux/dropdown';

/**
 * Generates and returns and array of numbers starting from start and up to end (not including), going in step increments
 *
 * @name range
 * @function
 * @public
 * @param {number} start=0 start for the range of numbers
 * @param {number} end=start end (not including) for the range
 * @param {number} step=1 increment to use while generating numbers
 * @returns {array} Array representing the range of numbers
 */
function range(start = 0, end = start, step = 1) {
    return arrayFrom({
        length: (end - start) / step
    }, (v, i) => start + (i * step));
}

/**
 * Ponyfill (not a Polyfill) for Number.isInteger. Returns a value indicating
 * if `num` is an integer.
 *
 * "While polyfills are naughty, ponyfills are pure, just like ponies."
 * - https://github.com/sindresorhus/ponyfill#pony-pureness-really
 *
 * @param   {Number}  num Value to check integer(ness) of.
 * @returns {Boolean} Returns a value indicating if `num` is an integer.
 */
function isInteger(num) {
    return typeof num === 'number' &&
        isFinite(num) &&
        Math.floor(num) === num;
}

/**
 * The default page number that will be used as the starting page number.
 *
 * @type {number}
 */
const FIRST_PAGE_NUMBER = 1;

/**
 * The default number of page links to be shown.
 *
 * @type {number}
 */
const DEFAULT_NUM_PAGES_SHOWN = 4;


/**
 * The Pagination react component that is used to switch between content panes or pages.
 * Behavior of the pagination component is controlled by use of props.
 * The component displays links for pages in the current viewable range,
 * it displays forward and back navigation links and also a dropdown to choose
 * the number of items being displayed per page.

 * @displayName Pagination (web)
 * @class Pagination
 * @public
 */
export default class Pagination extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            pageItems: props.pageItems,
            pageSelected: props.defaultSelected
        };
    }

    /**
     * Get the total number of pages in the paginated result set
     *
     * @name _totalPages
     * @function
     * @private
     * @param {number} pageItems Number of items per page
     * @returns {number} The total number of pages in the paginated result set
     */
    _totalPages(pageItems) {
        return Math.ceil(this.props.totalItems / pageItems);
    }

    /**
     * Returns a value indicating if the the pageItems Dropdown should be displayed?
     *
     * @name _allowItemsPerPageSelection
     * @function
     * @private
     * @returns {boolean} should the pageItems drop down be displayed
     */
    _allowItemsPerPageSelection() {
        return this.props.pageItemsChoices.length > 0;
    }

    /**
     * Should the back links be enabled or disabled?
     *
     * @name _enableBackLinks
     * @function
     * @private
     * @returns {boolean} should the back links be enabled or disabled?
     */
    _enableBackLinks() {
        return this.state.pageSelected > FIRST_PAGE_NUMBER;
    }

    /**
     * Should the forward links be enabled or disabled?
     *
     * @name _enableForwardLinks
     * @function
     * @private
     * @returns {boolean} should the forward links be enabled or disabled?
     */
    _enableForwardLinks() {
        return this.state.pageSelected < this._totalPages(this.state.pageItems);
    }

    /**
     * The page range (start and end) that is to be displayed
     *
     * @name _pageRangeToShow
     * @function
     * @private
     * @returns {Object} page range to display
     */
    _pageRangeToShow() {
        //
        // The page range is chosen such that the current selected page is centered,
        // except in the case of the first and the last page.
        //
        const pageSelected = this.state.pageSelected;
        const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);
        const maxPageLinks = this.props.maxPageLinks;
        const pageRangeStart = Math.max(FIRST_PAGE_NUMBER, pageSelected - Math.floor(maxPageLinks / 2));
        const pageRangeEnd = Math.min(totalPages, pageRangeStart + maxPageLinks - 1);

        return {
            pageRangeStart,
            pageRangeEnd
        };
    }

    /**
     * JSX for the page link section
     *
     * @name _pageLinksSection
     * @function
     * @private
     * @returns {ReactElement} page link section
     */
    _pageLinksSection() {
        const {
            pageRangeStart,
            pageRangeEnd
        } = this._pageRangeToShow();

        return range(pageRangeStart, pageRangeEnd + 1).map(val => {
            const isSelected = this.state.pageSelected === val;
            const selectedClass = isSelected ? 'active' : '';
            const classes = `page-item page-number ${selectedClass}`;
            const key = `page-links-${val}`;
            return ( <
                li className = {
                    classes
                }
                key = {
                    key
                } >
                <
                a href = '#'
                className = 'page-link'
                onClick = {
                    (evt) => this.onPageClick(evt, val)
                } > {
                    val
                } <
                /a> <
                /li>
            );
        });
    }

    /**
     * JSX for the more section
     *
     * @name _moreLinksSection
     * @function
     * @private
     * @returns {ReactElement} more link section
     */
    _moreLinksSection() {
        return ( <
            li className = 'page-item more' >
            <
            a href = '#'
            className = 'page-link'
            onClick = {
                (evt) => evt.preventDefault()
            } >
            <
            span className = 'uxicon uxicon-ellipses' > < /span> <
            /a> <
            /li>
        );
    }

    /**
     * JSX for the first link
     *
     * @name _firstLinkSection
     * @function
     * @private
     * @returns {ReactElement} first link JSX
     */
    _firstLinkSection() {
        const statusClass = this._enableBackLinks() ? '' : 'disabled';
        const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
        const classes = `page-item bookend bookend-first ${statusClass} ${hidden}`;
        return ( <
            li className = {
                classes
            } >
            <
            a href = '#'
            className = 'page-link'
            onClick = {
                (evt) => this.onNavigationClick(evt, 'first')
            } >
            <
            span className = 'uxicon uxicon-chevron-dbl-left-lt' > < /span> <
            /a> <
            /li>
        );
    }

    /**
     * JSX for the last link
     *
     * @name _lastLinkSection
     * @function
     * @private
     * @returns {ReactElement} last link JSX
     */
    _lastLinkSection() {
        const statusClass = this._enableForwardLinks() ? '' : 'disabled';
        const hidden = this.props.showBookends ? '' : 'hidden-xs-up';
        const classes = `page-item bookend bookend-last ${statusClass} ${hidden}`;
        return ( <
            li className = {
                classes
            } >
            <
            a href = '#'
            className = 'page-link'
            onClick = {
                (evt) => this.onNavigationClick(evt, 'last')
            } >
            <
            span className = 'uxicon uxicon-chevron-dbl-right-lt' > < /span> <
            /a> <
            /li>
        );
    }

    /**
     * JSX for the previous link
     *
     * @name _prevLinkSection
     * @function
     * @private
     * @returns {ReactElement} previous link JSX
     */
    _prevLinkSection() {
        const statusClass = this._enableBackLinks() ? '' : 'disabled';
        const classes = `page-item previous ${statusClass}`;
        return ( <
            li className = {
                classes
            } >
            <
            a href = '#'
            className = 'page-link'
            onClick = {
                (evt) => this.onNavigationClick(evt, 'prev')
            } >
            <
            span className = 'uxicon uxicon-chevron-left-lt' > < /span> <
            /a> <
            /li>
        );
    }

    /**
     * JSX for the next link
     *
     * @name _nextLinkSection
     * @function
     * @private
     * @returns {ReactElement} next link JSX
     */
    _nextLinkSection() {
        const statusClass = this._enableForwardLinks() ? '' : 'disabled';
        const classes = `page-item next ${statusClass}`;
        return ( <
            li className = {
                classes
            } >
            <
            a href = '#'
            className = 'page-link'
            onClick = {
                (evt) => this.onNavigationClick(evt, 'next')
            } >
            <
            span className = 'uxicon uxicon-chevron-right-lt' > < /span> <
            /a> <
            /li>
        );
    }

    /**
     * JSX for the number items per page dropdown
     *
     * @name _numberItemsSection
     * @function
     * @private
     * @returns {ReactElement} number items per page dropdown JSX
     */
    _numberItemsSection() {
        const pageItemsChoices = this.props.pageItemsChoices;
        const dropdownSizeClass = `pagination-dropdown-${this.props.size}`;
        const classes = `pagination-dropdown ${dropdownSizeClass}`;
        const defaultSelected = pageItemsChoices.indexOf(this.props.pageItems);

        return ( <
            div className = {
                classes
            } >
            <
            Dropdown type = 'select'
            defaultSelected = {
                [defaultSelected]
            }
            onChange = {
                this.onPageItemsChanged.bind(this)
            } > {
                pageItemsChoices.map(a => {
                    return ( <
                        DropdownItem key = {
                            a
                        }
                        value = {
                            a
                        } >
                        <
                        div className = 'd-inline-flex' > {
                            a
                        } < /div> <
                        /DropdownItem>
                    );
                })
            } <
            /Dropdown> <
            /div>
        );
    }

    /**
     * JSX for the pagination links section
     *
     * @name _paginationSection
     * @function
     * @private
     * @returns {ReactElement} pagination links section JSX
     */
    _paginationSection() {
        const {
            pageRangeStart,
            pageRangeEnd
        } = this._pageRangeToShow();
        const paginationSizeClass = `pagination-${this.props.size}`;
        const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);
        const classes = `pagination ${paginationSizeClass}`;
        return ( <
            ul className = {
                classes
            } > {
                this._firstLinkSection()
            } {
                this._prevLinkSection()
            } {
                pageRangeStart > FIRST_PAGE_NUMBER && this._moreLinksSection()
            } {
                this._pageLinksSection()
            } {
                pageRangeEnd < totalPages && this._moreLinksSection()
            } {
                this._nextLinkSection()
            } {
                this._lastLinkSection()
            } <
            /ul>
        );
    }

    /**
     * The event handler that gets invoked when the number of items per page changes
     *
     * @name onPageItemsChanged
     * @function
     * @public
     * @param {object} props The event props
     * @returns {void}
     */
    onPageItemsChanged(props) {
        const pageSelected = FIRST_PAGE_NUMBER;
        const pageItems = props.value;

        this.setState({
            pageItems,
            pageSelected
        });
        this.props.onChange(pageSelected, pageItems);
    }

    /**
     * The event handler that gets invoked when a page link is clicked
     *
     * @name onPageClick
     * @function
     * @public
     * @param {object} evt The event object
     * @param {number} pageSelected The value of the page selected
     * @returns {void}
     */
    onPageClick(evt, pageSelected) {
        evt.preventDefault();
        this.setState({
            pageSelected
        });
        this.props.onChange(pageSelected, this.state.pageItems);
    }

    /**
     * The event handler that gets invoked when a navigation link is clicked
     *
     * @name onNavigationClick
     * @function
     * @public
     * @param {object} evt the event object
     * @param {string} navigationType The type of navigation link that was clicked
     * @returns {void}
     */
    onNavigationClick(evt, navigationType) {
        evt.preventDefault();
        let pageSelected;
        const totalPages = this._totalPages(this.state.pageItems, this.props.totalItems);

        switch (navigationType) {
            case 'first':
                pageSelected = FIRST_PAGE_NUMBER;
                break;
            case 'last':
                pageSelected = totalPages;
                break;
            case 'prev':
                pageSelected = Math.max(FIRST_PAGE_NUMBER, this.state.pageSelected - 1);
                break;
            case 'next':
                pageSelected = Math.min(totalPages, this.state.pageSelected + 1);
                break;
            default:
                pageSelected = FIRST_PAGE_NUMBER;
                break;
        }

        this.setState({
            pageSelected
        });
        this.props.onChange(pageSelected, this.state.pageItems);
    }

    /**
     * React life cycle method which is invoked before a mounted component receives new props
     *
     * @param {object} prevProps The previous properties
     * @private
     */
    componentDidUpdate(prevProps) {
        if (this.props.totalItems !== prevProps.totalItems) {
            // set the selected page to the first page everytime the total number of pages change
            this.setState({
                pageSelected: FIRST_PAGE_NUMBER
            });
        }
    }

    /**
     * React life cycle hook for rendering the component
     *
     * @name render
     * @function
     * @public
     * @returns {ReactElement} JSX for the entire Pagination component
     */
    render() {
        if (this._allowItemsPerPageSelection()) {
            return ( <
                div className = 'pagination-wrap mt-3 mb-3' > {
                    this._paginationSection()
                } {
                    this._numberItemsSection()
                } <
                /div>
            );
        }

        return ( <
            div className = 'pagination-wrap mt-3 mb-3' > {
                this._paginationSection()
            } <
            /div>
        );
    }
}

/**
 * Pagination components display name (typically used by a react Dev tool plug-in)
 *
 * @type {string}
 */
Pagination.displayName = 'Pagination';

/**
 * Page item validation
 *
 * @param {object} props properties passed in
 * @param {string} propName name of prop to be validated
 * @returns {Error | void} Error if invalid
 */
Pagination.pageItemValidation = function(props, propName) {
    const pageItems = props[propName];
    const pageItemsChoices = props.pageItemsChoices;

    if (!isInteger(pageItems) && !(pageItems > 0)) {
        return new Error(`pageItems should be positive integer`);
    }

    if (!!pageItemsChoices.length && pageItemsChoices.indexOf(pageItems) === -1) {
        return new Error(`Invalid value for prop pageItems`);
    }
};

/**
 * Pagination component propTypes
 * typically used for type checking
 *
 * @type {object}
 */
Pagination.propTypes = {
    /** The Default selected page */
    defaultSelected: PropTypes.number,
    /** The maximum number of page links that should be displayed. */
    maxPageLinks: PropTypes.number,
    /** The callback handler when a pagination selection changes i.e. either a page selection or the number
    of items per page selection. The callback gets passed two parameters the page
    currently selected and the current number of items per page value. */
    onChange: PropTypes.func.isRequired,
    /** The number of items that are being displayed per page. */
    pageItems: Pagination.pageItemValidation,
    /** The allowed choices for number of items that will be displayed per page. */
    pageItemsChoices: PropTypes.arrayOf(PropTypes.number),
    /** Set the size (sm | md | lg) */
    size: PropTypes.oneOf(['sm', 'md', 'lg']),
    /** Flag to show or hide the 'first' and 'last' page links. */
    showBookends: PropTypes.bool,
    /** The total number of items in the result set that is being paginated. */
    totalItems: PropTypes.number.isRequired
};

/**
 * Pagination component default prop values
 *
 * @type {object}
 */
Pagination.defaultProps = {
    defaultSelected: FIRST_PAGE_NUMBER,
    maxPageLinks: DEFAULT_NUM_PAGES_SHOWN,
    pageItemsChoices: [],
    size: 'md',
    showBookends: true
};



// WEBPACK FOOTER //
// ./node_modules/@ux/pagination/index.js