import React from 'react';
import PropTypes from 'prop-types';
import Component from '@ux/component';
import Header from './header';
import Close from './close';
import Details from './details';
import {
    BLOCK,
    NONE,
    DIRECTIONS
} from './constants';

/**
 * Alert notifications component.
 *
 * Alerts may be dissmissible, or not have a close button.
 * Alerts may have additional details, which may be toggled open and closed.
 *
 * @displayName Alert
 * @class Alert
 * @public
 */
export default class Alert extends Component {
    constructor({
        display
    }) {
        super(...arguments);

        // Initial state of the toggled message: block, none or undefined (no toggle).
        this.state = {
            ...this.state,
            display,
            open: true
        };
    }

    /**
     * Getter to return a handler to toggle the visibility of additional details
     * if present.
     *
     * @returns {Function} toggle handler
     * @private
     */
    get toggle() {
        return () => {
            if (!this.state.display) return;

            this.setState({
                display: this.state.display === BLOCK ? NONE : BLOCK
            });
        };
    }

    /**
     * Getter that returns a handler to close the alert if it is currently open
     * and it is dismissible.
     *
     * If an `onClose` prop has been specified it will be called after the alert
     * has been closed.
     *
     * @returns {Function} close handler
     * @public
     */
    get close() {
        return () => {
            if (!this.state.open) return;

            this.setState({
                open: false
            });

            if (this.props.onClose) {
                this.props.onClose();
            }
        };
    }

    /**
     * Render the alert component.
     *
     * @returns {ReactElement} Alert box.
     * @public
     */
    render() {
        const alertClass = ['alert', 'alert-' + this.props.icon];
        const classNames = this.classNames(alertClass, {
            'alert-dismissible': this.props.dismissible
        });

        if (!this.state.open) {
            return false;
        }

        return ( <
            div className = {
                classNames
            }
            role = 'alert'
            aria - label = {
                this.props.icon
            } > {
                this.props.dismissible && < Close onClick = {
                    this.close
                }
                /> } <
                Header icon = {
                    this.props.icon
                }
                heading = {
                    this.props.header
                } > {
                    this.props.message
                } <
                /Header> <
                Details onClick = {
                    this.toggle
                }
                display = {
                    this.state.display
                } > {
                    this.props.children
                } <
                /Details> <
                /div>
            );
        }
    }

    /**
     * The default properties.
     *
     * @type {Object}
     * @private
     */
    Alert.defaultProps = {
        icon: 'danger',
        display: 'block',
        dismissible: true
    };

    /**
     * Property types.
     *
     * @type {Object}
     * @private
     */
    Alert.propTypes = {
        /** The icon image and class to use */
        icon: PropTypes.string,
        /** The alert message heading */
        header: PropTypes.node,
        /** The alert message contents */
        message: PropTypes.node.isRequired,
        /** Additional alert detail content */
        children: PropTypes.node,
        /** How to initially display the additional alert details (block or none) */
        display: PropTypes.oneOf(Object.keys(DIRECTIONS)),
        /** Flag for whether the alert can be dismissed */
        dismissible: PropTypes.bool,
        /** Callback function when alert is closed */
        onClose: PropTypes.func
    };



    // WEBPACK FOOTER //
    // ./node_modules/@ux/alert/index.js