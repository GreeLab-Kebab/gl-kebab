import React from 'react';
import PropTypes from 'prop-types';
import Base from './tooltip';
import Close from './tooltip-close';
import Content from './tooltip-content';
import Title from './tooltip-title';
import TooltipPortal from './tooltip-portal';
import {
    withNamespace,
    NamespaceShape
} from '@ux/namespace-component';

/**
 * Display a Tooltip.
 *
 * @displayName Tooltip (Web)
 * @class Tooltip
 * @public
 */
export class Tooltip extends Base {
    constructor() {
        super(...arguments);
        this.state = {
            ...this.state,
            isOpen: false
        };
        this.anchorRef = React.createRef();

        this.close = this.close.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.anchorMouseEnter = this.anchorMouseEnter.bind(this);
        this.anchorMouseLeave = this.anchorMouseLeave.bind(this);
        this.startAutoHideTimer = this.startAutoHideTimer.bind(this);
        this.stopAutoHideTimer = this.stopAutoHideTimer.bind(this);
        this.autoHideTime = 0;
        this.autoHideTimerHandle = null;
    }

    /**
     * Remove the attached click event listener and close any remaining tooltips.
     *
     * @private
     */
    componentWillUnmount() {
        this.stopAutoHideTimer();
        this.off('click', this.close);
        this.close();
    }

    /**
     * Handles mouse enter event for the anchor element
     *
     * @param {Event} event React SyntheticMouseEnter event.
     * @private
     */
    anchorMouseEnter(event) {
        if (!this.props.openOnHover) {
            return;
        }

        this.open(event);
        this.stopAutoHideTimer();
    }

    /**
     * Handles mouse leave event for the anchor element
     *
     * @private
     */
    anchorMouseLeave() {
        this.startAutoHideTimer();
    }

    /**
     * Starts or restarts auto hide timer using `autoHideTimeout` prop
     *
     * @private
     */
    startAutoHideTimer() {
        if (!this.props.autoHideTimeout) {
            return;
        }

        this.stopAutoHideTimer();
        this.autoHideTimerHandle = window.setTimeout(this.close, this.props.autoHideTimeout);
    }

    /**
     * Stops (clears) auto hide timer
     *
     * @private
     */
    stopAutoHideTimer() {
        if (this.autoHideTimerHandle) {
            window.clearTimeout(this.autoHideTimerHandle);
        }
    }

    /**
     * Handle keyboard events for escape key on the tooltip, this can be
     * used to augment the default behavior if you want to have manual control
     * over closing of the tooltip.
     *
     * @param {Event} event Browser event.
     * @private
     */
    onKeyDown(event) {
        const key = event.key;

        if (event.type === 'keydown' && key === 'Escape') {
            event.preventDefault();
            this.close(event);
        }
    }

    /**
     * Unmount and remove the Content Component. This methods is used as
     * event handler and therefore follows the getter pattern.
     *
     * @public
     */
    close() {
        if (!this.state.isOpen) {
            return;
        }

        this.setState({
            isOpen: false
        }, this.props.onClose);
    }

    /**
     * This method is called from `toggle` to open the tooltip.
     *
     * @public
     */
    open() {
        const props = this.props;

        /* eslint react/no-render-return-value: 0 */
        if (this.state.isOpen) {
            return;
        }

        this.setState({
            isOpen: true
        }, props.onOpen);
    }

    /**
     * Render Tooltip component.
     *
     * @returns {ReactElement} div element with Tooltip.
     * @private
     */
    render() {
            const pointer = {
                cursor: 'pointer',
                outline: 'none'
            };
            const props = this.props;
            const dataEid = props['data-eid'];
            const ariaLabel = props['aria-label'];
            const className = this.namespace(props.text ? 'tooltip-over-text' : 'uxicon uxicon-help');
            const onClick = !this.props.persistent ? this.toggle : null;
            const onKeyDown = !this.props.persistent ? this.onKeyDown : null;
            const onMouseEnter = this.props.openOnHover ? this.anchorMouseEnter : null;
            const onMouseLeave = this.props.autoHideTimeout ? this.anchorMouseLeave : null;


            if (React.isValidElement(props.children)) {
                const child = React.Children.only(props.children);

                return ( <
                    React.Fragment > {
                        this.state.isOpen && < TooltipPortal { ...props
                        }
                        anchor = {
                            this.anchorRef.current
                        }
                        hideClose = {
                            props.hideClose
                        }
                        openOnHover = {
                            props.openOnHover
                        }
                        close = {
                            this.close
                        }
                        dismiss = {
                            this.dismiss
                        }
                        onMouseEnter = {
                            this.stopAutoHideTimer
                        }
                        onMouseLeave = {
                            this.startAutoHideTimer
                        }
                        /> } {
                            React.cloneElement(child, {
                                'style': this.assign({}, child.props.style || {}, pointer),
                                onClick,
                                onMouseEnter,
                                onMouseLeave,
                                onKeyDown,
                                'id': props.id,
                                'ref': this.anchorRef,
                                'tabIndex': props.tabIndex,
                                'data-eid': props.dataEid,
                                'aria-label': props.ariaLabel
                            })
                        } <
                        /React.Fragment>
                    );
                }

                return ( <
                    span id = {
                        props.id
                    }
                    onMouseEnter = {
                        onMouseEnter
                    }
                    onMouseLeave = {
                        onMouseLeave
                    } > {
                        this.state.isOpen && < TooltipPortal { ...props
                        }
                        anchor = {
                            this.anchorRef.current
                        }
                        hideClose = {
                            props.hideClose
                        }
                        openOnHover = {
                            props.openOnHover
                        }
                        close = {
                            this.close
                        }
                        dismiss = {
                            this.dismiss
                        }
                        onMouseEnter = {
                            this.stopAutoHideTimer
                        }
                        onMouseLeave = {
                            this.startAutoHideTimer
                        }
                        /> } {
                            props.children
                        } < span
                        role = 'button'
                        aria - haspopup = 'true'
                        aria - label = {
                            ariaLabel
                        }
                        tabIndex = {
                            props.tabIndex
                        }
                        className = {
                            className
                        }
                        onClick = {
                            onClick
                        }
                        onKeyDown = {
                            onKeyDown
                        }
                        style = {
                            pointer
                        }
                        ref = {
                            this.anchorRef
                        }
                        data - eid = {
                            dataEid
                        } > {
                            props.text
                        } < /span> <
                        /span>
                    );
                }
            }

            /**
             * Default prop values.
             *
             * @enum {Object} defaultProps
             * @public
             */
            Tooltip.defaultProps = {
                persistent: false,
                openOnHover: false,
                hideClose: false
            };

            /**
             * Property types definition.
             *
             * @enum {Object} propTypes
             * @public
             */
            Tooltip.propTypes = {
                ...NamespaceShape,
                ...Base.propTypes,

                /** HTML element id to use for the anchor element */
                id: PropTypes.string,
                /** Flag for whether a tooltip is persistent */
                persistent: PropTypes.bool,
                /** (Desktop/Mouse use only) Flag for whether the tooltip should open when the anchor is hovered */
                openOnHover: PropTypes.bool,
                /** The number of milliseconds before a tooltip auto-hides */
                autoHideTimeout: PropTypes.number,
                /** (Desktop/Mouse use only) Hides the close button for use as a hover only tooltip **/
                hideClose: PropTypes.bool,
                /** className for styling */
                className: PropTypes.string
            };

            //
            // Make importing easier by exposing the individual components to the Tooltip
            // class.
            //
            Tooltip.Close = Close;
            Tooltip.Content = Content;
            Tooltip.Title = Title;

            export default withNamespace(Tooltip);



            // WEBPACK FOOTER //
            // ./node_modules/@ux/tooltip/index.js